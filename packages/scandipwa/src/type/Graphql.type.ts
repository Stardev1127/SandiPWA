/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  
  /**
   * Get a list of available store views and their config information.
   */
  availableStores?: Array<GQLStoreConfig | null>;
  
  /**
   * Returns information about shopping cart
   */
  cart?: GQLCart;
  categories?: GQLCategoryResult;
  
  /**
   * The category query searches for categories that match the criteria specified in the search and filter attributes.
   * @deprecated Use 'categoryList' query instead of 'category' query
   */
  category?: GQLCategoryTree;
  
  /**
   * Returns an array of categories based on the specified filters.
   */
  categoryList?: Array<GQLCategoryTree | null>;
  
  /**
   * Retrieves an array of configuration data for the chat widget.
   */
  chatData?: GQLChatData;
  
  /**
   * The Checkout Agreements information
   */
  checkoutAgreements?: Array<GQLCheckoutAgreement | null>;
  
  /**
   * The CMS block query returns information about CMS blocks
   */
  cmsBlocks?: GQLCmsBlocks;
  
  /**
   * The CMS page query returns information about a CMS page
   */
  cmsPage?: GQLCmsPage;
  
  /**
   * Return products that have been added to the specified compare list
   */
  compareList?: GQLCompareList;
  
  /**
   * Contact Us page config
   */
  contactPageConfig?: GQLContactPageConfig;
  
  /**
   * The countries query provides information for all countries.
   */
  countries?: Array<GQLCountry | null>;
  
  /**
   * The countries query provides information for a single country.
   */
  country?: GQLCountry;
  
  /**
   * The currency query returns information about store currency.
   */
  currency?: GQLCurrency;
  
  /**
   * The currency data query
   */
  currencyData?: GQLCurrencyConfig;
  
  /**
   * The customAttributeMetadata query returns the attribute type, given an attribute code and entity type
   */
  customAttributeMetadata?: GQLCustomAttributeMetadata;
  
  /**
   * The customer query returns information about a customer account
   */
  customer?: GQLCustomer;
  
  /**
   * Returns information about the customer shopping cart
   */
  customerCart: GQLCart;
  
  /**
   * The query returns the contents of a customer's downloadable products
   */
  customerDownloadableProducts?: GQLCustomerDownloadableProducts;
  
  /**
   * 
   * @deprecated Use orders from customer instead
   */
  customerOrders?: GQLCustomerOrders;
  
  /**
   * Return a list of customer payment tokens
   */
  customerPaymentTokens?: GQLCustomerPaymentTokens;
  
  /**
   * Returns status of Easy Email Capture for Checkout.
   */
  emailCaptureCheckout?: GQLIsConfigSettingEnabledOutput;
  
  /**
   * Returns status of Easy Email Capture for Newsletter.
   */
  emailCaptureNewsletter?: GQLIsConfigSettingEnabledOutput;
  getBraintreeConfig?: GQLBraintree;
  
  /**
   * Get cart display settings
   */
  getCartDisplayConfig?: GQLCartDisplayConfig;
  getCartForCustomer?: GQLQuoteData;
  
  /**
   * Retrieve secure PayPal url for Payments Pro Hosted Solution transaction.
   */
  getHostedProUrl?: GQLHostedProUrl;
  
  /**
   * The Sales Order query returns information about a Sales order
   */
  getOrderById?: GQLOrder;
  
  /**
   * The Sales Order query returns information about a Sales order
   */
  getOrderList?: GQLOrderList;
  
  /**
   * Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods.
   */
  getPayflowLinkToken?: GQLPayflowLinkToken;
  getPaymentMethods?: Array<GQLPaymentMethod | null>;
  getStores?: GQLStores;
  isEmailAvailable?: GQLIsEmailAvailableOutput;
  orderByInvoice?: GQLCustomerOrder;
  orderByRefund?: GQLCustomerOrder;
  orderByShipment?: GQLCustomerOrder;
  
  /**
   * Retrieves information about an order by order id.
   */
  orderData?: GQLOrder;
  
  /**
   * The pickup locations query searches for locations that match the search request requirements.
   */
  pickupLocations?: GQLPickupLocations;
  
  /**
   * Retrieves metadata required by clients to render the Reviews section.
   */
  productReviewRatingsMetadata: GQLProductReviewRatingsMetadata;
  
  /**
   * The products query searches for products that match the criteria specified in the search and filter attributes.
   */
  products?: GQLProducts;
  
  /**
   * Return the full details for a specified product, category, or CMS page given
   * the specified url_key, appended by the url_suffix, if one exists
   */
  route?: GQLRoutableInterface;
  s_wishlist?: GQLWishlistOutput;
  
  /**
   * Returns Scandiweb Menu Manager menu data
   */
  scandiwebMenu?: GQLMenu;
  
  /**
   * The scandiwebSlider entity returns slider data
   */
  scandiwebSlider?: GQLSlider;
  
  /**
   * The store config query
   */
  storeConfig?: GQLStoreConfig;
  
  /**
   * The store list query
   */
  storeList?: Array<GQLStoreConfig | null>;
  
  /**
   * Retrieves an array of configuration data for different types of tracking.
   */
  trackingData?: GQLTrackingData;
  
  /**
   * The urlResolver query returns the relative URL for a specified product, category or CMS page
   * @deprecated Use the 'route' query instead
   */
  urlResolver?: GQLEntityUrl;
  
  /**
   * The wishlist query returns the contents of a customer's wish list
   * @deprecated Moved under `Customer` `wishlist`
   */
  wishlist?: GQLWishlistOutput;
}

/**
 * The type contains information about a store config
 */
export interface GQLStoreConfig {
  
  /**
   * Footer Miscellaneous HTML
   */
  absolute_footer?: string;
  
  /**
   * Defines OAuth customer token lifetime
   */
  access_token_lifetime?: string;
  
  /**
   * Number of address lines in forms
   */
  address_lines_quantity?: number;
  
  /**
   * Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No)
   */
  allow_guests_to_write_product_reviews?: string;
  
  /**
   * The value of the Allow Gift Messages for Order Items option
   */
  allow_items?: string;
  
  /**
   * The value of the Allow Gift Messages on Order Level option
   */
  allow_order?: string;
  
  /**
   * Alternative text for the next pages link in the pagination menu
   */
  anchor_text_for_next?: string;
  
  /**
   * Alternative text for the previous pages link in the pagination menu
   */
  anchor_text_for_previous?: string;
  
  /**
   * Enable autocomplete on login and forgot password forms
   */
  autocomplete_on_storefront?: boolean;
  
  /**
   * Base currency code
   */
  base_currency_code?: string;
  
  /**
   * Base link URL for the store
   */
  base_link_url?: string;
  
  /**
   * Base media URL for the store
   */
  base_media_url?: string;
  
  /**
   * Base static URL for the store
   */
  base_static_url?: string;
  
  /**
   * Base URL for the store
   */
  base_url?: string;
  
  /**
   * Braintree cc vault status.
   */
  braintree_cc_vault_active?: string;
  
  /**
   * Default Sort By.
   */
  catalog_default_sort_by?: string;
  
  /**
   * Corresponds to the 'Display Prices In Product Lists' field. It indicates how
   * FPT information is displayed on category pages
   */
  category_fixed_product_tax_display_setting?: GQLFixedProductTaxDisplaySettings;
  
  /**
   * Category URL Suffix
   */
  category_url_suffix?: string;
  
  /**
   * CMS Home Page
   */
  cms_home_page?: string;
  
  /**
   * CMS No Cookies Page
   */
  cms_no_cookies?: string;
  
  /**
   * CMS No Route Page
   */
  cms_no_route?: string;
  
  /**
   * A code assigned to the store to identify it
   * @deprecated Use `store_code` instead.
   */
  code?: string;
  
  /**
   * The configuration setting determines which thumbnail should be used in the cart for configurable products.
   */
  configurable_thumbnail_source?: string;
  
  /**
   * Cookie lifetime in seconds
   */
  cookie_lifetime?: string;
  
  /**
   * Cookie popup - Cookie Privacy Page Link
   */
  cookie_link?: string;
  
  /**
   * Cookie popup - Text
   */
  cookie_text?: string;
  
  /**
   * Copyright
   */
  copyright?: string;
  
  /**
   * Day, month and year order in date fields
   */
  date_fields_order?: string;
  default_country?: string;
  
  /**
   * Default Meta Description
   */
  default_description?: string;
  
  /**
   * Default display currency code
   */
  default_display_currency_code?: string;
  
  /**
   * Default Meta Keywords
   */
  default_keywords?: string;
  
  /**
   * Default Page Title
   */
  default_title?: string;
  
  /**
   * Defines if instore delivery method actived
   */
  delivery_instore_active?: boolean;
  
  /**
   * Demo notice enabled for store
   */
  demo_notice?: boolean;
  
  /**
   * Display Demo Store Notice
   */
  demonotice?: number;
  
  /**
   * Is product stock status displayed
   */
  display_product_stock_status?: boolean;
  
  /**
   * Defines if guest can enter checkout with downloadable product in cart
   */
  downloadable_disable_guest_checkout?: boolean;
  
  /**
   * Defines if downloadable links should be opened in new tab
   */
  downloadable_links_target_new_window?: boolean;
  
  /**
   * Default Web URL
   */
  front?: string;
  
  /**
   * Products per Page on Grid Default Value.
   */
  grid_per_page?: number;
  
  /**
   * Products per Page on Grid Allowed Values.
   */
  grid_per_page_values?: string;
  
  /**
   * Is guest checkout enabled
   */
  guest_checkout?: boolean;
  
  /**
   * Scripts and Style Sheets
   */
  head_includes?: string;
  
  /**
   * Favicon Icon
   */
  head_shortcut_icon?: string;
  
  /**
   * Logo Image
   */
  header_logo_src?: string;
  
  /**
   * The ID number assigned to the store
   * @deprecated Use `store_code` instead.
   */
  id?: number;
  is_active?: boolean;
  is_allowed_reorder?: boolean;
  
  /**
   * Indicates whether the store view has been designated as the default within the store group
   */
  is_default_store?: boolean;
  
  /**
   * Indicates whether the store group has been designated as the default within the website
   */
  is_default_store_group?: boolean;
  
  /**
   * Is customer email confirmation enabled
   */
  is_email_confirmation_required?: boolean;
  
  /**
   * Should layered navigation display product count
   */
  layered_navigation_product_count_enabled?: boolean;
  
  /**
   * List Mode.
   */
  list_mode?: string;
  
  /**
   * Products per Page on List Default Value.
   */
  list_per_page?: number;
  
  /**
   * Products per Page on List Allowed Values.
   */
  list_per_page_values?: string;
  
  /**
   * Store locale
   */
  locale?: string;
  
  /**
   * Logo Image Alt
   */
  logo_alt?: string;
  
  /**
   * Logo Attribute Height
   */
  logo_height?: number;
  
  /**
   * Logo Attribute Width
   */
  logo_width?: number;
  
  /**
   * Indicates whether wishlists are enabled (1) or disabled (0)
   */
  magento_wishlist_general_is_enabled?: string;
  
  /**
   * The minimum number of characters required for a valid password.
   */
  minimum_password_length?: string;
  
  /**
   * Defines password minimun length for customer
   */
  minimun_password_length?: number;
  name?: string;
  
  /**
   * Is newsletter subscription enabled
   */
  newsletter_general_active?: boolean;
  
  /**
   * Is newsletter subscription allowed for not authentificated users
   */
  newsletter_subscription_allow_guest_subscribe?: boolean;
  
  /**
   * Is moderation of newsletter subscription required
   */
  newsletter_subscription_confirm?: boolean;
  
  /**
   * Default No-route URL
   */
  no_route?: string;
  
  /**
   * How many pagination links to display
   */
  pagination_frame?: number;
  
  /**
   * Number of links that are skipped ahead before showing the next set of links in the pagination
   */
  pagination_frame_skip?: number;
  
  /**
   * Payflow Pro vault status.
   */
  payment_payflowpro_cc_vault_active?: string;
  
  /**
   * PayPal client ID
   */
  paypal_client_id?: string;
  
  /**
   * PayPal sandbox mode
   */
  paypal_sandbox_flag?: boolean;
  
  /**
   * PLP list mode
   */
  plp_list_mode?: string;
  
  /**
   * The price tax display mode
   */
  priceTaxDisplay?: GQLPriceTaxDisplay;
  
  /**
   * Defines if product drop price alert is enabled
   */
  product_alert_allow_price?: boolean;
  
  /**
   * Defines if product in stock alert is enabled
   */
  product_alert_allow_stock?: boolean;
  
  /**
   * Corresponds to the 'Display Prices On Product View Page' field. It indicates
   * how FPT information is displayed on product pages
   */
  product_fixed_product_tax_display_setting?: GQLFixedProductTaxDisplaySettings;
  
  /**
   * Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No)
   */
  product_reviews_enabled?: string;
  
  /**
   * Product URL Suffix.
   */
  product_url_suffix?: string;
  
  /**
   * Use Categories Path for Product URLs
   */
  product_use_categories?: boolean;
  
  /**
   * Allows to decide whether to redirect user after login
   */
  redirect_dashboard?: boolean;
  
  /**
   * Defines if state field is displayed for countries that doesn't require state
   */
  region_display_all?: boolean;
  
  /**
   * The number of different character classes required in a password (lowercase, uppercase, digits, special characters).
   */
  required_character_classes_number?: string;
  
  /**
   * Are guest reviews enabled
   */
  reviews_allow_guest?: boolean;
  
  /**
   * Are reviews enabled
   */
  reviews_are_enabled?: boolean;
  
  /**
   * The ID of the root category
   * @deprecated Use `root_category_uid` instead
   */
  root_category_id?: number;
  
  /**
   * The unique ID for a `CategoryInterface` object.
   */
  root_category_uid?: string;
  
  /**
   * Defines if customer is allowed to subscribe to order status
   */
  rss_order_subscribe_allow?: boolean;
  
  /**
   * Corresponds to the 'Display Prices In Sales Modules' field. It indicates how
   * FPT information is displayed on cart, checkout, and order pages
   */
  sales_fixed_product_tax_display_setting?: GQLFixedProductTaxDisplaySettings;
  
  /**
   * Secure base link URL for the store
   */
  secure_base_link_url?: string;
  
  /**
   * Secure base media URL for the store
   */
  secure_base_media_url?: string;
  
  /**
   * Secure base static URL for the store
   */
  secure_base_static_url?: string;
  
  /**
   * Secure base URL for the store
   */
  secure_base_url?: string;
  
  /**
   * Email to a Friend configuration.
   */
  send_friend?: GQLSendFriendConfiguration;
  
  /**
   * Show Breadcrumbs for CMS Pages
   */
  show_cms_breadcrumbs?: number;
  
  /**
   * Allows to control the visibility and validation of VAT/TAX Number at customer details / signup forms
   */
  show_tax_vat_number?: string;
  
  /**
   * Displays VAT Number field at address form
   */
  show_vat_number_on_storefront?: boolean;
  
  /**
   * The unique ID of the store view. In the Admin, this is called the Store View
   * Code. When making a GraphQL call, assign this value to the `Store` header to
   * provide the scope
   */
  store_code?: string;
  
  /**
   * The unique ID assigned to the store group. In the Admin, this is called the Store Name
   */
  store_group_code?: string;
  
  /**
   * The label assigned to the store group
   */
  store_group_name?: string;
  
  /**
   * The label assigned to the store view
   */
  store_name?: string;
  
  /**
   * The store view sort order
   */
  store_sort_order?: number;
  
  /**
   * Terms and conditions are enabled for checkout
   */
  terms_are_enabled?: boolean;
  
  /**
   * 24h or 12h + AM/PM format
   */
  time_format?: string;
  
  /**
   * Timezone of the store
   */
  timezone?: string;
  
  /**
   * Page Title Prefix
   */
  title_prefix?: string;
  
  /**
   * Page Title Separator.
   */
  title_separator?: string;
  
  /**
   * Page Title Suffix
   */
  title_suffix?: string;
  
  /**
   * Use a popup calendar as input control for date fields
   */
  use_calendar?: boolean;
  
  /**
   * The configuration determines if the store code should be used in the URL
   */
  use_store_in_url?: boolean;
  
  /**
   * The unique ID for the website
   */
  website_code?: string;
  
  /**
   * The ID number assigned to the website store
   * @deprecated The field should not be used on the storefront
   */
  website_id?: number;
  
  /**
   * The label assigned to the website
   */
  website_name?: string;
  
  /**
   * The unit of weight
   */
  weight_unit?: string;
  
  /**
   * Welcome Text
   */
  welcome?: string;
  
  /**
   * Is wishlist enabled
   */
  wishlist_general_active?: boolean;
  
  /**
   * Min and max years allowed
   */
  year_range?: string;
}

/**
 * This enumeration display settings for the fixed product tax
 */
export enum GQLFixedProductTaxDisplaySettings {
  
  /**
   * The displayed price includes the FPT amount without displaying the
   * ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only'
   */
  INCLUDE_FPT_WITHOUT_DETAILS = 'INCLUDE_FPT_WITHOUT_DETAILS',
  
  /**
   * The displayed price includes the FPT amount while displaying the values of
   * ProductPrice.fixed_product_taxes separately. This value corresponds to
   * 'Including FPT and FPT description'
   */
  INCLUDE_FPT_WITH_DETAILS = 'INCLUDE_FPT_WITH_DETAILS',
  
  /**
   * The displayed price does not include the FPT amount. The values of
   * ProductPrice.fixed_product_taxes and the price including the FPT are displayed
   * separately. This value corresponds to 'Excluding FPT, Including FPT
   * description and final price'
   */
  EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS = 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS',
  
  /**
   * The displayed price does not include the FPT amount. The values from
   * ProductPrice.fixed_product_taxes are not displayed. This value corresponds to
   * 'Excluding FPT'
   */
  EXCLUDE_FPT_WITHOUT_DETAILS = 'EXCLUDE_FPT_WITHOUT_DETAILS',
  
  /**
   * The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query
   */
  FPT_DISABLED = 'FPT_DISABLED'
}

export interface GQLPriceTaxDisplay {
  
  /**
   * Defines if product price will include/exclude tax or both in catalog
   */
  product_price_display_type?: string;
  
  /**
   * Defines if shipping price will include/exclude tax or both
   */
  shipping_price_display_type?: string;
}

export interface GQLSendFriendConfiguration {
  
  /**
   * Indicates whether the Email to a Friend feature is enabled.
   */
  enabled_for_customers: boolean;
  
  /**
   * Indicates whether the Email to a Friend feature is enabled for guests.
   */
  enabled_for_guests: boolean;
}

export interface GQLCart {
  
  /**
   * An array of coupons that have been applied to the cart
   * @deprecated Use applied_coupons instead
   */
  applied_coupon?: GQLAppliedCoupon;
  
  /**
   * An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code
   */
  applied_coupons?: Array<GQLAppliedCoupon | null>;
  
  /**
   * Available payment methods
   */
  available_payment_methods?: Array<GQLAvailablePaymentMethod | null>;
  billing_address?: GQLBillingCartAddress;
  email?: string;
  
  /**
   * The entered gift message for the cart
   */
  gift_message?: GQLGiftMessage;
  
  /**
   * The unique ID for a `Cart` object
   */
  id: string;
  is_virtual: boolean;
  items?: Array<GQLCartItemInterface | null>;
  prices?: GQLCartPrices;
  selected_payment_method?: GQLSelectedPaymentMethod;
  shipping_addresses: Array<GQLShippingCartAddress | null>;
  total_quantity: number;
}

export interface GQLAppliedCoupon {
  code: string;
}

export interface GQLAvailablePaymentMethod {
  
  /**
   * The payment method code
   */
  code: string;
  
  /**
   * The payment method title.
   */
  title: string;
}

export interface GQLBillingCartAddress extends GQLCartAddressInterface {
  city: string;
  company?: string;
  country: GQLCartAddressCountry;
  
  /**
   * 
   * @deprecated The field is used only in shipping address
   */
  customer_notes?: string;
  firstname: string;
  lastname: string;
  postcode?: string;
  region?: GQLCartAddressRegion;
  street: Array<string | null>;
  telephone: string;
}

export interface GQLCartAddressInterface {
  city: string;
  company?: string;
  country: GQLCartAddressCountry;
  firstname: string;
  lastname: string;
  postcode?: string;
  region?: GQLCartAddressRegion;
  street: Array<string | null>;
  telephone: string;
}

/** Use this to resolve interface type CartAddressInterface */
export type GQLPossibleCartAddressInterfaceTypeNames =
'BillingCartAddress' |
'ShippingCartAddress';

export interface GQLCartAddressInterfaceNameMap {
  CartAddressInterface: GQLCartAddressInterface;
  BillingCartAddress: GQLBillingCartAddress;
  ShippingCartAddress: GQLShippingCartAddress;
}

export interface GQLCartAddressCountry {
  code: string;
  label: string;
}

export interface GQLCartAddressRegion {
  code?: string;
  label?: string;
  region_id?: number;
}

/**
 * Contains the text of a gift message, its sender, and recipient
 */
export interface GQLGiftMessage {
  
  /**
   * Sender name
   */
  from: string;
  
  /**
   * Gift message text
   */
  message: string;
  
  /**
   * Recipient name
   */
  to: string;
}

export interface GQLCartItemInterface {
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

/** Use this to resolve interface type CartItemInterface */
export type GQLPossibleCartItemInterfaceTypeNames =
'BundleCartItem' |
'ConfigurableCartItem' |
'DownloadableCartItem' |
'SimpleCartItem' |
'VirtualCartItem';

export interface GQLCartItemInterfaceNameMap {
  CartItemInterface: GQLCartItemInterface;
  BundleCartItem: GQLBundleCartItem;
  ConfigurableCartItem: GQLConfigurableCartItem;
  DownloadableCartItem: GQLDownloadableCartItem;
  SimpleCartItem: GQLSimpleCartItem;
  VirtualCartItem: GQLVirtualCartItem;
}

export interface GQLCartItemPrices {
  
  /**
   * An array of discounts to be applied to the cart item
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * Applied FPT to the cart item.
   */
  fixed_product_taxes?: Array<GQLFixedProductTax | null>;
  price: GQLMoney;
  row_total: GQLMoney;
  row_total_including_tax: GQLMoney;
  
  /**
   * The total of all discounts applied to the item
   */
  total_item_discount?: GQLMoney;
}

/**
 * Defines an individual discount. A discount can be applied to the cart as a whole or to an item.
 */
export interface GQLDiscount {
  
  /**
   * The amount of the discount
   */
  amount: GQLMoney;
  
  /**
   * A description of the discount
   */
  label: string;
}

/**
 * A Money object defines a monetary value, including a numeric value and a currency code.
 */
export interface GQLMoney {
  
  /**
   * A three-letter currency code, such as USD or EUR
   */
  currency?: GQLCurrencyEnum;
  
  /**
   * A number expressing a monetary value
   */
  value?: number;
}

/**
 * The list of available currency codes
 */
export enum GQLCurrencyEnum {
  AFN = 'AFN',
  ALL = 'ALL',
  AZN = 'AZN',
  DZD = 'DZD',
  AOA = 'AOA',
  ARS = 'ARS',
  AMD = 'AMD',
  AWG = 'AWG',
  AUD = 'AUD',
  BSD = 'BSD',
  BHD = 'BHD',
  BDT = 'BDT',
  BBD = 'BBD',
  BYN = 'BYN',
  BZD = 'BZD',
  BMD = 'BMD',
  BTN = 'BTN',
  BOB = 'BOB',
  BAM = 'BAM',
  BWP = 'BWP',
  BRL = 'BRL',
  GBP = 'GBP',
  BND = 'BND',
  BGN = 'BGN',
  BUK = 'BUK',
  BIF = 'BIF',
  KHR = 'KHR',
  CAD = 'CAD',
  CVE = 'CVE',
  CZK = 'CZK',
  KYD = 'KYD',
  GQE = 'GQE',
  CLP = 'CLP',
  CNY = 'CNY',
  COP = 'COP',
  KMF = 'KMF',
  CDF = 'CDF',
  CRC = 'CRC',
  HRK = 'HRK',
  CUP = 'CUP',
  DKK = 'DKK',
  DJF = 'DJF',
  DOP = 'DOP',
  XCD = 'XCD',
  EGP = 'EGP',
  SVC = 'SVC',
  ERN = 'ERN',
  EEK = 'EEK',
  ETB = 'ETB',
  EUR = 'EUR',
  FKP = 'FKP',
  FJD = 'FJD',
  GMD = 'GMD',
  GEK = 'GEK',
  GEL = 'GEL',
  GHS = 'GHS',
  GIP = 'GIP',
  GTQ = 'GTQ',
  GNF = 'GNF',
  GYD = 'GYD',
  HTG = 'HTG',
  HNL = 'HNL',
  HKD = 'HKD',
  HUF = 'HUF',
  ISK = 'ISK',
  INR = 'INR',
  IDR = 'IDR',
  IRR = 'IRR',
  IQD = 'IQD',
  ILS = 'ILS',
  JMD = 'JMD',
  JPY = 'JPY',
  JOD = 'JOD',
  KZT = 'KZT',
  KES = 'KES',
  KWD = 'KWD',
  KGS = 'KGS',
  LAK = 'LAK',
  LVL = 'LVL',
  LBP = 'LBP',
  LSL = 'LSL',
  LRD = 'LRD',
  LYD = 'LYD',
  LTL = 'LTL',
  MOP = 'MOP',
  MKD = 'MKD',
  MGA = 'MGA',
  MWK = 'MWK',
  MYR = 'MYR',
  MVR = 'MVR',
  LSM = 'LSM',
  MRO = 'MRO',
  MUR = 'MUR',
  MXN = 'MXN',
  MDL = 'MDL',
  MNT = 'MNT',
  MAD = 'MAD',
  MZN = 'MZN',
  MMK = 'MMK',
  NAD = 'NAD',
  NPR = 'NPR',
  ANG = 'ANG',
  YTL = 'YTL',
  NZD = 'NZD',
  NIC = 'NIC',
  NGN = 'NGN',
  KPW = 'KPW',
  NOK = 'NOK',
  OMR = 'OMR',
  PKR = 'PKR',
  PAB = 'PAB',
  PGK = 'PGK',
  PYG = 'PYG',
  PEN = 'PEN',
  PHP = 'PHP',
  PLN = 'PLN',
  QAR = 'QAR',
  RHD = 'RHD',
  RON = 'RON',
  RUB = 'RUB',
  RWF = 'RWF',
  SHP = 'SHP',
  STD = 'STD',
  SAR = 'SAR',
  RSD = 'RSD',
  SCR = 'SCR',
  SLL = 'SLL',
  SGD = 'SGD',
  SKK = 'SKK',
  SBD = 'SBD',
  SOS = 'SOS',
  ZAR = 'ZAR',
  KRW = 'KRW',
  LKR = 'LKR',
  SDG = 'SDG',
  SRD = 'SRD',
  SZL = 'SZL',
  SEK = 'SEK',
  CHF = 'CHF',
  SYP = 'SYP',
  TWD = 'TWD',
  TJS = 'TJS',
  TZS = 'TZS',
  THB = 'THB',
  TOP = 'TOP',
  TTD = 'TTD',
  TND = 'TND',
  TMM = 'TMM',
  USD = 'USD',
  UGX = 'UGX',
  UAH = 'UAH',
  AED = 'AED',
  UYU = 'UYU',
  UZS = 'UZS',
  VUV = 'VUV',
  VEB = 'VEB',
  VEF = 'VEF',
  VND = 'VND',
  CHE = 'CHE',
  CHW = 'CHW',
  XOF = 'XOF',
  WST = 'WST',
  YER = 'YER',
  ZMK = 'ZMK',
  ZWD = 'ZWD',
  TRY = 'TRY',
  AZM = 'AZM',
  ROL = 'ROL',
  TRL = 'TRL',
  XPF = 'XPF'
}

/**
 * A single FPT that can be applied to a product price.
 */
export interface GQLFixedProductTax {
  
  /**
   * Amount of the FPT as a money object.
   */
  amount?: GQLMoney;
  
  /**
   * The label assigned to the FPT to be displayed on the frontend.
   */
  label?: string;
}

/**
 * The ProductInterface contains attributes that are common to all types of
 * products. Note that descriptions may not be available for custom and EAV attributes.
 */
export interface GQLProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  yes_no?: number;
}

/** Use this to resolve interface type ProductInterface */
export type GQLPossibleProductInterfaceTypeNames =
'BundleProduct' |
'ConfigurableProduct' |
'SimpleProduct' |
'DownloadableProduct' |
'GroupedProduct' |
'VirtualProduct';

export interface GQLProductInterfaceNameMap {
  ProductInterface: GQLProductInterface;
  BundleProduct: GQLBundleProduct;
  ConfigurableProduct: GQLConfigurableProduct;
  SimpleProduct: GQLSimpleProduct;
  DownloadableProduct: GQLDownloadableProduct;
  GroupedProduct: GQLGroupedProduct;
  VirtualProduct: GQLVirtualProduct;
}

/**
 * CategoryInterface contains the full set of attributes that can be returned in a category search.
 */
export interface GQLCategoryInterface {
  available_sort_by?: Array<string | null>;
  
  /**
   * Breadcrumbs, parent categories info.
   */
  breadcrumbs?: Array<GQLBreadcrumb | null>;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Categories' is enabled
   */
  canonical_url?: string;
  children_count?: string;
  
  /**
   * Category CMS Block.
   */
  cms_block?: GQLCmsBlock;
  
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  custom_layout_update_file?: string;
  
  /**
   * The attribute to use for sorting.
   */
  default_sort_by?: string;
  
  /**
   * An optional description of the category.
   */
  description?: string;
  
  /**
   * Category display mode (products only, static block only, both)
   */
  display_mode?: string;
  filter_price_range?: number;
  
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: number;
  image?: string;
  include_in_menu?: number;
  is_anchor?: number;
  landing_page?: number;
  
  /**
   * Indicates the depth of the category within the tree.
   */
  level?: number;
  meta_description?: string;
  meta_keywords?: string;
  meta_title?: string;
  
  /**
   * The display name of the category.
   */
  name?: string;
  
  /**
   * Category Path.
   */
  path?: string;
  
  /**
   * Category path in store.
   */
  path_in_store?: string;
  
  /**
   * The position of the category relative to other categories at the same level in tree.
   */
  position?: number;
  
  /**
   * The number of products in the category that are marked as visible. By default,
   * in complex products, parent products are visible, but their child products are not.
   */
  product_count?: number;
  
  /**
   * The list of products assigned to the category.
   */
  products?: GQLCategoryProducts;
  
  /**
   * The unique ID for a `CategoryInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  url?: string;
  
  /**
   * The url key assigned to the category.
   */
  url_key?: string;
  
  /**
   * The url path assigned to the category.
   */
  url_path?: string;
  
  /**
   * The part of the category URL that is appended after the url key
   */
  url_suffix?: string;
}

/** Use this to resolve interface type CategoryInterface */
export type GQLPossibleCategoryInterfaceTypeNames = 'CategoryTree';

export interface GQLCategoryInterfaceNameMap {
  CategoryInterface: GQLCategoryInterface;
  CategoryTree: GQLCategoryTree;
}

/**
 * Breadcrumb item.
 */
export interface GQLBreadcrumb {
  
  /**
   * Category ID.
   * @deprecated Use the `category_uid` argument instead.
   */
  category_id?: number;
  
  /**
   * Is category active
   */
  category_is_active?: boolean;
  
  /**
   * Category level.
   */
  category_level?: number;
  
  /**
   * Category name.
   */
  category_name?: string;
  
  /**
   * The unique ID for a `Breadcrumb` object.
   */
  category_uid: string;
  
  /**
   * Trimmed URL rewrite
   */
  category_url?: string;
  
  /**
   * Category URL key.
   */
  category_url_key?: string;
  
  /**
   * Category URL path.
   */
  category_url_path?: string;
}

/**
 * CMS block defines all CMS block information
 */
export interface GQLCmsBlock {
  
  /**
   * CMS block content
   */
  content?: string;
  
  /**
   * CMS block is disabled
   */
  disabled?: boolean;
  
  /**
   * CMS block identifier
   */
  identifier?: string;
  
  /**
   * CMS block title
   */
  title?: string;
}

/**
 * ProductAttributeSortInput specifies the attribute to use for sorting search
 * results and indicates whether the results are sorted in ascending or descending
 * order. It's possible to sort products using searchable attributes with enabled
 * 'Use in Filter Options' option
 */
export interface GQLProductAttributeSortInput {
  
  /**
   * Attribute label: New attribute size!
   */
  New_attribute_size?: GQLSortEnum;
  
  /**
   * Attribute label: Attribute allows html
   */
  attribute_allows_html?: GQLSortEnum;
  
  /**
   * Attribute label: Product Name
   */
  name?: GQLSortEnum;
  
  /**
   * Sort by the position assigned to each product.
   */
  position?: GQLSortEnum;
  
  /**
   * Attribute label: Price
   */
  price?: GQLSortEnum;
  
  /**
   * Sort by the search relevance score (default).
   */
  relevance?: GQLSortEnum;
}

/**
 * This enumeration indicates whether to return results in ascending or descending order
 */
export enum GQLSortEnum {
  ASC = 'ASC',
  DESC = 'DESC'
}

/**
 * The category products object returned in the Category query.
 */
export interface GQLCategoryProducts {
  
  /**
   * An array of products that are assigned to the category.
   */
  items?: Array<GQLProductInterface | null>;
  
  /**
   * An object that includes the page_info and currentPage values specified in the query.
   */
  page_info?: GQLSearchResultPageInfo;
  
  /**
   * The number of products in the category that are marked as visible. By default,
   * in complex products, parent products are visible, but their child products are not.
   */
  total_count?: number;
}

/**
 * SearchResultPageInfo provides navigation for the query response
 */
export interface GQLSearchResultPageInfo {
  
  /**
   * Specifies which page of results to return
   */
  current_page?: number;
  
  /**
   * Specifies the maximum number of items to return
   */
  page_size?: number;
  
  /**
   * Total pages
   */
  total_pages?: number;
}

export interface GQLComplexTextValue {
  
  /**
   * HTML format
   */
  html: string;
}

export interface GQLOptimizedProductImage {
  label?: string;
  path?: string;
  url?: string;
}

/**
 * Contains basic information about a product image or video.
 */
export interface GQLMediaGalleryInterface {
  
  /**
   * Whether the image is hidden from view.
   */
  disabled?: boolean;
  
  /**
   * The label of the product image or video.
   */
  label?: string;
  
  /**
   * The media item's position after it has been sorted.
   */
  position?: number;
  
  /**
   * The URL of the product image or video.
   */
  url?: string;
}

/** Use this to resolve interface type MediaGalleryInterface */
export type GQLPossibleMediaGalleryInterfaceTypeNames =
'ProductImage' |
'ProductVideo';

export interface GQLMediaGalleryInterfaceNameMap {
  MediaGalleryInterface: GQLMediaGalleryInterface;
  ProductImage: GQLProductImage;
  ProductVideo: GQLProductVideo;
}

/**
 * MediaGalleryEntry defines characteristics about images and videos associated with a specific product
 */
export interface GQLMediaGalleryEntry {
  
  /**
   * The path of the base image on the server
   */
  base?: GQLMediaGalleryImageOfType;
  
  /**
   * Contains a ProductMediaGalleryEntriesContent object.
   */
  content?: GQLProductMediaGalleryEntriesContent;
  
  /**
   * Whether the image is hidden from view.
   */
  disabled?: boolean;
  
  /**
   * The path of the image on the server.
   */
  file?: string;
  
  /**
   * The identifier assigned to the object.
   * @deprecated Use `uid` instead.
   */
  id?: number;
  
  /**
   * The alt text displayed on the UI when the user points to the image.
   */
  label?: string;
  
  /**
   * The path of the large image on the server
   */
  large?: GQLMediaGalleryImageOfType;
  
  /**
   * image or video.
   */
  media_type?: string;
  
  /**
   * The media item's position after it has been sorted.
   */
  position?: number;
  
  /**
   * The path of the thumbnail image on the server
   */
  thumbnail?: GQLMediaGalleryImageOfType;
  
  /**
   * Array of image types. It can have the following values: image, small_image, thumbnail.
   */
  types?: Array<string | null>;
  
  /**
   * The unique ID for a `MediaGalleryEntry` object.
   */
  uid: string;
  
  /**
   * Contains a ProductMediaGalleryEntriesVideoContent object.
   */
  video_content?: GQLProductMediaGalleryEntriesVideoContent;
}

/**
 * Products thumbnail image
 */
export interface GQLMediaGalleryImageOfType {
  
  /**
   * Product image type
   */
  type?: string;
  
  /**
   * Product image url
   */
  url?: string;
}

/**
 * ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image.
 */
export interface GQLProductMediaGalleryEntriesContent {
  
  /**
   * The image in base64 format.
   */
  base64_encoded_data?: string;
  
  /**
   * The file name of the image.
   */
  name?: string;
  
  /**
   * The MIME type of the file, such as image/png.
   */
  type?: string;
}

/**
 * ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video.
 */
export interface GQLProductMediaGalleryEntriesVideoContent {
  
  /**
   * Must be external-video.
   */
  media_type?: string;
  
  /**
   * A description of the video.
   */
  video_description?: string;
  
  /**
   * Optional data about the video.
   */
  video_metadata?: string;
  
  /**
   * Describes the video source.
   */
  video_provider?: string;
  
  /**
   * The title of the video.
   */
  video_title?: string;
  
  /**
   * The URL to the video.
   */
  video_url?: string;
}

/**
 * ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object
 * contains the regular price of an item, as well as its minimum and maximum
 * prices. Only composite products, which include bundle, configurable, and grouped
 * products, can contain a minimum and maximum price.
 */
export interface GQLProductPrices {
  
  /**
   * The highest possible final price for all the options defined within a
   * composite product. If you are specifying a price range, this would be the to value.
   * @deprecated Use PriceRange.maximum_price.
   */
  maximalPrice?: GQLPrice;
  
  /**
   * The lowest possible final price for all the options defined within a composite
   * product. If you are specifying a price range, this would be the from value.
   * @deprecated Use PriceRange.minimum_price.
   */
  minimalPrice?: GQLPrice;
  
  /**
   * The base price of a product.
   * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
   */
  regularPrice?: GQLPrice;
}

/**
 * Price is deprecated, replaced by ProductPrice. The Price object defines the
 * price of a product as well as any tax-related adjustments.
 */
export interface GQLPrice {
  
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  adjustments?: Array<GQLPriceAdjustment | null>;
  
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  amount?: GQLMoney;
}

/**
 * PriceAdjustment is deprecated. Taxes will be included or excluded in the price.
 * The PricedAdjustment object defines the amount of money to apply as an
 * adjustment, the type of adjustment to apply, and whether the item is included or
 * excluded from the adjustment.
 */
export interface GQLPriceAdjustment {
  
  /**
   * The amount of the price adjustment and its currency code.
   */
  amount?: GQLMoney;
  
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated PriceAdjustment is deprecated.
   */
  code?: GQLPriceAdjustmentCodesEnum;
  
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated PriceAdjustment is deprecated.
   */
  description?: GQLPriceAdjustmentDescriptionEnum;
}

/**
 * PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module.
 */
export enum GQLPriceAdjustmentCodesEnum {
  
  /**
   * 
   * @deprecated PriceAdjustmentCodesEnum is deprecated. Tax is included or excluded in price. Tax is not shown separtely in Catalog
   */
  TAX = 'TAX',
  
  /**
   * 
   * @deprecated WEEE code is deprecated, use fixed_product_taxes.label
   */
  WEEE = 'WEEE',
  
  /**
   * 
   * @deprecated Use fixed_product_taxes. PriceAdjustmentCodesEnum is deprecated. Tax is included or excluded in price. Tax is not shown separtely in Catalog
   */
  WEEE_TAX = 'WEEE_TAX'
}

/**
 * PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded.
 */
export enum GQLPriceAdjustmentDescriptionEnum {
  INCLUDED = 'INCLUDED',
  EXCLUDED = 'EXCLUDED'
}

/**
 * Price range for a product. If the product has a single price, the minimum and maximum price will be the same.
 */
export interface GQLPriceRange {
  
  /**
   * The highest possible price for the product.
   */
  maximum_price?: GQLProductPrice;
  
  /**
   * The lowest possible price for the product.
   */
  minimum_price: GQLProductPrice;
}

/**
 * Represents a product price.
 */
export interface GQLProductPrice {
  
  /**
   * The base price of the product after discounts applied.
   */
  default_final_price: GQLMoney;
  
  /**
   * The base price of the product after discounts applied excluding taxes.
   */
  default_final_price_excl_tax: GQLMoney;
  
  /**
   * The base price of the product.
   */
  default_price: GQLMoney;
  
  /**
   * The price discount. Represents the difference between the regular and final price.
   */
  discount?: GQLProductDiscount;
  
  /**
   * The final price of the product after discounts applied.
   */
  final_price: GQLMoney;
  
  /**
   * The final price of the product after discounts applied excluding taxes.
   */
  final_price_excl_tax: GQLMoney;
  
  /**
   * The multiple FPTs that can be applied to a product price.
   */
  fixed_product_taxes?: Array<GQLFixedProductTax | null>;
  
  /**
   * The regular price of the product.
   */
  regular_price: GQLMoney;
  
  /**
   * The regular price of the product excluding taxes.
   */
  regular_price_excl_tax: GQLMoney;
}

/**
 * A discount applied to a product price.
 */
export interface GQLProductDiscount {
  
  /**
   * The actual value of the discount.
   */
  amount_off?: number;
  
  /**
   * The discount expressed a percentage.
   */
  percent_off?: number;
}

/**
 * A price based on the quantity purchased.
 */
export interface GQLTierPrice {
  
  /**
   * The price discount that this tier represents.
   */
  discount?: GQLProductDiscount;
  final_price?: GQLMoney;
  
  /**
   * The minimum number of items that must be purchased to qualify for this price tier.
   */
  quantity?: number;
}

/**
 * ProductLinks contains information about linked products, including the link type and product type of each item.
 */
export interface GQLProductLinksInterface {
  
  /**
   * One of related, associated, upsell, or crosssell.
   */
  link_type?: string;
  
  /**
   * The SKU of the linked product.
   */
  linked_product_sku?: string;
  
  /**
   * The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable).
   */
  linked_product_type?: string;
  
  /**
   * The position within the list of product links.
   */
  position?: number;
  
  /**
   * The identifier of the linked product.
   */
  sku?: string;
}

/** Use this to resolve interface type ProductLinksInterface */
export type GQLPossibleProductLinksInterfaceTypeNames = 'ProductLinks';

export interface GQLProductLinksInterfaceNameMap {
  ProductLinksInterface: GQLProductLinksInterface;
  ProductLinks: GQLProductLinks;
}

export interface GQLProductReviews {
  
  /**
   * An array of product reviews.
   */
  items: Array<GQLProductReview | null>;
  
  /**
   * Metadata for pagination rendering.
   */
  page_info: GQLSearchResultPageInfo;
}

/**
 * Details of a product review
 */
export interface GQLProductReview {
  
  /**
   * The average rating for product review.
   */
  average_rating: number;
  
  /**
   * Date indicating when the review was created.
   */
  created_at: string;
  
  /**
   * The customer's nickname. Defaults to the customer name, if logged in
   */
  nickname: string;
  
  /**
   * Contains details about the reviewed product
   */
  product: GQLProductInterface;
  
  /**
   * An array of ratings by rating category, such as quality, price, and value
   */
  ratings_breakdown: Array<GQLProductReviewRating | null>;
  
  /**
   * The summary (title) of the review
   */
  summary: string;
  
  /**
   * The review text.
   */
  text: string;
}

export interface GQLProductReviewRating {
  
  /**
   * The label assigned to an aspect of a product that is being rated, such as quality or price
   */
  name: string;
  
  /**
   * The rating value given by customer. By default, possible values range from 1 to 5.
   */
  value: string;
}

export interface GQLAttributeWithValue {
  attribute_code?: string;
  attribute_group_code?: string;
  attribute_group_id?: string;
  attribute_group_name?: string;
  attribute_id?: number;
  attribute_label?: string;
  attribute_options?: Array<GQLAttributeWithValueOption | null>;
  attribute_type?: string;
  attribute_value?: string;
  entity_type?: string;
  used_in_product_listing?: boolean;
}

export interface GQLAttributeWithValueOption {
  label?: string;
  swatch_data?: GQLAttributeWithValueSwatchData;
  value?: string;
}

export interface GQLAttributeWithValueSwatchData {
  type?: string;
  value?: string;
}

export interface GQLProductStockItem {
  
  /**
   * Product in stock status
   */
  in_stock?: boolean;
  
  /**
   * Maximal amount of item that can be bought
   */
  max_sale_qty?: number;
  
  /**
   * Minimal amount of item that can be bought
   */
  min_sale_qty?: number;
  
  /**
   * Product quantity available in stock
   */
  qty?: number;
  
  /**
   * Increment for number of items that can be bought
   */
  qty_increments?: number;
}

/**
 * This enumeration states whether a product stock status is in stock or out of stock
 */
export enum GQLProductStockStatus {
  IN_STOCK = 'IN_STOCK',
  OUT_OF_STOCK = 'OUT_OF_STOCK'
}

/**
 * ProductTierPrices is deprecated and has been replaced by TierPrice. The
 * ProductTierPrices object defines a tier price, which is a quantity discount
 * offered to a specific customer group.
 */
export interface GQLProductTierPrices {
  
  /**
   * The ID of the customer group.
   * @deprecated customer_group_id is not relevant for storefront.
   */
  customer_group_id?: string;
  
  /**
   * The percentage discount of the item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
   */
  percentage_value?: number;
  
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
   */
  qty?: number;
  
  /**
   * The price of the fixed price item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
   */
  value?: number;
  
  /**
   * The ID assigned to the website.
   * @deprecated website_id is not relevant for storefront.
   */
  website_id?: number;
}

/**
 * The object contains URL rewrite details
 */
export interface GQLUrlRewrite {
  
  /**
   * Request parameters
   */
  parameters?: Array<GQLHttpQueryParameter | null>;
  
  /**
   * Request URL
   */
  url?: string;
}

/**
 * The object details of target path parameters
 */
export interface GQLHttpQueryParameter {
  
  /**
   * Parameter name
   */
  name?: string;
  
  /**
   * Parameter value
   */
  value?: string;
}

/**
 * Website is deprecated because it is should not be used on storefront. The type contains information about a website
 */
export interface GQLWebsite {
  
  /**
   * A code assigned to the website to identify it
   * @deprecated The field should not be used on the storefront.
   */
  code?: string;
  
  /**
   * The default group ID that the website has
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: string;
  
  /**
   * The ID number assigned to the website
   * @deprecated The field should not be used on the storefront.
   */
  id?: number;
  
  /**
   * Specifies if this is the default website
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: boolean;
  
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: string;
  
  /**
   * The attribute to use for sorting websites
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: number;
}

export interface GQLCartPrices {
  applied_taxes?: Array<GQLCartTaxItem | null>;
  
  /**
   * 
   * @deprecated Use discounts instead 
   */
  discount?: GQLCartDiscount;
  
  /**
   * An array of applied discounts
   */
  discounts?: Array<GQLDiscount | null>;
  grand_total?: GQLMoney;
  subtotal_excluding_tax?: GQLMoney;
  subtotal_including_tax?: GQLMoney;
  subtotal_with_discount_excluding_tax?: GQLMoney;
}

export interface GQLCartTaxItem {
  amount: GQLMoney;
  label: string;
}

export interface GQLCartDiscount {
  amount: GQLMoney;
  label: Array<string | null>;
}

export interface GQLSelectedPaymentMethod {
  
  /**
   * The payment method code
   */
  code: string;
  
  /**
   * The purchase order number.
   */
  purchase_order_number?: string;
  
  /**
   * The payment method title.
   */
  title: string;
}

export interface GQLShippingCartAddress extends GQLCartAddressInterface {
  available_shipping_methods?: Array<GQLAvailableShippingMethod | null>;
  
  /**
   * 
   * @deprecated `cart_items_v2` should be used instead
   */
  cart_items?: Array<GQLCartItemQuantity | null>;
  cart_items_v2?: Array<GQLCartItemInterface | null>;
  city: string;
  company?: string;
  country: GQLCartAddressCountry;
  customer_notes?: string;
  firstname: string;
  
  /**
   * 
   * @deprecated This information shoud not be exposed on frontend
   */
  items_weight?: number;
  lastname: string;
  pickup_location_code?: string;
  postcode?: string;
  region?: GQLCartAddressRegion;
  selected_shipping_method?: GQLSelectedShippingMethod;
  street: Array<string | null>;
  telephone: string;
}

export interface GQLAvailableShippingMethod {
  amount: GQLMoney;
  available: boolean;
  
  /**
   * 
   * @deprecated The field should not be used on the storefront
   */
  base_amount?: GQLMoney;
  carrier_code: string;
  carrier_title: string;
  error_message?: string;
  
  /**
   * Could be null if method is not available
   */
  method_code?: string;
  
  /**
   * Could be null if method is not available
   */
  method_title?: string;
  price_excl_tax: GQLMoney;
  price_incl_tax: GQLMoney;
}

/**
 * Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity`
 */
export interface GQLCartItemQuantity {
  
  /**
   * 
   * @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity`
   */
  cart_item_id: number;
  
  /**
   * 
   * @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity`
   */
  quantity: number;
}

export interface GQLSelectedShippingMethod {
  amount: GQLMoney;
  
  /**
   * 
   * @deprecated The field should not be used on the storefront
   */
  base_amount?: GQLMoney;
  carrier_code: string;
  carrier_title: string;
  method_code: string;
  method_title: string;
}

/**
 * CategoryFilterInput defines the filters to be used in the search. A filter
 * contains at least one attribute, a comparison operator, and the value that is
 * being searched for.
 */
export interface GQLCategoryFilterInput {
  
  /**
   * Filter by the unique category ID for a `CategoryInterface` object.
   */
  category_uid?: GQLFilterEqualTypeInput;
  
  /**
   * Deprecated: use 'category_uid' to filter uniquely identifiers of categories.
   */
  ids?: GQLFilterEqualTypeInput;
  
  /**
   * Filter by the display name of the category.
   */
  name?: GQLFilterMatchTypeInput;
  
  /**
   * Filter by the unique parent category ID for a `CategoryInterface` object.
   */
  parent_category_uid?: GQLFilterEqualTypeInput;
  
  /**
   * Filter by the unique parent category ID for a `CategoryInterface` object.
   */
  parent_id?: GQLFilterEqualTypeInput;
  
  /**
   * Filter by the part of the URL that identifies the category.
   */
  url_key?: GQLFilterEqualTypeInput;
  
  /**
   * Filter by the URL path for the category.
   */
  url_path?: GQLFilterEqualTypeInput;
}

/**
 * Defines a filter that matches the input exactly.
 */
export interface GQLFilterEqualTypeInput {
  
  /**
   * A string to filter on
   */
  eq?: string;
  
  /**
   * An array of values to filter on
   */
  in?: Array<string | null>;
}

/**
 * Defines a filter that performs a fuzzy search.
 */
export interface GQLFilterMatchTypeInput {
  
  /**
   * One or more words to filter on
   */
  match?: string;
}

/**
 * A collection of CategoryTree objects and pagination information.
 */
export interface GQLCategoryResult {
  
  /**
   * A list of categories that match the filter criteria.
   */
  items?: Array<GQLCategoryTree | null>;
  
  /**
   * An object that includes the page_info and currentPage values specified in the query.
   */
  page_info?: GQLSearchResultPageInfo;
  
  /**
   * The total number of categories that match the criteria.
   */
  total_count?: number;
}

/**
 * Category tree implementation
 */
export interface GQLCategoryTree extends GQLCategoryInterface, GQLRoutableInterface {
  available_sort_by?: Array<string | null>;
  
  /**
   * Breadcrumbs, parent categories info.
   */
  breadcrumbs?: Array<GQLBreadcrumb | null>;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Categories' is enabled
   */
  canonical_url?: string;
  
  /**
   * Child categories tree.
   */
  children?: Array<GQLCategoryTree | null>;
  children_count?: string;
  
  /**
   * Category CMS Block.
   */
  cms_block?: GQLCmsBlock;
  
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  custom_layout_update_file?: string;
  
  /**
   * The attribute to use for sorting.
   */
  default_sort_by?: string;
  
  /**
   * An optional description of the category.
   */
  description?: string;
  
  /**
   * Category display mode (products only, static block only, both)
   */
  display_mode?: string;
  filter_price_range?: number;
  
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: number;
  image?: string;
  include_in_menu?: number;
  
  /**
   * Category is enabled
   */
  is_active?: boolean;
  is_anchor?: number;
  landing_page?: number;
  
  /**
   * Indicates the depth of the category within the tree.
   */
  level?: number;
  meta_description?: string;
  meta_keywords?: string;
  meta_title?: string;
  
  /**
   * The display name of the category.
   */
  name?: string;
  
  /**
   * Category Path.
   */
  path?: string;
  
  /**
   * Category path in store.
   */
  path_in_store?: string;
  
  /**
   * The position of the category relative to other categories at the same level in tree.
   */
  position?: number;
  
  /**
   * The number of products in the category that are marked as visible. By default,
   * in complex products, parent products are visible, but their child products are not.
   */
  product_count?: number;
  
  /**
   * The list of products assigned to the category.
   */
  products?: GQLCategoryProducts;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * The unique ID for a `CategoryInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  url?: string;
  
  /**
   * The url key assigned to the category.
   */
  url_key?: string;
  
  /**
   * The url path assigned to the category.
   */
  url_path?: string;
  
  /**
   * The part of the category URL that is appended after the url key
   */
  url_suffix?: string;
}

/**
 * Routable entities serve as the model for a rendered page
 */
export interface GQLRoutableInterface {
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
}

/** Use this to resolve interface type RoutableInterface */
export type GQLPossibleRoutableInterfaceTypeNames =
'CategoryTree' |
'CmsPage' |
'BundleProduct' |
'ConfigurableProduct' |
'SimpleProduct' |
'DownloadableProduct' |
'GroupedProduct' |
'VirtualProduct';

export interface GQLRoutableInterfaceNameMap {
  RoutableInterface: GQLRoutableInterface;
  CategoryTree: GQLCategoryTree;
  CmsPage: GQLCmsPage;
  BundleProduct: GQLBundleProduct;
  ConfigurableProduct: GQLConfigurableProduct;
  SimpleProduct: GQLSimpleProduct;
  DownloadableProduct: GQLDownloadableProduct;
  GroupedProduct: GQLGroupedProduct;
  VirtualProduct: GQLVirtualProduct;
}

/**
 * This enumeration defines the entity type.
 */
export enum GQLUrlRewriteEntityTypeEnum {
  CMS_PAGE = 'CMS_PAGE',
  PRODUCT = 'PRODUCT',
  CATEGORY = 'CATEGORY'
}

export interface GQLChatData {
  
  /**
   * API space id
   */
  api_space_id?: string;
  
  /**
   * Cookie name
   */
  cookie_name?: string;
  
  /**
   * Is chat enabled
   */
  is_enabled?: boolean;
}

/**
 * Defines all Checkout Agreement information
 */
export interface GQLCheckoutAgreement {
  
  /**
   * Checkout Agreement identifier
   */
  agreement_id: number;
  
  /**
   * Checkout Agreement checkbox text
   */
  checkbox_text: string;
  
  /**
   * Checkout Agreement content
   */
  content: string;
  
  /**
   * Checkout Agreement content height
   */
  content_height?: string;
  
  /**
   * Is Checkout Agreement content in HTML format
   */
  is_html: boolean;
  mode: GQLCheckoutAgreementMode;
  
  /**
   * Checkout Agreement name
   */
  name: string;
}

export enum GQLCheckoutAgreementMode {
  AUTO = 'AUTO',
  MANUAL = 'MANUAL'
}

/**
 * CMS blocks information
 */
export interface GQLCmsBlocks {
  
  /**
   * An array of CMS blocks
   */
  items?: Array<GQLCmsBlock | null>;
}

/**
 * CMS page defines all CMS page information
 */
export interface GQLCmsPage extends GQLRoutableInterface {
  
  /**
   * CMS page content
   */
  content?: string;
  
  /**
   * CMS page content heading
   */
  content_heading?: string;
  
  /**
   * Identifier of the CMS page
   */
  identifier?: string;
  
  /**
   * CMS page meta description
   */
  meta_description?: string;
  
  /**
   * CMS page meta keywords
   */
  meta_keywords?: string;
  
  /**
   * CMS page meta title
   */
  meta_title?: string;
  
  /**
   * CMS page content heading
   */
  page_layout?: string;
  
  /**
   * CMS page width
   */
  page_width?: string;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * CMS page title
   */
  title?: string;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * URL key of CMS page
   */
  url_key?: string;
}

export interface GQLCompareList {
  
  /**
   * An array of attributes that can be used for comparing products
   */
  attributes?: Array<GQLComparableAttribute | null>;
  
  /**
   * The number of items in the compare list
   */
  item_count: number;
  
  /**
   * An array of products to compare
   */
  items?: Array<GQLComparableItem | null>;
  
  /**
   * The unique ID assigned to the compare list
   */
  uid: string;
}

export interface GQLComparableAttribute {
  
  /**
   * An attribute code that is enabled for product comparisons
   */
  code: string;
  
  /**
   * The label of the attribute code
   */
  label: string;
}

export interface GQLComparableItem {
  
  /**
   * An array of product attributes that can be used to compare products
   */
  attributes: Array<GQLProductAttribute | null>;
  
  /**
   * Contains details about a product in a compare list
   */
  product: GQLProductInterface;
  
  /**
   * The unique ID of an item in a compare list
   */
  uid: string;
}

export interface GQLProductAttribute {
  
  /**
   * The unique identifier for a product attribute code.
   */
  code: string;
  
  /**
   * The display value of the attribute
   */
  value: string;
}

export interface GQLContactPageConfig {
  enabled?: boolean;
}

export interface GQLCountry {
  available_regions?: Array<GQLRegion | null>;
  full_name_english?: string;
  full_name_locale?: string;
  
  /**
   * The unique ID for a `Country` object.
   */
  id?: string;
  is_state_required?: boolean;
  three_letter_abbreviation?: string;
  two_letter_abbreviation?: string;
}

export interface GQLRegion {
  code?: string;
  
  /**
   * The unique ID for a `Region` object.
   */
  id?: number;
  name?: string;
}

export interface GQLCurrency {
  available_currency_codes?: Array<string | null>;
  base_currency_code?: string;
  base_currency_symbol?: string;
  
  /**
   * 
   * @deprecated Symbol was missed. Use `default_display_currency_code`.
   */
  default_display_currecy_code?: string;
  
  /**
   * 
   * @deprecated Symbol was missed. Use `default_display_currency_symbol`.
   */
  default_display_currecy_symbol?: string;
  default_display_currency_code?: string;
  default_display_currency_symbol?: string;
  exchange_rates?: Array<GQLExchangeRate | null>;
  id?: string;
  label?: string;
  value?: string;
}

export interface GQLExchangeRate {
  currency_to?: string;
  rate?: number;
}

export interface GQLCurrencyConfig {
  available_currencies_data?: Array<GQLCurrency | null>;
  current_currency_code?: string;
}

/**
 * AttributeInput specifies the attribute_code and entity_type to search
 */
export interface GQLAttributeInput {
  
  /**
   * The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
   */
  attribute_code?: string;
  
  /**
   * The type of entity that defines the attribute
   */
  entity_type?: string;
}

/**
 * CustomAttributeMetadata defines an array of attribute_codes and entity_types
 */
export interface GQLCustomAttributeMetadata {
  
  /**
   * An array of attributes
   */
  items?: Array<GQLAttribute | null>;
}

/**
 * Attribute contains the attribute_type of the specified attribute_code and entity_type
 */
export interface GQLAttribute {
  
  /**
   * The unique identifier for an attribute code. This value should be in lowercase letters without spaces.
   */
  attribute_code?: string;
  
  /**
   * Attribute options list.
   */
  attribute_options?: Array<GQLAttributeOption | null>;
  
  /**
   * The data type of the attribute
   */
  attribute_type?: string;
  
  /**
   * The type of entity that defines the attribute
   */
  entity_type?: string;
  
  /**
   * The frontend input type of the attribute
   */
  input_type?: string;
  
  /**
   * Contains details about the storefront properties configured for the attribute
   */
  storefront_properties?: GQLStorefrontProperties;
}

/**
 * Attribute option.
 */
export interface GQLAttributeOption {
  
  /**
   * Attribute option label.
   */
  label?: string;
  
  /**
   * Attribute option value.
   */
  value?: string;
}

export interface GQLStorefrontProperties {
  
  /**
   * The relative position of the attribute in the layered navigation block
   */
  position?: number;
  
  /**
   * Indicates whether the attribute is filterable with results, without results, or not at all
   */
  use_in_layered_navigation?: GQLUseInLayeredNavigationOptions;
  
  /**
   * Indicates whether the attribute is displayed in product listings
   */
  use_in_product_listing?: boolean;
  
  /**
   * Indicates whether the attribute can be used in layered navigation on search results pages
   */
  use_in_search_results_layered_navigation?: boolean;
  
  /**
   * Indicates whether the attribute is displayed on product pages
   */
  visible_on_catalog_pages?: boolean;
}

export enum GQLUseInLayeredNavigationOptions {
  NO = 'NO',
  FILTERABLE_WITH_RESULTS = 'FILTERABLE_WITH_RESULTS',
  FILTERABLE_NO_RESULT = 'FILTERABLE_NO_RESULT'
}

/**
 * Customer defines the customer name and address and other details
 */
export interface GQLCustomer {
  
  /**
   * An array containing the customer's shipping and billing addresses
   */
  addresses?: Array<GQLCustomerAddress | null>;
  
  /**
   * Indicates whether the customer has enabled remote shopping assistance
   */
  allow_remote_shopping_assistance: boolean;
  
  /**
   * The contents of the customer's compare list
   */
  compare_list?: GQLCompareList;
  
  /**
   * Email confirmation is required
   */
  confirmation_required?: boolean;
  
  /**
   * Timestamp indicating when the account was created
   */
  created_at?: string;
  
  /**
   * The customer's date of birth
   */
  date_of_birth?: string;
  
  /**
   * The ID assigned to the billing address
   */
  default_billing?: string;
  
  /**
   * The ID assigned to the shipping address
   */
  default_shipping?: string;
  
  /**
   * The customer's date of birth
   * @deprecated Use `date_of_birth` instead
   */
  dob?: string;
  
  /**
   * The customer's email address. Required
   */
  email?: string;
  
  /**
   * The customer's first name
   */
  firstname?: string;
  
  /**
   * The customer's gender (Male - 1, Female - 2)
   */
  gender?: number;
  
  /**
   * 
   * @deprecated Customer group should not be exposed in the storefront scenarios
   */
  group_id?: number;
  
  /**
   * The ID assigned to the customer
   * @deprecated id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: number;
  
  /**
   * Indicates whether the customer is subscribed to the company's newsletter
   */
  is_subscribed?: boolean;
  
  /**
   * The customer's family name
   */
  lastname?: string;
  
  /**
   * The customer's middle name
   */
  middlename?: string;
  orders?: GQLCustomerOrders;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * Contains the customer's product reviews
   */
  reviews: GQLProductReviews;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The customer's Value-added tax (VAT) number (for corporate customers)
   */
  taxvat?: string;
  
  /**
   * Contains a customer's wish lists
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2`
   */
  wishlist: GQLWishlist;
  
  /**
   * Retrieve the specified wish list identified by the unique ID for a `Wishlist` object
   */
  wishlist_v2?: GQLWishlist;
  
  /**
   * An array of wishlists. In Magento Open Source, customers are limited to one
   * wish list. The number of wish lists is configurable for Magento Commerce
   */
  wishlists: Array<GQLWishlist | null>;
}

/**
 * CustomerAddress contains detailed information about a customer's billing and shipping addresses
 */
export interface GQLCustomerAddress {
  
  /**
   * The city or town
   */
  city?: string;
  
  /**
   * The customer's company
   */
  company?: string;
  
  /**
   * The customer's country
   */
  country_code?: GQLCountryCodeEnum;
  
  /**
   * The customer's country
   * @deprecated Use `country_code` instead.
   */
  country_id?: string;
  
  /**
   * 
   * @deprecated Custom attributes should not be put into container
   */
  custom_attributes?: Array<GQLCustomerAddressAttribute | null>;
  
  /**
   * The customer ID
   * @deprecated customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.
   */
  customer_id?: number;
  
  /**
   * Indicates whether the address is the default billing address
   */
  default_billing?: boolean;
  
  /**
   * Indicates whether the address is the default shipping address
   */
  default_shipping?: boolean;
  
  /**
   * Address extension attributes
   */
  extension_attributes?: Array<GQLCustomerAddressAttribute | null>;
  
  /**
   * The fax number
   */
  fax?: string;
  
  /**
   * The first name of the person associated with the shipping/billing address
   */
  firstname?: string;
  
  /**
   * The ID assigned to the address object
   */
  id?: number;
  
  /**
   * The family name of the person associated with the shipping/billing address
   */
  lastname?: string;
  
  /**
   * The middle name of the person associated with the shipping/billing address
   */
  middlename?: string;
  
  /**
   * The customer's ZIP or postal code
   */
  postcode?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * An object containing the region name, region code, and region ID
   */
  region?: GQLCustomerAddressRegion;
  
  /**
   * The unique ID for a pre-defined region
   */
  region_id?: number;
  
  /**
   * An array of strings that define the street number and name
   */
  street?: Array<string | null>;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The telephone number
   */
  telephone?: string;
  
  /**
   * The customer's Value-added tax (VAT) number (for corporate customers)
   */
  vat_id?: string;
}

/**
 * The list of countries codes
 */
export enum GQLCountryCodeEnum {
  
  /**
   * Afghanistan
   */
  AF = 'AF',
  
  /**
   * Åland Islands
   */
  AX = 'AX',
  
  /**
   * Albania
   */
  AL = 'AL',
  
  /**
   * Algeria
   */
  DZ = 'DZ',
  
  /**
   * American Samoa
   */
  AS = 'AS',
  
  /**
   * Andorra
   */
  AD = 'AD',
  
  /**
   * Angola
   */
  AO = 'AO',
  
  /**
   * Anguilla
   */
  AI = 'AI',
  
  /**
   * Antarctica
   */
  AQ = 'AQ',
  
  /**
   * Antigua & Barbuda
   */
  AG = 'AG',
  
  /**
   * Argentina
   */
  AR = 'AR',
  
  /**
   * Armenia
   */
  AM = 'AM',
  
  /**
   * Aruba
   */
  AW = 'AW',
  
  /**
   * Australia
   */
  AU = 'AU',
  
  /**
   * Austria
   */
  AT = 'AT',
  
  /**
   * Azerbaijan
   */
  AZ = 'AZ',
  
  /**
   * Bahamas
   */
  BS = 'BS',
  
  /**
   * Bahrain
   */
  BH = 'BH',
  
  /**
   * Bangladesh
   */
  BD = 'BD',
  
  /**
   * Barbados
   */
  BB = 'BB',
  
  /**
   * Belarus
   */
  BY = 'BY',
  
  /**
   * Belgium
   */
  BE = 'BE',
  
  /**
   * Belize
   */
  BZ = 'BZ',
  
  /**
   * Benin
   */
  BJ = 'BJ',
  
  /**
   * Bermuda
   */
  BM = 'BM',
  
  /**
   * Bhutan
   */
  BT = 'BT',
  
  /**
   * Bolivia
   */
  BO = 'BO',
  
  /**
   * Bosnia & Herzegovina
   */
  BA = 'BA',
  
  /**
   * Botswana
   */
  BW = 'BW',
  
  /**
   * Bouvet Island
   */
  BV = 'BV',
  
  /**
   * Brazil
   */
  BR = 'BR',
  
  /**
   * British Indian Ocean Territory
   */
  IO = 'IO',
  
  /**
   * British Virgin Islands
   */
  VG = 'VG',
  
  /**
   * Brunei
   */
  BN = 'BN',
  
  /**
   * Bulgaria
   */
  BG = 'BG',
  
  /**
   * Burkina Faso
   */
  BF = 'BF',
  
  /**
   * Burundi
   */
  BI = 'BI',
  
  /**
   * Cambodia
   */
  KH = 'KH',
  
  /**
   * Cameroon
   */
  CM = 'CM',
  
  /**
   * Canada
   */
  CA = 'CA',
  
  /**
   * Cape Verde
   */
  CV = 'CV',
  
  /**
   * Cayman Islands
   */
  KY = 'KY',
  
  /**
   * Central African Republic
   */
  CF = 'CF',
  
  /**
   * Chad
   */
  TD = 'TD',
  
  /**
   * Chile
   */
  CL = 'CL',
  
  /**
   * China
   */
  CN = 'CN',
  
  /**
   * Christmas Island
   */
  CX = 'CX',
  
  /**
   * Cocos (Keeling) Islands
   */
  CC = 'CC',
  
  /**
   * Colombia
   */
  CO = 'CO',
  
  /**
   * Comoros
   */
  KM = 'KM',
  
  /**
   * Congo-Brazzaville
   */
  CG = 'CG',
  
  /**
   * Congo-Kinshasa
   */
  CD = 'CD',
  
  /**
   * Cook Islands
   */
  CK = 'CK',
  
  /**
   * Costa Rica
   */
  CR = 'CR',
  
  /**
   * Côte d’Ivoire
   */
  CI = 'CI',
  
  /**
   * Croatia
   */
  HR = 'HR',
  
  /**
   * Cuba
   */
  CU = 'CU',
  
  /**
   * Cyprus
   */
  CY = 'CY',
  
  /**
   * Czech Republic
   */
  CZ = 'CZ',
  
  /**
   * Denmark
   */
  DK = 'DK',
  
  /**
   * Djibouti
   */
  DJ = 'DJ',
  
  /**
   * Dominica
   */
  DM = 'DM',
  
  /**
   * Dominican Republic
   */
  DO = 'DO',
  
  /**
   * Ecuador
   */
  EC = 'EC',
  
  /**
   * Egypt
   */
  EG = 'EG',
  
  /**
   * El Salvador
   */
  SV = 'SV',
  
  /**
   * Equatorial Guinea
   */
  GQ = 'GQ',
  
  /**
   * Eritrea
   */
  ER = 'ER',
  
  /**
   * Estonia
   */
  EE = 'EE',
  
  /**
   * Ethiopia
   */
  ET = 'ET',
  
  /**
   * Falkland Islands
   */
  FK = 'FK',
  
  /**
   * Faroe Islands
   */
  FO = 'FO',
  
  /**
   * Fiji
   */
  FJ = 'FJ',
  
  /**
   * Finland
   */
  FI = 'FI',
  
  /**
   * France
   */
  FR = 'FR',
  
  /**
   * French Guiana
   */
  GF = 'GF',
  
  /**
   * French Polynesia
   */
  PF = 'PF',
  
  /**
   * French Southern Territories
   */
  TF = 'TF',
  
  /**
   * Gabon
   */
  GA = 'GA',
  
  /**
   * Gambia
   */
  GM = 'GM',
  
  /**
   * Georgia
   */
  GE = 'GE',
  
  /**
   * Germany
   */
  DE = 'DE',
  
  /**
   * Ghana
   */
  GH = 'GH',
  
  /**
   * Gibraltar
   */
  GI = 'GI',
  
  /**
   * Greece
   */
  GR = 'GR',
  
  /**
   * Greenland
   */
  GL = 'GL',
  
  /**
   * Grenada
   */
  GD = 'GD',
  
  /**
   * Guadeloupe
   */
  GP = 'GP',
  
  /**
   * Guam
   */
  GU = 'GU',
  
  /**
   * Guatemala
   */
  GT = 'GT',
  
  /**
   * Guernsey
   */
  GG = 'GG',
  
  /**
   * Guinea
   */
  GN = 'GN',
  
  /**
   * Guinea-Bissau
   */
  GW = 'GW',
  
  /**
   * Guyana
   */
  GY = 'GY',
  
  /**
   * Haiti
   */
  HT = 'HT',
  
  /**
   * Heard &amp; McDonald Islands
   */
  HM = 'HM',
  
  /**
   * Honduras
   */
  HN = 'HN',
  
  /**
   * Hong Kong SAR China
   */
  HK = 'HK',
  
  /**
   * Hungary
   */
  HU = 'HU',
  
  /**
   * Iceland
   */
  IS = 'IS',
  
  /**
   * India
   */
  IN = 'IN',
  
  /**
   * Indonesia
   */
  ID = 'ID',
  
  /**
   * Iran
   */
  IR = 'IR',
  
  /**
   * Iraq
   */
  IQ = 'IQ',
  
  /**
   * Ireland
   */
  IE = 'IE',
  
  /**
   * Isle of Man
   */
  IM = 'IM',
  
  /**
   * Israel
   */
  IL = 'IL',
  
  /**
   * Italy
   */
  IT = 'IT',
  
  /**
   * Jamaica
   */
  JM = 'JM',
  
  /**
   * Japan
   */
  JP = 'JP',
  
  /**
   * Jersey
   */
  JE = 'JE',
  
  /**
   * Jordan
   */
  JO = 'JO',
  
  /**
   * Kazakhstan
   */
  KZ = 'KZ',
  
  /**
   * Kenya
   */
  KE = 'KE',
  
  /**
   * Kiribati
   */
  KI = 'KI',
  
  /**
   * Kuwait
   */
  KW = 'KW',
  
  /**
   * Kyrgyzstan
   */
  KG = 'KG',
  
  /**
   * Laos
   */
  LA = 'LA',
  
  /**
   * Latvia
   */
  LV = 'LV',
  
  /**
   * Lebanon
   */
  LB = 'LB',
  
  /**
   * Lesotho
   */
  LS = 'LS',
  
  /**
   * Liberia
   */
  LR = 'LR',
  
  /**
   * Libya
   */
  LY = 'LY',
  
  /**
   * Liechtenstein
   */
  LI = 'LI',
  
  /**
   * Lithuania
   */
  LT = 'LT',
  
  /**
   * Luxembourg
   */
  LU = 'LU',
  
  /**
   * Macau SAR China
   */
  MO = 'MO',
  
  /**
   * Macedonia
   */
  MK = 'MK',
  
  /**
   * Madagascar
   */
  MG = 'MG',
  
  /**
   * Malawi
   */
  MW = 'MW',
  
  /**
   * Malaysia
   */
  MY = 'MY',
  
  /**
   * Maldives
   */
  MV = 'MV',
  
  /**
   * Mali
   */
  ML = 'ML',
  
  /**
   * Malta
   */
  MT = 'MT',
  
  /**
   * Marshall Islands
   */
  MH = 'MH',
  
  /**
   * Martinique
   */
  MQ = 'MQ',
  
  /**
   * Mauritania
   */
  MR = 'MR',
  
  /**
   * Mauritius
   */
  MU = 'MU',
  
  /**
   * Mayotte
   */
  YT = 'YT',
  
  /**
   * Mexico
   */
  MX = 'MX',
  
  /**
   * Micronesia
   */
  FM = 'FM',
  
  /**
   * Moldova
   */
  MD = 'MD',
  
  /**
   * Monaco
   */
  MC = 'MC',
  
  /**
   * Mongolia
   */
  MN = 'MN',
  
  /**
   * Montenegro
   */
  ME = 'ME',
  
  /**
   * Montserrat
   */
  MS = 'MS',
  
  /**
   * Morocco
   */
  MA = 'MA',
  
  /**
   * Mozambique
   */
  MZ = 'MZ',
  
  /**
   * Myanmar (Burma)
   */
  MM = 'MM',
  
  /**
   * Namibia
   */
  NA = 'NA',
  
  /**
   * Nauru
   */
  NR = 'NR',
  
  /**
   * Nepal
   */
  NP = 'NP',
  
  /**
   * Netherlands
   */
  NL = 'NL',
  
  /**
   * Netherlands Antilles
   */
  AN = 'AN',
  
  /**
   * New Caledonia
   */
  NC = 'NC',
  
  /**
   * New Zealand
   */
  NZ = 'NZ',
  
  /**
   * Nicaragua
   */
  NI = 'NI',
  
  /**
   * Niger
   */
  NE = 'NE',
  
  /**
   * Nigeria
   */
  NG = 'NG',
  
  /**
   * Niue
   */
  NU = 'NU',
  
  /**
   * Norfolk Island
   */
  NF = 'NF',
  
  /**
   * Northern Mariana Islands
   */
  MP = 'MP',
  
  /**
   * North Korea
   */
  KP = 'KP',
  
  /**
   * Norway
   */
  NO = 'NO',
  
  /**
   * Oman
   */
  OM = 'OM',
  
  /**
   * Pakistan
   */
  PK = 'PK',
  
  /**
   * Palau
   */
  PW = 'PW',
  
  /**
   * Palestinian Territories
   */
  PS = 'PS',
  
  /**
   * Panama
   */
  PA = 'PA',
  
  /**
   * Papua New Guinea
   */
  PG = 'PG',
  
  /**
   * Paraguay
   */
  PY = 'PY',
  
  /**
   * Peru
   */
  PE = 'PE',
  
  /**
   * Philippines
   */
  PH = 'PH',
  
  /**
   * Pitcairn Islands
   */
  PN = 'PN',
  
  /**
   * Poland
   */
  PL = 'PL',
  
  /**
   * Portugal
   */
  PT = 'PT',
  
  /**
   * Qatar
   */
  QA = 'QA',
  
  /**
   * Réunion
   */
  RE = 'RE',
  
  /**
   * Romania
   */
  RO = 'RO',
  
  /**
   * Russia
   */
  RU = 'RU',
  
  /**
   * Rwanda
   */
  RW = 'RW',
  
  /**
   * Samoa
   */
  WS = 'WS',
  
  /**
   * San Marino
   */
  SM = 'SM',
  
  /**
   * São Tomé & Príncipe
   */
  ST = 'ST',
  
  /**
   * Saudi Arabia
   */
  SA = 'SA',
  
  /**
   * Senegal
   */
  SN = 'SN',
  
  /**
   * Serbia
   */
  RS = 'RS',
  
  /**
   * Seychelles
   */
  SC = 'SC',
  
  /**
   * Sierra Leone
   */
  SL = 'SL',
  
  /**
   * Singapore
   */
  SG = 'SG',
  
  /**
   * Slovakia
   */
  SK = 'SK',
  
  /**
   * Slovenia
   */
  SI = 'SI',
  
  /**
   * Solomon Islands
   */
  SB = 'SB',
  
  /**
   * Somalia
   */
  SO = 'SO',
  
  /**
   * South Africa
   */
  ZA = 'ZA',
  
  /**
   * South Georgia & South Sandwich Islands
   */
  GS = 'GS',
  
  /**
   * South Korea
   */
  KR = 'KR',
  
  /**
   * Spain
   */
  ES = 'ES',
  
  /**
   * Sri Lanka
   */
  LK = 'LK',
  
  /**
   * St. Barthélemy
   */
  BL = 'BL',
  
  /**
   * St. Helena
   */
  SH = 'SH',
  
  /**
   * St. Kitts & Nevis
   */
  KN = 'KN',
  
  /**
   * St. Lucia
   */
  LC = 'LC',
  
  /**
   * St. Martin
   */
  MF = 'MF',
  
  /**
   * St. Pierre & Miquelon
   */
  PM = 'PM',
  
  /**
   * St. Vincent & Grenadines
   */
  VC = 'VC',
  
  /**
   * Sudan
   */
  SD = 'SD',
  
  /**
   * Suriname
   */
  SR = 'SR',
  
  /**
   * Svalbard & Jan Mayen
   */
  SJ = 'SJ',
  
  /**
   * Swaziland
   */
  SZ = 'SZ',
  
  /**
   * Sweden
   */
  SE = 'SE',
  
  /**
   * Switzerland
   */
  CH = 'CH',
  
  /**
   * Syria
   */
  SY = 'SY',
  
  /**
   * Taiwan
   */
  TW = 'TW',
  
  /**
   * Tajikistan
   */
  TJ = 'TJ',
  
  /**
   * Tanzania
   */
  TZ = 'TZ',
  
  /**
   * Thailand
   */
  TH = 'TH',
  
  /**
   * Timor-Leste
   */
  TL = 'TL',
  
  /**
   * Togo
   */
  TG = 'TG',
  
  /**
   * Tokelau
   */
  TK = 'TK',
  
  /**
   * Tonga
   */
  TO = 'TO',
  
  /**
   * Trinidad & Tobago
   */
  TT = 'TT',
  
  /**
   * Tunisia
   */
  TN = 'TN',
  
  /**
   * Turkey
   */
  TR = 'TR',
  
  /**
   * Turkmenistan
   */
  TM = 'TM',
  
  /**
   * Turks & Caicos Islands
   */
  TC = 'TC',
  
  /**
   * Tuvalu
   */
  TV = 'TV',
  
  /**
   * Uganda
   */
  UG = 'UG',
  
  /**
   * Ukraine
   */
  UA = 'UA',
  
  /**
   * United Arab Emirates
   */
  AE = 'AE',
  
  /**
   * United Kingdom
   */
  GB = 'GB',
  
  /**
   * United States
   */
  US = 'US',
  
  /**
   * Uruguay
   */
  UY = 'UY',
  
  /**
   * U.S. Outlying Islands
   */
  UM = 'UM',
  
  /**
   * U.S. Virgin Islands
   */
  VI = 'VI',
  
  /**
   * Uzbekistan
   */
  UZ = 'UZ',
  
  /**
   * Vanuatu
   */
  VU = 'VU',
  
  /**
   * Vatican City
   */
  VA = 'VA',
  
  /**
   * Venezuela
   */
  VE = 'VE',
  
  /**
   * Vietnam
   */
  VN = 'VN',
  
  /**
   * Wallis & Futuna
   */
  WF = 'WF',
  
  /**
   * Western Sahara
   */
  EH = 'EH',
  
  /**
   * Yemen
   */
  YE = 'YE',
  
  /**
   * Zambia
   */
  ZM = 'ZM',
  
  /**
   * Zimbabwe
   */
  ZW = 'ZW'
}

export interface GQLCustomerAddressAttribute {
  
  /**
   * Attribute code
   */
  attribute_code?: string;
  
  /**
   * Attribute value
   */
  value?: string;
}

/**
 * CustomerAddressRegion defines the customer's state or province
 */
export interface GQLCustomerAddressRegion {
  
  /**
   * The state or province name
   */
  region?: string;
  
  /**
   * The address region code
   */
  region_code?: string;
  
  /**
   * The unique ID for a pre-defined region
   */
  region_id?: number;
}

/**
 * Identifies the filter to use for filtering orders.
 */
export interface GQLCustomerOrdersFilterInput {
  
  /**
   * Filters by order entity id.
   */
  entity_id?: GQLFilterStringTypeInput;
  
  /**
   * Filters by order number.
   */
  number?: GQLFilterStringTypeInput;
}

/**
 * Defines a filter for an input string.
 */
export interface GQLFilterStringTypeInput {
  
  /**
   * Filters items that are exactly the same as the specified string.
   */
  eq?: string;
  
  /**
   * Filters items that are exactly the same as entries specified in an array of strings.
   */
  in?: Array<string | null>;
  
  /**
   * Defines a filter that performs a fuzzy search using the specified string.
   */
  match?: string;
}

/**
 * The collection of orders that match the conditions defined in the filter
 */
export interface GQLCustomerOrders {
  
  /**
   * An array of customer orders
   */
  items: Array<GQLCustomerOrder | null>;
  
  /**
   * An object that includes the current_page, page_info, and page_size values specified in the query
   */
  page_info?: GQLSearchResultPageInfo;
  
  /**
   * The total count of customer orders
   */
  total_count?: number;
}

/**
 * Contains details about each of the customer's orders
 */
export interface GQLCustomerOrder {
  
  /**
   * The billing address for the order
   */
  billing_address?: GQLOrderAddress;
  
  /**
   * Defines if order can be reordered
   */
  can_reorder: boolean;
  
  /**
   * The shipping carrier for the order delivery
   */
  carrier?: string;
  
  /**
   * Comments about the order
   */
  comments?: Array<GQLSalesCommentItem | null>;
  
  /**
   * 
   * @deprecated Use the order_date attribute instead
   */
  created_at?: string;
  
  /**
   * A list of credit memos
   */
  credit_memos?: Array<GQLCreditMemo | null>;
  
  /**
   * The entered gift message for the order
   */
  gift_message?: GQLGiftMessage;
  
  /**
   * 
   * @deprecated Use the totals.grand_total attribute instead
   */
  grand_total?: number;
  
  /**
   * The unique ID for a `CustomerOrder` object
   */
  id: string;
  
  /**
   * 
   * @deprecated Use the id attribute instead
   */
  increment_id?: string;
  
  /**
   * A list of invoices for the order
   */
  invoices: Array<GQLInvoice | null>;
  
  /**
   * An array containing the items purchased in this order
   */
  items?: Array<GQLOrderItemInterface | null>;
  
  /**
   * The order number
   */
  number: string;
  
  /**
   * The date the order was placed
   */
  order_date: string;
  
  /**
   * 
   * @deprecated Use the number attribute instead
   */
  order_number: string;
  
  /**
   * Payment details for the order
   */
  payment_methods?: Array<GQLOrderPaymentMethod | null>;
  
  /**
   * Represents rss link to subscribe on order status
   */
  rss_link?: string;
  
  /**
   * A list of shipments for the order
   */
  shipments?: Array<GQLOrderShipment | null>;
  
  /**
   * The shipping address for the order
   */
  shipping_address?: GQLOrderAddress;
  
  /**
   * The delivery method for the order
   */
  shipping_method?: string;
  
  /**
   * The current status of the order
   */
  status: string;
  
  /**
   * Contains details about the calculated totals for this order
   */
  total?: GQLOrderTotal;
}

/**
 * OrderAddress contains detailed information about an order's billing and shipping addresses
 */
export interface GQLOrderAddress {
  
  /**
   * The city or town
   */
  city: string;
  
  /**
   * The customer's company
   */
  company?: string;
  
  /**
   * The customer's country
   */
  country_code?: GQLCountryCodeEnum;
  
  /**
   * The customer's country
   */
  country_id?: GQLCountryCodeEnum;
  
  /**
   * The fax number
   */
  fax?: string;
  
  /**
   * The first name of the person associated with the shipping/billing address
   */
  firstname: string;
  
  /**
   * The family name of the person associated with the shipping/billing address
   */
  lastname: string;
  
  /**
   * The middle name of the person associated with the shipping/billing address
   */
  middlename?: string;
  
  /**
   * The customer's order ZIP or postal code
   */
  postcode?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * The state or province name
   */
  region?: string;
  
  /**
   * The unique ID for a `Region` object of a pre-defined region
   */
  region_id?: string;
  
  /**
   * An array of strings that define the street number and name
   */
  street: Array<string | null>;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The telephone number
   */
  telephone: string;
  
  /**
   * The customer's Value-added tax (VAT) number (for corporate customers)
   */
  vat_id?: string;
}

/**
 * Comment item details
 */
export interface GQLSalesCommentItem {
  
  /**
   * The text of the message
   */
  message: string;
  
  /**
   * The timestamp of the comment
   */
  timestamp: string;
}

/**
 * Credit memo details
 */
export interface GQLCreditMemo {
  
  /**
   * Comments on the credit memo
   */
  comments?: Array<GQLSalesCommentItem | null>;
  
  /**
   * The unique ID for a `CreditMemo` object
   */
  id: string;
  
  /**
   * An array containing details about refunded items
   */
  items?: Array<GQLCreditMemoItemInterface | null>;
  
  /**
   * The sequential credit memo number
   */
  number: string;
  
  /**
   * Contains details about the total refunded amount
   */
  total?: GQLCreditMemoTotal;
}

/**
 * Credit memo item details
 */
export interface GQLCreditMemoItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `CreditMemoItemInterface` object
   */
  id: string;
  
  /**
   * The order item the credit memo is applied to
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/** Use this to resolve interface type CreditMemoItemInterface */
export type GQLPossibleCreditMemoItemInterfaceTypeNames =
'BundleCreditMemoItem' |
'CreditMemoItem' |
'DownloadableCreditMemoItem';

export interface GQLCreditMemoItemInterfaceNameMap {
  CreditMemoItemInterface: GQLCreditMemoItemInterface;
  BundleCreditMemoItem: GQLBundleCreditMemoItem;
  CreditMemoItem: GQLCreditMemoItem;
  DownloadableCreditMemoItem: GQLDownloadableCreditMemoItem;
}

/**
 * Order item details
 */
export interface GQLOrderItemInterface {
  
  /**
   * The final discount information for the product
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The entered option for the base product, such as a logo or image
   */
  entered_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The unique ID for a `OrderItemInterface` object
   */
  id: string;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price of the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The type of product, such as simple, configurable, etc.
   */
  product_type?: string;
  
  /**
   * URL key of the base product
   */
  product_url_key?: string;
  
  /**
   * The number of canceled items
   */
  quantity_canceled?: number;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The number of units ordered for this item
   */
  quantity_ordered?: number;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The number of returned items
   */
  quantity_returned?: number;
  
  /**
   * The number of shipped items
   */
  quantity_shipped?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
  
  /**
   * The selected options for the base product, such as color or size
   */
  selected_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The status of the order item
   */
  status?: string;
}

/** Use this to resolve interface type OrderItemInterface */
export type GQLPossibleOrderItemInterfaceTypeNames =
'BundleOrderItem' |
'DownloadableOrderItem' |
'OrderItem';

export interface GQLOrderItemInterfaceNameMap {
  OrderItemInterface: GQLOrderItemInterface;
  BundleOrderItem: GQLBundleOrderItem;
  DownloadableOrderItem: GQLDownloadableOrderItem;
  OrderItem: GQLOrderItem;
}

/**
 * Represents order item options like selected or entered
 */
export interface GQLOrderItemOption {
  items?: Array<GQLBundleOption | null>;
  
  /**
   * The name of the option
   */
  label: string;
  linkItems?: Array<string | null>;
  
  /**
   * The value of the option
   */
  value?: string;
}

export interface GQLBundleOption {
  option_id?: number;
  price?: number;
  qty?: number;
  selection_details?: Array<GQLBundleOptionSelection | null>;
  title?: string;
}

export interface GQLBundleOptionSelection {
  final_option_price?: number;
  final_option_price_excl_tax?: number;
  name?: string;
  regular_option_price?: number;
  regular_option_price_excl_tax?: number;
  selection_id?: number;
}

/**
 * Credit memo price details
 */
export interface GQLCreditMemoTotal {
  
  /**
   * An adjustment manually applied to the order
   */
  adjustment: GQLMoney;
  
  /**
   * The final base grand total amount in the base currency
   */
  base_grand_total: GQLMoney;
  
  /**
   * The applied discounts to the credit memo
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The final total amount, including shipping, discounts, and taxes
   */
  grand_total: GQLMoney;
  
  /**
   * Contains details about the shipping and handling costs for the credit memo
   */
  shipping_handling?: GQLShippingHandling;
  
  /**
   * The subtotal of the invoice, excluding shipping, discounts, and taxes
   */
  subtotal: GQLMoney;
  
  /**
   * The credit memo tax details
   */
  taxes?: Array<GQLTaxItem | null>;
  
  /**
   * The shipping amount for the credit memo
   */
  total_shipping: GQLMoney;
  
  /**
   * The amount of tax applied to the credit memo
   */
  total_tax: GQLMoney;
}

/**
 * The Shipping handling details
 */
export interface GQLShippingHandling {
  
  /**
   * The shipping amount, excluding tax
   */
  amount_excluding_tax?: GQLMoney;
  
  /**
   * The shipping amount, including tax
   */
  amount_including_tax?: GQLMoney;
  
  /**
   * The applied discounts to the shipping
   */
  discounts?: Array<GQLShippingDiscount | null>;
  
  /**
   * Contains details about taxes applied for shipping
   */
  taxes?: Array<GQLTaxItem | null>;
  
  /**
   * The total amount for shipping
   */
  total_amount: GQLMoney;
}

/**
 * Defines an individual shipping discount. This discount can be applied to shipping.
 */
export interface GQLShippingDiscount {
  
  /**
   * The amount of the discount
   */
  amount: GQLMoney;
}

/**
 * The tax item details
 */
export interface GQLTaxItem {
  
  /**
   * The amount of tax applied to the item
   */
  amount: GQLMoney;
  
  /**
   * The rate used to calculate the tax
   */
  rate: number;
  
  /**
   * A title that describes the tax
   */
  title: string;
}

/**
 * Invoice details
 */
export interface GQLInvoice {
  
  /**
   * Comments on the invoice
   */
  comments?: Array<GQLSalesCommentItem | null>;
  
  /**
   * The unique ID for a `Invoice` object
   */
  id: string;
  
  /**
   * Invoiced product details
   */
  items?: Array<GQLInvoiceItemInterface | null>;
  
  /**
   * Sequential invoice number
   */
  number: string;
  
  /**
   * Invoice total amount details
   */
  total?: GQLInvoiceTotal;
}

/**
 * Invoice item details
 */
export interface GQLInvoiceItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `InvoiceItemInterface` object
   */
  id: string;
  
  /**
   * Contains details about an individual order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/** Use this to resolve interface type InvoiceItemInterface */
export type GQLPossibleInvoiceItemInterfaceTypeNames =
'BundleInvoiceItem' |
'DownloadableInvoiceItem' |
'InvoiceItem';

export interface GQLInvoiceItemInterfaceNameMap {
  InvoiceItemInterface: GQLInvoiceItemInterface;
  BundleInvoiceItem: GQLBundleInvoiceItem;
  DownloadableInvoiceItem: GQLDownloadableInvoiceItem;
  InvoiceItem: GQLInvoiceItem;
}

/**
 * Contains price details from an invoice
 */
export interface GQLInvoiceTotal {
  
  /**
   * The final base grand total amount in the base currency
   */
  base_grand_total: GQLMoney;
  
  /**
   * The applied discounts to the invoice
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The final total amount, including shipping, discounts, and taxes
   */
  grand_total: GQLMoney;
  
  /**
   * Contains details about the shipping and handling costs for the invoice
   */
  shipping_handling?: GQLShippingHandling;
  
  /**
   * The subtotal of the invoice, excluding shipping, discounts, and taxes
   */
  subtotal: GQLMoney;
  
  /**
   * The invoice tax details
   */
  taxes?: Array<GQLTaxItem | null>;
  
  /**
   * The shipping amount for the invoice
   */
  total_shipping: GQLMoney;
  
  /**
   * The amount of tax applied to the invoice
   */
  total_tax: GQLMoney;
}

/**
 * Contains details about the payment method used to pay for the order
 */
export interface GQLOrderPaymentMethod {
  
  /**
   * Additional data per payment method type
   */
  additional_data?: Array<GQLKeyValue | null>;
  
  /**
   * The label that describes the payment method
   */
  name: string;
  
  /**
   * Defines order purchase number
   */
  purchase_number?: string;
  
  /**
   * The payment method code that indicates how the order was paid for
   */
  type: string;
}

/**
 * The key-value type
 */
export interface GQLKeyValue {
  
  /**
   * The name part of the name/value pair
   */
  name?: string;
  
  /**
   * The value part of the name/value pair
   */
  value?: string;
}

/**
 * Order shipment details
 */
export interface GQLOrderShipment {
  
  /**
   * Comments added to the shipment
   */
  comments?: Array<GQLSalesCommentItem | null>;
  
  /**
   * The unique ID for a `OrderShipment` object
   */
  id: string;
  
  /**
   * Contains items included in the shipment
   */
  items?: Array<GQLShipmentItemInterface | null>;
  
  /**
   * The sequential credit shipment number
   */
  number: string;
  
  /**
   * Contains shipment tracking details
   */
  tracking?: Array<GQLShipmentTracking | null>;
}

/**
 * Order shipment item details
 */
export interface GQLShipmentItemInterface {
  
  /**
   * The unique ID for a `ShipmentItemInterface` object
   */
  id: string;
  
  /**
   * Associated order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * Name of the base product
   */
  product_name?: string;
  
  /**
   * Sale price for the base product
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * Number of shipped items
   */
  quantity_shipped: number;
}

/** Use this to resolve interface type ShipmentItemInterface */
export type GQLPossibleShipmentItemInterfaceTypeNames =
'BundleShipmentItem' |
'ShipmentItem';

export interface GQLShipmentItemInterfaceNameMap {
  ShipmentItemInterface: GQLShipmentItemInterface;
  BundleShipmentItem: GQLBundleShipmentItem;
  ShipmentItem: GQLShipmentItem;
}

/**
 * Order shipment tracking details
 */
export interface GQLShipmentTracking {
  
  /**
   * The shipping carrier for the order delivery
   */
  carrier: string;
  
  /**
   * The tracking number of the order shipment
   */
  number?: string;
  
  /**
   * The shipment tracking title
   */
  title: string;
}

/**
 * Contains details about the sales total amounts used to calculate the final price
 */
export interface GQLOrderTotal {
  
  /**
   * The final base grand total amount in the base currency
   */
  base_grand_total: GQLMoney;
  
  /**
   * The applied discounts to the order
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The final total amount, including shipping, discounts, and taxes
   */
  grand_total: GQLMoney;
  
  /**
   * Contains details about the shipping and handling costs for the order
   */
  shipping_handling?: GQLShippingHandling;
  
  /**
   * The subtotal of the order, excluding shipping, discounts, and taxes
   */
  subtotal: GQLMoney;
  
  /**
   * The order tax details
   */
  taxes?: Array<GQLTaxItem | null>;
  
  /**
   * The shipping amount for the order
   */
  total_shipping: GQLMoney;
  
  /**
   * The amount of tax applied to the order
   */
  total_tax: GQLMoney;
}

export interface GQLWishlist {
  
  /**
   * The unique ID for a `Wishlist` object
   */
  id?: string;
  
  /**
   * 
   * @deprecated Use field `items_v2` from type `Wishlist` instead
   */
  items?: Array<GQLWishlistItem | null>;
  
  /**
   * The number of items in the wish list
   */
  items_count?: number;
  
  /**
   * An array of items in the customer's wish list
   */
  items_v2?: GQLWishlistItems;
  
  /**
   * An encrypted code that Magento uses to link to the wish list
   */
  sharing_code?: string;
  
  /**
   * The time of the last modification to the wish list
   */
  updated_at?: string;
}

export interface GQLWishlistItem {
  
  /**
   * The time when the customer added the item to the wish list
   */
  added_at?: string;
  
  /**
   * Configurations to place order with selected options
   */
  buy_request?: string;
  
  /**
   * The customer's comment about this item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItem` object
   */
  id?: number;
  options?: Array<GQLWishlistItemOption | null>;
  
  /**
   * Product price based on selected options
   */
  price?: number;
  
  /**
   * Product price without tax based on selected options
   */
  price_without_tax?: number;
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  qty?: number;
  
  /**
   * The wish list item's SKU
   */
  sku?: string;
}

export interface GQLWishlistItemOption {
  label?: string;
  value?: string;
}

export interface GQLWishlistItems {
  
  /**
   * A list of items in the wish list
   */
  items: Array<GQLWishlistItemInterface | null>;
  
  /**
   * Contains pagination metadata
   */
  page_info?: GQLSearchResultPageInfo;
}

export interface GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

/** Use this to resolve interface type WishlistItemInterface */
export type GQLPossibleWishlistItemInterfaceTypeNames =
'BundleWishlistItem' |
'ConfigurableWishlistItem' |
'DownloadableWishlistItem' |
'GroupedProductWishlistItem' |
'SimpleWishlistItem' |
'VirtualWishlistItem';

export interface GQLWishlistItemInterfaceNameMap {
  WishlistItemInterface: GQLWishlistItemInterface;
  BundleWishlistItem: GQLBundleWishlistItem;
  ConfigurableWishlistItem: GQLConfigurableWishlistItem;
  DownloadableWishlistItem: GQLDownloadableWishlistItem;
  GroupedProductWishlistItem: GQLGroupedProductWishlistItem;
  SimpleWishlistItem: GQLSimpleWishlistItem;
  VirtualWishlistItem: GQLVirtualWishlistItem;
}

export interface GQLSelectedCustomizableOption {
  
  /**
   * The unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`,
   * `CustomizableMultipleOption`, etc. of `CustomizableOptionInterface` objects
   */
  customizable_option_uid: string;
  
  /**
   * 
   * @deprecated Use SelectedCustomizableOption.customizable_option_uid instead
   */
  id: number;
  is_required: boolean;
  label: string;
  sort_order: number;
  type: string;
  values: Array<GQLSelectedCustomizableOptionValue | null>;
}

export interface GQLSelectedCustomizableOptionValue {
  
  /**
   * The unique ID for a `CustomizableMultipleValue`, `CustomizableRadioValue`,
   * `CustomizableCheckboxValue`, `CustomizableDropDownValue`, etc. objects
   */
  customizable_option_value_uid: string;
  
  /**
   * 
   * @deprecated Use SelectedCustomizableOptionValue.customizable_option_value_uid instead
   */
  id: number;
  label: string;
  price: GQLCartItemSelectedOptionValuePrice;
  value: string;
}

export interface GQLCartItemSelectedOptionValuePrice {
  type: GQLPriceTypeEnum;
  units: string;
  value: number;
}

/**
 * This enumeration the price type.
 */
export enum GQLPriceTypeEnum {
  FIXED = 'FIXED',
  PERCENT = 'PERCENT',
  DYNAMIC = 'DYNAMIC'
}

export interface GQLCustomerDownloadableProducts {
  
  /**
   * List of purchased downloadable items
   */
  items?: Array<GQLCustomerDownloadableProduct | null>;
}

export interface GQLCustomerDownloadableProduct {
  date?: string;
  download_url?: string;
  link_title?: string;
  order_id?: number;
  order_increment_id?: string;
  remaining_downloads?: string;
  status?: string;
  title?: string;
}

export interface GQLCustomerPaymentTokens {
  
  /**
   * An array of payment tokens
   */
  items: Array<GQLPaymentToken | null>;
}

/**
 * The stored payment method available to the customer
 */
export interface GQLPaymentToken {
  
  /**
   * Stored account details
   */
  details?: string;
  
  /**
   * The payment method code associated with the token
   */
  payment_method_code: string;
  
  /**
   * The public hash of the token
   */
  public_hash: string;
  type: GQLPaymentTokenTypeEnum;
}

/**
 * The list of available payment token types
 */
export enum GQLPaymentTokenTypeEnum {
  card = 'card',
  account = 'account'
}

export interface GQLIsConfigSettingEnabledOutput {
  
  /**
   * Is config setting enabled
   */
  is_enabled?: boolean;
}

export interface GQLBraintree {
  is_three_d_secure?: boolean;
}

export interface GQLCartDisplayConfig {
  display_full_tax_summary?: boolean;
  display_tax_in_price?: string;
  display_tax_in_shipping_amount?: string;
  display_tax_in_subtotal?: string;
  display_zero_tax_subtotal?: boolean;
  include_tax_in_order_total?: boolean;
}

export interface GQLQuoteData extends GQLTotalsObject {
  applied_rule_ids?: string;
  applied_taxes?: Array<GQLAppliedTaxItem | null>;
  base_currency_code?: string;
  base_discount_amount?: number;
  base_grand_total?: number;
  base_shipping_amount?: number;
  base_shipping_discount_amount?: number;
  base_shipping_incl_tax?: number;
  base_shipping_tax_amount?: number;
  base_subtotal?: number;
  base_subtotal_with_discount?: number;
  base_tax_amount?: number;
  coupon_code?: string;
  customer_is_guest?: boolean;
  customer_tax_class_id?: number;
  discount_amount?: number;
  grand_total?: number;
  id?: string;
  is_in_store_pickup_available?: boolean;
  is_virtual?: boolean;
  items?: Array<GQLTotalsItem | null>;
  items_count?: number;
  items_qty?: number;
  quote_currency_code?: string;
  shipping_amount?: number;
  shipping_discount_amount?: number;
  shipping_incl_tax?: number;
  shipping_method?: string;
  shipping_tax_amount?: number;
  store_id?: number;
  subtotal?: number;
  subtotal_incl_tax?: number;
  subtotal_with_discount?: number;
  tax_amount?: number;
  weee_tax_applied_amount?: number;
}

export interface GQLTotalsObject {
  applied_rule_ids?: string;
  base_currency_code?: string;
  base_discount_amount?: number;
  base_grand_total?: number;
  base_shipping_amount?: number;
  base_shipping_discount_amount?: number;
  base_shipping_incl_tax?: number;
  base_shipping_tax_amount?: number;
  base_subtotal?: number;
  base_subtotal_with_discount?: number;
  base_tax_amount?: number;
  coupon_code?: string;
  customer_is_guest?: boolean;
  customer_tax_class_id?: number;
  discount_amount?: number;
  grand_total?: number;
  is_in_store_pickup_available?: boolean;
  items?: Array<GQLTotalsItem | null>;
  items_count?: number;
  items_qty?: number;
  quote_currency_code?: string;
  shipping_amount?: number;
  shipping_discount_amount?: number;
  shipping_incl_tax?: number;
  shipping_method?: string;
  shipping_tax_amount?: number;
  store_id?: number;
  subtotal?: number;
  subtotal_incl_tax?: number;
  subtotal_with_discount?: number;
  tax_amount?: number;
  weee_tax_applied_amount?: number;
}

/** Use this to resolve interface type TotalsObject */
export type GQLPossibleTotalsObjectTypeNames = 'QuoteData' | 'PaymentTotals';

export interface GQLTotalsObjectNameMap {
  TotalsObject: GQLTotalsObject;
  QuoteData: GQLQuoteData;
  PaymentTotals: GQLPaymentTotals;
}

export interface GQLTotalsItem {
  base_discount_amount?: number;
  base_price?: number;
  base_price_incl_tax?: number;
  base_row_total?: number;
  base_row_total_incl_tax?: number;
  base_tax_amount?: number;
  bundle_options?: Array<GQLSelectedBundleOption | null>;
  customizable_options?: Array<GQLSelectedCustomizableOption | null>;
  discount_amount?: number;
  discount_percent?: number;
  downloadable_links?: Array<GQLSelectedDownloadableLinks | null>;
  item_id?: number;
  name?: string;
  options?: string;
  price?: number;
  price_incl_tax?: number;
  product?: GQLProductInterface;
  qty?: number;
  row_total?: number;
  row_total_incl_tax?: number;
  row_total_with_discount?: number;
  sku?: string;
  tax_amount?: number;
  tax_percent?: number;
  weee_tax_applied?: number;
  weee_tax_applied_amount?: number;
}

export interface GQLSelectedBundleOption {
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: number;
  label: string;
  type: string;
  
  /**
   * The unique ID for a `SelectedBundleOption` object
   */
  uid: string;
  values: Array<GQLSelectedBundleOptionValue | null>;
}

export interface GQLSelectedBundleOptionValue {
  
  /**
   * Use `uid` instead
   */
  id: number;
  label: string;
  price: number;
  quantity: number;
  
  /**
   * The unique ID for a `SelectedBundleOptionValue` object
   */
  uid: string;
}

export interface GQLSelectedDownloadableLinks {
  id?: number;
  label?: string;
}

export interface GQLAppliedTaxItem {
  amount?: number;
  percent?: number;
  rates?: Array<GQLAppliedTaxItemRate | null>;
}

export interface GQLAppliedTaxItemRate {
  percent?: number;
  title?: string;
}

/**
 * The required input to request the secure URL for Payments Pro Hosted Solution payment.
 */
export interface GQLHostedProUrlInput {
  
  /**
   * The unique ID that identifies the customer's cart
   */
  cart_id: string;
}

/**
 * Contains secure URL used for Payments Pro Hosted Solution payment method.
 */
export interface GQLHostedProUrl {
  
  /**
   * Secure Url generated by PayPal
   */
  secure_form_url?: string;
}

/**
 * Contains details about the requested order
 */
export interface GQLOrder {
  base_order_info?: GQLBaseOrderInfo;
  
  /**
   * An array containing the items purchased in this order
   */
  items?: Array<string | null>;
  
  /**
   * 
   * @deprecated The order_id field is deprecated, use order_number instead.
   */
  order_id?: string;
  
  /**
   * The unique ID for a `Order` object.
   */
  order_number: string;
  order_products?: Array<GQLProductInterface | null>;
  payment_info?: GQLPaymentInfo;
  shipping_info?: GQLShippingInfo;
  
  /**
   * Contains the calculated total for this order
   */
  total?: string;
}

export interface GQLBaseOrderInfo {
  created_at?: string;
  currency_code?: string;
  grand_total?: number;
  id?: number;
  increment_id?: string;
  status?: string;
  status_label?: string;
  sub_total?: number;
  total_qty_ordered?: number;
}

export interface GQLPaymentInfo {
  additional_information?: GQLAdditionalCustomerInfo;
  cc_last_4?: string;
  cc_owner?: string;
  cc_type?: string;
  method?: string;
}

export interface GQLAdditionalCustomerInfo {
  bank?: string;
  credit_type?: string;
  customer_info?: GQLCreditCustomerInfo;
  method_title?: string;
  month?: number;
}

export interface GQLCreditCustomerInfo {
  first_name?: string;
  iin_number?: string;
  last_name?: string;
  middle_name?: string;
  phone?: string;
}

export interface GQLShippingInfo {
  shipping_address?: GQLOrderCustomerAddress;
  shipping_amount?: number;
  shipping_description?: string;
  shipping_incl_tax?: number;
  shipping_method?: string;
  tracking_numbers?: Array<string | null>;
}

export interface GQLOrderCustomerAddress {
  apartment_number?: string;
  city?: string;
  company?: string;
  country_id?: string;
  customer_id?: number;
  district?: string;
  firstname?: string;
  house_number?: string;
  id?: number;
  is_b2b?: string;
  lastname?: string;
  middlename?: string;
  organizationaddress?: string;
  organizationbik?: string;
  organizationbin?: string;
  organizationiic?: string;
  organizationname?: string;
  post_office_code?: string;
  postcode?: string;
  postomat_code?: string;
  prefix?: string;
  region?: string;
  store_pickup_code?: string;
  street?: string;
  telephone?: string;
}

export interface GQLOrderList {
  items?: Array<GQLOrder | null>;
}

/**
 * Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods.
 */
export interface GQLPayflowLinkTokenInput {
  
  /**
   * The unique ID that identifies the customer's cart
   */
  cart_id: string;
}

/**
 * Contains information used to generate PayPal iframe for transaction. Applies to
 * Payflow Link and Payments Advanced payment methods.
 */
export interface GQLPayflowLinkToken {
  
  /**
   * Mode for Payflow transaction
   */
  mode?: GQLPayflowLinkMode;
  
  /**
   * PayPal URL used for requesting Payflow form
   */
  paypal_url?: string;
  
  /**
   * Secure token generated by PayPal
   */
  secure_token?: string;
  
  /**
   * Secure token ID generated by PayPal
   */
  secure_token_id?: string;
}

/**
 * Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods.
 */
export enum GQLPayflowLinkMode {
  TEST = 'TEST',
  LIVE = 'LIVE'
}

export interface GQLPaymentMethod {
  code?: string;
  title?: string;
}

/**
 * Product Information used for Pickup Locations search.
 */
export interface GQLProductInfoInput {

  /**
   * Product SKU.
   */
  sku: string;
}

export interface GQLStores {
  stores?: Array<GQLStore | null>;
}

export interface GQLStore {
  city?: string;
  country?: string;
  description?: string;
  name?: string;
  phone?: string;
  pickup_location_code?: string;
  postcode?: string;
  region?: string;
  street?: string;
}

export interface GQLIsEmailAvailableOutput {
  
  /**
   * Is email availabel value
   */
  is_email_available?: boolean;
}

/**
 * AreaInput defines the parameters which will be used for filter by specified location.
 */
export interface GQLAreaInput {
  
  /**
   * The radius for the search in KM.
   */
  radius: number;
  
  /**
   * The country code where search must be performed. Required parameter together with region, city or postcode.
   */
  search_term: string;
}

/**
 * PickupLocationFilterInput defines the list of attributes and filters for the search.
 */
export interface GQLPickupLocationFilterInput {
  
  /**
   * Filter by city.
   */
  city?: GQLFilterTypeInput;
  
  /**
   * Filter by country.
   */
  country_id?: GQLFilterTypeInput;
  
  /**
   * Filter by pickup location name.
   */
  name?: GQLFilterTypeInput;
  
  /**
   * Filter by pickup location code.
   */
  pickup_location_code?: GQLFilterTypeInput;
  
  /**
   * Filter by postcode.
   */
  postcode?: GQLFilterTypeInput;
  
  /**
   * Filter by region.
   */
  region?: GQLFilterTypeInput;
  
  /**
   * Filter by region id.
   */
  region_id?: GQLFilterTypeInput;
  
  /**
   * Filter by street.
   */
  street?: GQLFilterTypeInput;
}

/**
 * FilterTypeInput specifies which action will be performed in a query 
 */
export interface GQLFilterTypeInput {
  
  /**
   * Equals
   */
  eq?: string;
  finset?: Array<string | null>;
  
  /**
   * From. Must be used with 'to'
   */
  from?: string;
  
  /**
   * Greater than
   */
  gt?: string;
  
  /**
   * Greater than or equal to
   */
  gteq?: string;
  
  /**
   * In. The value can contain a set of comma-separated values
   */
  in?: Array<string | null>;
  
  /**
   * Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters
   */
  like?: string;
  
  /**
   * Less than
   */
  lt?: string;
  
  /**
   * Less than or equal to
   */
  lteq?: string;
  
  /**
   * More than or equal to
   */
  moreq?: string;
  
  /**
   * Not equal to
   */
  neq?: string;
  
  /**
   * Not in. The value can contain a set of comma-separated values
   */
  nin?: Array<string | null>;
  
  /**
   * Not null
   */
  notnull?: string;
  
  /**
   * Is null
   */
  null?: string;
  
  /**
   * To. Must be used with 'from'
   */
  to?: string;
}

/**
 * PickupLocationSortInput specifies attribute to use for sorting search results
 * and indicates whether the results are sorted in ascending or descending order.
 */
export interface GQLPickupLocationSortInput {
  
  /**
   * City where pickup location is placed.
   */
  city?: GQLSortEnum;
  
  /**
   * Name of the contact person.
   */
  contact_name?: GQLSortEnum;
  
  /**
   * Id of the country in two letters.
   */
  country_id?: GQLSortEnum;
  
  /**
   * Description of the pickup location.
   */
  description?: GQLSortEnum;
  
  /**
   * Distance to the address, requested by distance filter. Applicable only with
   * distance filter. If distance sort order is present, all other sort orders will be ignored.
   */
  distance?: GQLSortEnum;
  
  /**
   * Contact email of the pickup location.
   */
  email?: GQLSortEnum;
  
  /**
   * Contact fax of the pickup location.
   */
  fax?: GQLSortEnum;
  
  /**
   * Geographic latitude where pickup location is placed.
   */
  latitude?: GQLSortEnum;
  
  /**
   * Geographic longitude where pickup location is placed.
   */
  longitude?: GQLSortEnum;
  
  /**
   * The pickup location name. Customer use this to identify the pickup location.
   */
  name?: GQLSortEnum;
  
  /**
   * Contact phone number of the pickup location.
   */
  phone?: GQLSortEnum;
  
  /**
   * A code assigned to pickup location to identify the source.
   */
  pickup_location_code?: GQLSortEnum;
  
  /**
   * Postcode where pickup location is placed.
   */
  postcode?: GQLSortEnum;
  
  /**
   * Name of the region.
   */
  region?: GQLSortEnum;
  
  /**
   * Id of the region.
   */
  region_id?: GQLSortEnum;
  
  /**
   * Street where pickup location is placed.
   */
  street?: GQLSortEnum;
}

/**
 * Top level object returned in a pickup locations search.
 */
export interface GQLPickupLocations {
  
  /**
   * An array of pickup locations that match the specific search request.
   */
  items?: Array<GQLPickupLocation | null>;
  
  /**
   * An object that includes the page_info and currentPage values specified in the query.
   */
  page_info?: GQLSearchResultPageInfo;
  
  /**
   * The number of products returned.
   */
  total_count?: number;
}

/**
 * Defines Pickup Location information.
 */
export interface GQLPickupLocation {
  city?: string;
  contact_name?: string;
  country_id?: string;
  description?: string;
  email?: string;
  fax?: string;
  latitude?: number;
  longitude?: number;
  name?: string;
  phone?: string;
  pickup_location_code?: string;
  postcode?: string;
  region?: string;
  region_id?: number;
  street?: string;
}

export interface GQLProductReviewRatingsMetadata {
  
  /**
   * List of product reviews sorted by position
   */
  items: Array<GQLProductReviewRatingMetadata | null>;
}

export interface GQLProductReviewRatingMetadata {
  
  /**
   * An encoded rating ID.
   */
  id: string;
  
  /**
   * The label assigned to an aspect of a product that is being rated, such as quality or price
   */
  name: string;
  
  /**
   * List of product review ratings sorted by position.
   */
  values: Array<GQLProductReviewRatingValueMetadata | null>;
}

export interface GQLProductReviewRatingValueMetadata {
  
  /**
   * A ratings scale, such as the number of stars awarded
   */
  value: string;
  
  /**
   * An encoded rating value id.
   */
  value_id: string;
}

/**
 * ProductAttributeFilterInput defines the filters to be used in the search. A
 * filter contains at least one attribute, a comparison operator, and the value
 * that is being searched for.
 */
export interface GQLProductAttributeFilterInput {
  
  /**
   * Attribute label: New Multiple attribute
   */
  New_multiple_attribute?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Test_Ainars
   */
  Test_Ainars?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Attribute allows html
   */
  attribute_allows_html?: GQLFilterMatchTypeInput;
  
  /**
   * Deprecated: use `category_uid` to filter product by category id.
   */
  category_id?: GQLFilterEqualTypeInput;
  
  /**
   * Filter product by the unique ID for a `CategoryInterface` object.
   */
  category_uid?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: clothing colour
   */
  clothing_colour?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: clothing gender
   */
  clothing_gender?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: clothing size
   */
  clothing_size?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Color
   */
  color?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: 1Color Elena
   */
  color_elena?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Colors with images!
   */
  colors_with_images?: GQLFilterEqualTypeInput;
  
  /**
   * Searches products by JSON formatted conditions
   */
  conditions?: GQLFilterTypeInput;
  
  /**
   * Modifies product prices based on customer group
   */
  customer_group_id?: GQLFilterTypeInput;
  
  /**
   * Attribute label: Description
   */
  description?: GQLFilterMatchTypeInput;
  
  /**
   * Attribute label: Fit
   */
  fit?: GQLFilterEqualTypeInput;
  
  /**
   * Entity id filter for products
   */
  id?: GQLFilterTypeInput;
  
  /**
   * Attribute label: Images Type Map
   */
  images_type_map?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: memory
   */
  memory?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Multiple attribute
   */
  multiple_attribute?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Product Name
   */
  name?: GQLFilterMatchTypeInput;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   */
  news_from_date?: GQLFilterTypeInput;
  
  /**
   * The end date for new product listings.
   */
  news_to_date?: GQLFilterTypeInput;
  
  /**
   * Attribute label: Price
   */
  price?: GQLFilterRangeTypeInput;
  
  /**
   * Attribute label: Ranking
   */
  ranking?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Shoes size
   */
  shoes_size?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Short Description
   */
  short_description?: GQLFilterMatchTypeInput;
  
  /**
   * Attribute label: Size
   */
  size?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: SKU
   */
  sku?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: test
   */
  test?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: texture
   */
  texture?: GQLFilterEqualTypeInput;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: Valuesss
   */
  valuesss?: GQLFilterEqualTypeInput;
  
  /**
   * Attribute label: yes/no
   */
  yes_no?: GQLFilterEqualTypeInput;
}

/**
 * Defines a filter that matches a range of values, such as prices or dates.
 */
export interface GQLFilterRangeTypeInput {
  
  /**
   * The beginning of the range
   */
  from?: string;
  
  /**
   * The end of the range
   */
  to?: string;
}

/**
 * The Products object is the top-level object returned in a product search.
 */
export interface GQLProducts {
  
  /**
   * Layered navigation aggregations.
   */
  aggregations?: Array<GQLAggregation | null>;
  
  /**
   * Layered navigation filters array.
   * @deprecated Use aggregations instead
   */
  filters?: Array<GQLLayerFilter | null>;
  
  /**
   * An array of products that match the specified search criteria.
   */
  items?: Array<GQLProductInterface | null>;
  
  /**
   * An object that includes the page_info and currentPage values specified in the query.
   */
  page_info?: GQLSearchResultPageInfo;
  
  /**
   * An object that includes the default sort field and all available sort fields.
   */
  sort_fields?: GQLSortFields;
  
  /**
   * The number of products that are marked as visible. By default, in complex
   * products, parent products are visible, but their child products are not.
   */
  total_count?: number;
}

/**
 * A bucket that contains information for each filterable option (such as price, category `UID`, and custom attributes).
 */
export interface GQLAggregation {
  
  /**
   * Attribute code of the aggregation group.
   */
  attribute_code: string;
  
  /**
   * The number of options in the aggregation group.
   */
  count?: number;
  
  /**
   * Flag to indicate that aggregated attribute uses swatch to select value.
   */
  has_swatch?: boolean;
  
  /**
   * Flag to indicate that aggregated attribute has boolean type.
   */
  is_boolean?: boolean;
  
  /**
   * The aggregation display name.
   */
  label?: string;
  
  /**
   * Array of options for the aggregation.
   */
  options?: Array<GQLAggregationOption | null>;
  
  /**
   * Attribute position in filter menu.
   */
  position?: number;
}

export interface GQLAggregationOption extends GQLAggregationOptionInterface {
  
  /**
   * The number of items that match the aggregation option.
   */
  count?: number;
  
  /**
   * Aggregation option display label.
   */
  label?: string;
  
  /**
   * Swatch data
   */
  swatch_data?: GQLSwatchData;
  
  /**
   * The internal ID that represents the value of the option.
   */
  value: string;
}

export interface GQLAggregationOptionInterface {
  
  /**
   * The number of items that match the aggregation option.
   */
  count?: number;
  
  /**
   * Aggregation option display label.
   */
  label?: string;
  
  /**
   * Swatch data
   */
  swatch_data?: GQLSwatchData;
  
  /**
   * The internal ID that represents the value of the option.
   */
  value: string;
}

/** Use this to resolve interface type AggregationOptionInterface */
export type GQLPossibleAggregationOptionInterfaceTypeNames =
'AggregationOption';

export interface GQLAggregationOptionInterfaceNameMap {
  AggregationOptionInterface: GQLAggregationOptionInterface;
  AggregationOption: GQLAggregationOption;
}

export interface GQLSwatchData {
  
  /**
   * Type of swatch filter item: 1 - text, 2 - image
   */
  type?: string;
  
  /**
   * Value for swatch item (text or image link)
   */
  value?: string;
}

export interface GQLLayerFilter {
  
  /**
   * Array of filter items.
   * @deprecated Use Aggregation.options instead.
   */
  filter_items?: Array<GQLLayerFilterItemInterface | null>;
  
  /**
   * Count of filter items in filter group.
   * @deprecated Use Aggregation.count instead.
   */
  filter_items_count?: number;
  
  /**
   * Layered navigation filter name.
   * @deprecated Use Aggregation.label instead.
   */
  name?: string;
  
  /**
   * Request variable name for filter query.
   * @deprecated Use Aggregation.attribute_code instead.
   */
  request_var?: string;
}

export interface GQLLayerFilterItemInterface {
  
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: number;
  
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: string;
  
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: string;
}

/** Use this to resolve interface type LayerFilterItemInterface */
export type GQLPossibleLayerFilterItemInterfaceTypeNames =
'LayerFilterItem' |
'SwatchLayerFilterItem';

export interface GQLLayerFilterItemInterfaceNameMap {
  LayerFilterItemInterface: GQLLayerFilterItemInterface;
  LayerFilterItem: GQLLayerFilterItem;
  SwatchLayerFilterItem: GQLSwatchLayerFilterItem;
}

/**
 * SortFields contains a default value for sort fields and all available sort fields.
 */
export interface GQLSortFields {
  
  /**
   * Default value of sort fields.
   */
  default?: string;
  
  /**
   * Available sort fields.
   */
  options?: Array<GQLSortField | null>;
}

export interface GQLSortField {
  
  /**
   * Label of sort field.
   */
  label?: string;
  
  /**
   * Attribute code of sort field.
   */
  value?: string;
}

/**
 * Deprecated: `Wishlist` type should be used instead
 */
export interface GQLWishlistOutput {
  
  /**
   * Name of wishlist creator
   */
  creators_name?: string;
  id?: string;
  
  /**
   * An array of items in the customer's wish list
   * @deprecated Use field `items` from type `Wishlist` instead
   */
  items?: Array<GQLWishlistItem | null>;
  
  /**
   * The number of items in the wish list
   * @deprecated Use field `items_count` from type `Wishlist` instead
   */
  items_count?: number;
  
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
   */
  name?: string;
  
  /**
   * An encrypted code that Magento uses to link to the wish list
   * @deprecated Use field `sharing_code` from type `Wishlist` instead
   */
  sharing_code?: string;
  
  /**
   * The time of the last modification to the wish list
   * @deprecated Use field `updated_at` from type `Wishlist` instead
   */
  updated_at?: string;
}

export interface GQLMenu {
  css_class?: string;
  is_active?: boolean;
  items?: Array<GQLItem | null>;
  menu_id?: string;
  title?: string;
}

export interface GQLItem {
  
  /**
   * Category id
   */
  category_id?: number;
  cms_page_identifier?: string;
  
  /**
   * Category icon
   */
  icon?: string;
  is_active?: boolean;
  
  /**
   * Boolean if category is promotional category
   */
  is_promo?: number;
  
  /**
   * CSS class of the item
   */
  item_class?: string;
  item_id?: string;
  parent_id?: number;
  position?: number;
  
  /**
   * Promo category image background
   */
  promo_image?: string;
  title?: string;
  url?: string;
  
  /**
   * 0 - regular link, 1 - cms page, 2 - category
   */
  url_type?: number;
}

/**
 * foo defines bar
 */
export interface GQLSlider {
  animation_speed?: number;
  is_active?: boolean;
  lazy_load?: boolean;
  position?: number;
  show_menu?: boolean;
  show_navigation?: boolean;
  slide_speed?: number;
  slider_id?: string;
  slides?: Array<GQLSlide | null>;
  slides_to_display?: number;
  slides_to_display_mobile?: number;
  slides_to_display_tablet?: number;
  slides_to_scroll?: number;
  slides_to_scroll_mobile?: number;
  slides_to_scroll_tablet?: number;
  title?: string;
}

export interface GQLSlide {
  desktop_image?: string;
  desktop_image_2?: string;
  desktop_image_3?: string;
  display_title?: string;
  display_title_2?: string;
  display_title_3?: string;
  embed_code?: string;
  embed_code_2?: string;
  embed_code_3?: string;
  end_time?: string;
  is_active?: boolean;
  maps?: Array<GQLMap | null>;
  mobile_image?: string;
  mobile_image_2?: string;
  mobile_image_3?: string;
  position?: number;
  slide_id?: string;
  slide_link?: string;
  slide_link_2?: string;
  slide_link_3?: string;
  slide_link_text?: string;
  slide_text?: string;
  slide_text_2?: string;
  slide_text_3?: string;
  slide_text_position?: number;
  slide_text_position_2?: number;
  slide_text_position_3?: number;
  slide_width_class?: string;
  start_time?: string;
  title?: string;
}

export interface GQLMap {
  coordinates?: string;
  is_active?: boolean;
  map_id?: string;
  product_id?: number;
  title?: string;
}

export interface GQLTrackingData {
  
  /**
   * Is Page Tracking enabled
   */
  page_tracking_enabled?: boolean;
  
  /**
   * dotdigital region prefix
   */
  region_prefix?: string;
  
  /**
   * Is ROI Tracking enabled
   */
  roi_tracking_enabled?: boolean;
  
  /**
   * Web Behaviour Tracking profile ID
   */
  wbt_profile_id?: string;
}

/**
 * EntityUrl is an output object containing the `id`, `canonical_url`, and `type` attributes
 */
export interface GQLEntityUrl {
  
  /**
   * The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original.
   * @deprecated The canonical_url field is deprecated, use relative_url instead.
   */
  canonical_url?: string;
  
  /**
   * The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, etc.
   * object associated with the specified url. This could be a product UID,
   * category UID, or cms page UID.
   */
  entity_uid?: string;
  
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
   * @deprecated Use `entity_uid` instead.
   */
  id?: number;
  
  /**
   * 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect
   */
  redirectCode?: number;
  
  /**
   * The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original.
   */
  relative_url?: string;
  
  /**
   * If URL rewrite is of type PRODUCT - it will return SKU here
   */
  sku?: string;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
}

export interface GQLMutation {
  addBundleProductsToCart?: GQLAddBundleProductsToCartOutput;
  addConfigurableProductsToCart?: GQLAddConfigurableProductsToCartOutput;
  addDownloadableProductsToCart?: GQLAddDownloadableProductsToCartOutput;
  
  /**
   * Add any type of product to the cart
   */
  addProductsToCart?: GQLAddProductsToCartOutput;
  
  /**
   * Add products to the specified compare list
   */
  addProductsToCompareList?: GQLCompareList;
  
  /**
   * Adds one or more products to the specified wish list. This mutation supports all product types
   */
  addProductsToWishlist?: GQLAddProductsToWishlistOutput;
  addSimpleProductsToCart?: GQLAddSimpleProductsToCartOutput;
  addVirtualProductsToCart?: GQLAddVirtualProductsToCartOutput;
  
  /**
   * Add items in the specified wishlist to the customer's cart
   */
  addWishlistItemsToCart?: GQLAddWishlistItemsToCartOutput;
  applyCoupon?: GQLQuery;
  applyCouponToCart?: GQLApplyCouponToCartOutput;
  
  /**
   * Assign the specified compare list to the logged in customer
   */
  assignCompareListToCustomer?: GQLAssignCompareListToCustomerOutput;
  
  /**
   * Changes the password for the logged-in customer
   */
  changeCustomerPassword?: GQLCustomer;
  
  /**
   * Confirm customer account
   */
  confirmCustomerEmail?: GQLCreateCustomerType;
  
  /**
   * Send contact form
   */
  contactForm?: GQLContactFormResponse;
  
  /**
   * Creates Client Token for Braintree Javascript SDK initialization.
   */
  createBraintreeClientToken: string;
  
  /**
   * Creates a new compare list. The compare list is saved for logged in customers
   */
  createCompareList?: GQLCompareList;
  
  /**
   * Create customer account
   */
  createCustomer?: GQLCustomerOutput;
  
  /**
   * Create customer address
   */
  createCustomerAddress?: GQLCustomerAddress;
  
  /**
   * Create customer account
   */
  createCustomerV2?: GQLCustomerOutput;
  
  /**
   * Creates an empty shopping cart for a guest or logged in user
   */
  createEmptyCart?: string;
  
  /**
   * Creates a Klarna Payments Session.
   */
  createKlarnaPaymentsSession?: GQLcreateKlarnaPaymentsSessionOutput;
  
  /**
   * Returns Klarna session token
   */
  createKlarnaToken?: string;
  
  /**
   * Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods
   */
  createPayflowProToken?: GQLCreatePayflowProTokenOutput;
  
  /**
   * Initiates an Express Checkout transaction and receives a token. Use this
   * mutation for Express Checkout and Payments Standard payment methods.
   */
  createPaypalExpressToken?: GQLPaypalExpressTokenOutput;
  
  /**
   * Creates a product review for the specified SKU
   */
  createProductReview: GQLCreateProductReviewOutput;
  
  /**
   * Delete the specified compare list
   */
  deleteCompareList?: GQLDeleteCompareListOutput;
  
  /**
   * Delete customer address
   */
  deleteCustomerAddress?: boolean;
  
  /**
   * Delete a customer payment token
   */
  deletePaymentToken?: GQLDeletePaymentTokenOutput;
  estimateShippingCosts?: Array<GQLShippingMethod | null>;
  
  /**
   * Resend customer confirmation
   */
  forgotPassword?: GQLCustomerActionConfirmationType;
  
  /**
   * Retrieve the customer token
   */
  generateCustomerToken?: GQLCustomerToken;
  
  /**
   * Request a customer token so that an administrator can perform remote shopping assistance
   */
  generateCustomerTokenAsAdmin?: GQLGenerateCustomerTokenAsAdminOutput;
  
  /**
   * Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods.
   */
  handlePayflowProResponse?: GQLPayflowProResponseOutput;
  linkOrder?: boolean;
  
  /**
   * Merges the source cart into the destination cart
   */
  mergeCarts: GQLCart;
  placeOrder?: GQLPlaceOrderOutput;
  
  /**
   * Customer subsribe for product alert
   */
  productAlertSubscribe?: boolean;
  removeCartItem?: GQLQuery;
  removeCoupon?: GQLQuery;
  removeCouponFromCart?: GQLRemoveCouponFromCartOutput;
  removeItemFromCart?: GQLRemoveItemFromCartOutput;
  
  /**
   * Remove products from the specified compare list
   */
  removeProductsFromCompareList?: GQLCompareList;
  
  /**
   * Removes one or more products from the specified wish list
   */
  removeProductsFromWishlist?: GQLRemoveProductsFromWishlistOutput;
  
  /**
   * Adds all products from a customer's previous order to the cart.
   */
  reorderItems?: GQLReorderItemsOutput;
  
  /**
   * Request an email with a reset password token for the registered customer identified by the specified email.
   */
  requestPasswordResetEmail?: boolean;
  
  /**
   * Resend customer confirmation
   */
  resendConfirmationEmail?: GQLCustomerActionConfirmationType;
  
  /**
   * Reset a customer's password using the reset password token that the customer
   * received in an email after requesting it using requestPasswordResetEmail.
   */
  resetPassword?: boolean;
  
  /**
   * Revoke the customer token
   */
  revokeCustomerToken?: GQLRevokeCustomerTokenOutput;
  
  /**
   * Clears wishlist
   */
  s_clearWishlist?: boolean;
  
  /**
   * Initiates an Express Checkout transaction and receives a token using
   * session-based cart_id. Use this mutation for Express Checkout and Payments
   * Standard payment methods.
   */
  s_createPaypalExpressToken?: GQLPaypalExpressToken;
  
  /**
   * Moves items from wishlist to cart
   */
  s_moveWishlistToCart?: boolean;
  s_placeOrder?: GQLPlaceOrderOutput;
  
  /**
   * Removes product from wishlist
   */
  s_removeProductFromWishlist?: boolean;
  
  /**
   * Resend customer confirmation
   */
  s_resetPassword?: GQLResetPasswordType;
  
  /**
   * Saves wishlist item
   */
  s_saveWishlistItem?: GQLWishlistItem;
  s_setBillingAddressOnCart?: GQLSetBillingAddressOnCartOutput;
  s_setPaymentMethodOnCart?: GQLSetPaymentMethodOnCartOutput;
  
  /**
   * Shares wishlist
   */
  s_shareWishlist?: boolean;
  saveAddressInformation?: GQLPaymentDetails;
  saveCartItem?: GQLQuery;
  saveSelectedCurrency?: GQLQuery;
  
  /**
   * Recommends Product by Sending Single/Multiple Email
   */
  sendEmailToFriend?: GQLSendEmailToFriendOutput;
  setBillingAddressOnCart?: GQLSetBillingAddressOnCartOutput;
  setGuestEmailOnCart?: GQLSetGuestEmailOnCartOutput;
  
  /**
   * 
   * @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request.
   */
  setPaymentMethodAndPlaceOrder?: GQLPlaceOrderOutput;
  setPaymentMethodOnCart?: GQLSetPaymentMethodOnCartOutput;
  setShippingAddressesOnCart?: GQLSetShippingAddressesOnCartOutput;
  setShippingMethodsOnCart?: GQLSetShippingMethodsOnCartOutput;
  
  /**
   * Subscribes the specified email to a newsletter
   */
  subscribeEmailToNewsletter?: GQLSubscribeEmailToNewsletterOutput;
  updateCartItems?: GQLUpdateCartItemsOutput;
  
  /**
   * Sends chat profile data to Engagement Cloud.
   */
  updateChatProfile?: boolean;
  
  /**
   * Deprecated. Use UpdateCustomerV2 instead.
   */
  updateCustomer?: GQLCustomerOutput;
  
  /**
   * Update customer address
   */
  updateCustomerAddress?: GQLCustomerAddress;
  updateCustomerEmail?: GQLCustomerOutput;
  
  /**
   * Update the customer's personal information
   */
  updateCustomerV2?: GQLCustomerOutput;
  
  /**
   * Updates one or more products in the specified wish list
   */
  updateProductsInWishlist?: GQLUpdateProductsInWishlistOutput;
  
  /**
   * Updates the email address of a quote.
   */
  updateQuoteEmail?: boolean;
}

export interface GQLAddBundleProductsToCartInput {
  cart_id: string;
  cart_items: Array<GQLBundleProductCartItemInput | null>;
}

export interface GQLBundleProductCartItemInput {
  bundle_options: Array<GQLBundleOptionInput | null>;
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  data: GQLCartItemInput;
}

export interface GQLBundleOptionInput {
  id: number;
  quantity: number;
  value: Array<string | null>;
}

export interface GQLCustomizableOptionInput {
  
  /**
   * The customizable option id of the product
   */
  id?: number;
  
  /**
   * The string value of the option
   */
  value_string: string;
}

export interface GQLCartItemInput {
  
  /**
   * An array of entered options for the base product, such as personalization text
   */
  entered_options?: Array<GQLEnteredOptionInput | null>;
  id?: GQLCartItemId;
  item_id?: number;
  
  /**
   * For child products, the SKU of its parent product
   */
  parent_sku?: string;
  product_option?: GQLProductOptionInput;
  product_type?: string;
  quantity: number;
  quote_id?: string;
  
  /**
   * The selected options for the base product, such as color or size with  unique
   * ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`,
   * `ConfigurableProductOptionsValues`, etc. objects
   */
  selected_options?: Array<string | null>;
  sku?: string;
}

/**
 * Defines a customer-entered option
 */
export interface GQLEnteredOptionInput {
  
  /**
   * The unique ID for a `CustomizableFieldOption`, `CustomizableFileOption`,
   * `CustomizableAreaOption`, etc. of `CustomizableOptionInterface` objects
   */
  uid: string;
  
  /**
   * Text the customer entered
   */
  value: string;
}

export interface GQLCartItemId {
  item_id?: number;
  sku?: string;
}

export interface GQLProductOptionInput {
  buy_request?: string;
  extension_attributes?: GQLExtensionsAttributeInput;
}

export interface GQLExtensionsAttributeInput {
  bundle_options?: Array<GQLBundleOptionInput | null>;
  configurable_item_options?: Array<GQLConfigurableItemOptionsInput | null>;
  customizable_options?: Array<GQLCustomizableOptionsInput | null>;
  customizable_options_multi?: Array<GQLCustomizableOptionsInput | null>;
  downloadable_product_links?: Array<GQLDownloadableProductLinksInput | null>;
  grouped_product_options?: Array<GQLCustomizableOptionsInput | null>;
}

export interface GQLConfigurableItemOptionsInput {
  option_id?: string;
  option_value?: number;
}

export interface GQLCustomizableOptionsInput {
  option_filename?: string;
  option_id: string;
  option_value?: string;
}

export interface GQLDownloadableProductLinksInput {
  link_id?: number;
}

export interface GQLAddBundleProductsToCartOutput {
  cart: GQLCart;
}

export interface GQLAddConfigurableProductsToCartInput {
  cart_id: string;
  cart_items: Array<GQLConfigurableProductCartItemInput | null>;
}

export interface GQLConfigurableProductCartItemInput {
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  data: GQLCartItemInput;
  
  /**
   * Configurable product SKU.
   */
  parent_sku?: string;
  
  /**
   * Deprecated. Use CartItemInput.sku instead.
   */
  variant_sku?: string;
}

export interface GQLAddConfigurableProductsToCartOutput {
  cart: GQLCart;
}

export interface GQLAddDownloadableProductsToCartInput {
  cart_id: string;
  cart_items: Array<GQLDownloadableProductCartItemInput | null>;
}

export interface GQLDownloadableProductCartItemInput {
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  data: GQLCartItemInput;
  downloadable_product_links?: Array<GQLDownloadableProductLinksInput | null>;
}

export interface GQLAddDownloadableProductsToCartOutput {
  cart: GQLCart;
}

export interface GQLAddProductsToCartOutput {
  
  /**
   * The cart after products have been added
   */
  cart: GQLCart;
  
  /**
   * An error encountered while adding an item to the cart.
   */
  user_errors: Array<GQLCartUserInputError | null>;
}

/**
 * An error encountered while adding an item to the the cart.
 */
export interface GQLCartUserInputError {
  
  /**
   * Cart-specific error code
   */
  code: GQLCartUserInputErrorType;
  
  /**
   * A localized error message
   */
  message: string;
}

export enum GQLCartUserInputErrorType {
  PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND',
  NOT_SALABLE = 'NOT_SALABLE',
  INSUFFICIENT_STOCK = 'INSUFFICIENT_STOCK',
  UNDEFINED = 'UNDEFINED'
}

export interface GQLAddProductsToCompareListInput {
  
  /**
   * An array of product IDs to add to the compare list
   */
  products: Array<string | null>;
  
  /**
   * The unique identifier of the compare list to modify
   */
  uid: string;
}

/**
 * Defines the items to add to a wish list
 */
export interface GQLWishlistItemInput {
  
  /**
   * User description of wish list item
   */
  description?: string;
  
  /**
   * An array of options that the customer entered
   */
  entered_options?: Array<GQLEnteredOptionInput | null>;
  
  /**
   * Id of the wishlist item
   */
  item_id?: string;
  
  /**
   * For complex product types, the SKU of the parent product
   */
  parent_sku?: string;
  
  /**
   * Configurable product options
   */
  product_option?: GQLProductOptionInput;
  
  /**
   * Quantity of the product
   */
  quantity?: number;
  
  /**
   * An array of strings corresponding to options the customer selected
   */
  selected_options?: Array<string | null>;
  
  /**
   * Sku of the product
   */
  sku?: string;
}

/**
 * Contains the customer's wish list and any errors encountered
 */
export interface GQLAddProductsToWishlistOutput {
  
  /**
   * An array of errors encountered while adding products to a wish list
   */
  user_errors: Array<GQLWishListUserInputError | null>;
  
  /**
   * Contains the wish list with all items that were successfully added
   */
  wishlist: GQLWishlist;
}

/**
 * An error encountered while performing operations with WishList.
 */
export interface GQLWishListUserInputError {
  
  /**
   * Wishlist-specific error code
   */
  code: GQLWishListUserInputErrorType;
  
  /**
   * A localized error message
   */
  message: string;
}

export enum GQLWishListUserInputErrorType {
  PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND',
  UNDEFINED = 'UNDEFINED'
}

export interface GQLAddSimpleProductsToCartInput {
  cart_id: string;
  cart_items: Array<GQLSimpleProductCartItemInput | null>;
}

export interface GQLSimpleProductCartItemInput {
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  data: GQLCartItemInput;
}

export interface GQLAddSimpleProductsToCartOutput {
  cart: GQLCart;
}

export interface GQLAddVirtualProductsToCartInput {
  cart_id: string;
  cart_items: Array<GQLVirtualProductCartItemInput | null>;
}

export interface GQLVirtualProductCartItemInput {
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  data: GQLCartItemInput;
}

export interface GQLAddVirtualProductsToCartOutput {
  cart: GQLCart;
}

export interface GQLAddWishlistItemsToCartOutput {
  
  /**
   * An array of errors encountered while adding products to the customer's cart
   */
  add_wishlist_items_to_cart_user_errors: Array<GQLWishlistCartUserInputError | null>;
  
  /**
   * Indicates whether the attempt to add items to the customer's cart was successful
   */
  status: boolean;
  
  /**
   * Contains the wish list with all items that were successfully added
   */
  wishlist: GQLWishlist;
}

export interface GQLWishlistCartUserInputError {
  
  /**
   * An error code that describes the error encountered
   */
  code: GQLWishlistCartUserInputErrorType;
  
  /**
   * A localized error message
   */
  message: string;
  
  /**
   * The unique ID of the `Wishlist` object containing an error
   */
  wishlistId: string;
  
  /**
   * The unique ID of the wish list item containing an error
   */
  wishlistItemId: string;
}

export enum GQLWishlistCartUserInputErrorType {
  PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND',
  NOT_SALABLE = 'NOT_SALABLE',
  INSUFFICIENT_STOCK = 'INSUFFICIENT_STOCK',
  UNDEFINED = 'UNDEFINED'
}

export interface GQLApplyCouponToCartInput {
  cart_id: string;
  coupon_code: string;
}

export interface GQLApplyCouponToCartOutput {
  cart: GQLCart;
}

export interface GQLAssignCompareListToCustomerOutput {
  
  /**
   * The contents of the customer's compare list
   */
  compare_list?: GQLCompareList;
  result: boolean;
}

export interface GQLCreateCustomerType {
  customer?: GQLCustomer;
  
  /**
   * Customer creation status
   */
  status?: string;
  
  /**
   * The customer token
   */
  token?: string;
}

export interface GQLContactForm {
  email?: string;
  message?: string;
  name?: string;
  telephone?: string;
}

export interface GQLContactFormResponse {
  message?: string;
}

export interface GQLCreateCompareListInput {
  
  /**
   * An array of product IDs to add to the compare list
   */
  products?: Array<string | null>;
}

export interface GQLCustomerInput {
  
  /**
   * The customer's date of birth
   */
  date_of_birth?: string;
  
  /**
   * Deprecated: Use `date_of_birth` instead
   */
  dob?: string;
  
  /**
   * The customer's email address. Required for customer creation
   */
  email?: string;
  
  /**
   * The customer's first name
   */
  firstname?: string;
  
  /**
   * The customer's gender (Male - 1, Female - 2)
   */
  gender?: number;
  
  /**
   * Indicates whether the customer is subscribed to the company's newsletter
   */
  is_subscribed?: boolean;
  
  /**
   * The customer's family name
   */
  lastname?: string;
  
  /**
   * The customer's middle name
   */
  middlename?: string;
  
  /**
   * The customer's password
   */
  password?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The customer's Tax/VAT number (for corporate customers)
   */
  taxvat?: string;
}

export interface GQLCustomerOutput {
  customer: GQLCustomer;
}

export interface GQLCustomerAddressInput {
  
  /**
   * The city or town
   */
  city?: string;
  
  /**
   * The customer's company
   */
  company?: string;
  
  /**
   * The customer's country
   */
  country_code?: GQLCountryCodeEnum;
  
  /**
   * Deprecated: use `country_code` instead.
   */
  country_id?: GQLCountryCodeEnum;
  
  /**
   * Deprecated: Custom attributes should not be put into container.
   */
  custom_attributes?: Array<GQLCustomerAddressAttributeInput | null>;
  
  /**
   * Indicates whether the address is the default billing address
   */
  default_billing?: boolean;
  
  /**
   * Indicates whether the address is the default shipping address
   */
  default_shipping?: boolean;
  
  /**
   * The fax number
   */
  fax?: string;
  
  /**
   * The first name of the person associated with the shipping/billing address
   */
  firstname?: string;
  
  /**
   * The family name of the person associated with the shipping/billing address
   */
  lastname?: string;
  
  /**
   * The middle name of the person associated with the shipping/billing address
   */
  middlename?: string;
  
  /**
   * The customer's ZIP or postal code
   */
  postcode?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * An object containing the region name, region code, and region ID
   */
  region?: GQLCustomerAddressRegionInput;
  
  /**
   * An array of strings that define the street number and name
   */
  street?: Array<string | null>;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The telephone number
   */
  telephone?: string;
  
  /**
   * The customer's Tax/VAT number (for corporate customers)
   */
  vat_id?: string;
}

export interface GQLCustomerAddressAttributeInput {
  
  /**
   * Attribute code
   */
  attribute_code: string;
  
  /**
   * Attribute value
   */
  value: string;
}

/**
 * CustomerAddressRegionInput defines the customer's state or province
 */
export interface GQLCustomerAddressRegionInput {
  
  /**
   * The state or province name
   */
  region?: string;
  
  /**
   * The address region code
   */
  region_code?: string;
  
  /**
   * The unique ID for a pre-defined region
   */
  region_id?: number;
}

export interface GQLCustomerCreateInput {
  
  /**
   * Indicates whether the customer has enabled remote shopping assistance
   */
  allow_remote_shopping_assistance?: boolean;
  
  /**
   * The customer's date of birth
   */
  date_of_birth?: string;
  
  /**
   * Deprecated: Use `date_of_birth` instead
   */
  dob?: string;
  
  /**
   * The customer's email address. Required for customer creation
   */
  email: string;
  
  /**
   * The customer's first name
   */
  firstname: string;
  
  /**
   * The customer's gender (Male - 1, Female - 2)
   */
  gender?: number;
  
  /**
   * Indicates whether the customer is subscribed to the company's newsletter
   */
  is_subscribed?: boolean;
  
  /**
   * The customer's family name
   */
  lastname: string;
  
  /**
   * The customer's middle name
   */
  middlename?: string;
  
  /**
   * The customer's password
   */
  password?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The customer's Tax/VAT number (for corporate customers)
   */
  taxvat?: string;
}

export interface GQLcreateEmptyCartInput {
  cart_id?: string;
}

export interface GQLcreateKlarnaPaymentsSessionInput {
  cart_id: string;
}

export interface GQLcreateKlarnaPaymentsSessionOutput {
  
  /**
   * The payment method client token
   */
  client_token?: string;
  
  /**
   * The payment method categories
   */
  payment_method_categories?: Array<GQLCategories | null>;
}

export interface GQLCategories {
  
  /**
   * The payment method assets
   */
  asset_urls?: Array<GQLAssets | null>;
  
  /**
   * The payment method identifier
   */
  identifier: string;
  
  /**
   * The payment method name
   */
  name: string;
}

export interface GQLAssets {
  
  /**
   * The payment method logo url (descriptive)
   */
  descriptive?: string;
  
  /**
   * The payment method logo url (standard)
   */
  standard?: string;
}

/**
 * Defines the attributes required to receive a payment token for Klarna payment method
 */
export interface GQLKlarnaTokenInput {
  
  /**
   * The unique ID that identifies the guest customer's cart
   */
  guest_cart_id?: string;
}

/**
 * Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods.
 */
export interface GQLPayflowProTokenInput {
  
  /**
   * The unique ID that identifies the customer's cart
   */
  cart_id: string;
  
  /**
   * A set of relative URLs that PayPal uses for callback.
   */
  urls: GQLPayflowProUrlInput;
}

/**
 * A set of relative URLs that PayPal will use in response to various actions
 * during the authorization process. Magento prepends the base URL to this value to
 * create a full URL. For example, if the full URL is
 * https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods.
 */
export interface GQLPayflowProUrlInput {
  
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer
   * cancels the transaction in order to choose a different payment method. If the
   * full URL to this page is https://www.example.com/paypal/action/cancel.html,
   * the relative URL is paypal/action/cancel.html.
   */
  cancel_url: string;
  
  /**
   * The relative URL of the transaction error page that PayPal will redirect to
   * upon payment error. If the full URL to this page is
   * https://www.example.com/paypal/action/error.html, the relative URL is
   * paypal/action/error.html.
   */
  error_url: string;
  
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to
   * upon payment success. If the full URL to this page is
   * https://www.example.com/paypal/action/return.html, the relative URL is
   * paypal/action/return.html.
   */
  return_url: string;
}

/**
 * Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods.
 */
export interface GQLCreatePayflowProTokenOutput {
  response_message: string;
  result: number;
  result_code: number;
  secure_token: string;
  secure_token_id: string;
}

/**
 * Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods.
 */
export interface GQLPaypalExpressTokenInput {
  
  /**
   * The unique ID that identifies the customer's cart
   */
  cart_id: string;
  
  /**
   * Payment method code
   */
  code: string;
  
  /**
   * Indicates whether the buyer selected the quick checkout button. The default value is false
   */
  express_button?: boolean;
  
  /**
   * A set of relative URLs that PayPal uses in response to various actions during the authorization process
   */
  urls: GQLPaypalExpressUrlsInput;
  
  /**
   * Indicates whether the buyer clicked the PayPal credit button. The default value is false
   */
  use_paypal_credit?: boolean;
}

/**
 * A set of relative URLs that PayPal will use in response to various actions
 * during the authorization process. Magento prepends the base URL to this value to
 * create a full URL. For example, if the full URL is
 * https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Express Checkout and Payments Standard
 * payment methods.
 */
export interface GQLPaypalExpressUrlsInput {
  
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer
   * cancels the transaction in order to choose a different payment method. If the
   * full URL to this page is https://www.example.com/paypal/action/cancel.html,
   * the relative URL is paypal/action/cancel.html.
   */
  cancel_url: string;
  
  /**
   * The relative URL of the page that PayPal will redirect to when the payment has
   * been put on hold for additional review. This condition mostly applies to ACH
   * transactions, and is not applicable to most PayPal solutions. If the full URL
   * to this page is https://www.example.com/paypal/action/success_pending.html,
   * the relative URL is paypal/action/success_pending.html. 
   */
  pending_url?: string;
  
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to
   * upon payment success. If the full URL to this page is
   * https://www.example.com/paypal/action/return.html, the relative URL is
   * paypal/action/return.html.
   */
  return_url: string;
  
  /**
   * The relative URL of the order confirmation page that PayPal will redirect to
   * when the payment is successful and additional confirmation is not needed. Not
   * applicable to most PayPal solutions. If the full URL to this page is
   * https://www.example.com/paypal/action/success.html, the relative URL is
   * paypal/action/success.html.
   */
  success_url?: string;
}

/**
 * Contains the token returned by PayPal and a set of URLs that allow the buyer to
 * authorize payment and adjust checkout details. Applies to Express Checkout and
 * Payments Standard payment methods.
 */
export interface GQLPaypalExpressTokenOutput {
  
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   */
  paypal_urls?: GQLPaypalExpressUrlList;
  
  /**
   * The token returned by PayPal
   */
  token?: string;
}

/**
 * A set of URLs that allow the buyer to authorize payment and adjust checkout
 * details for Express Checkout and Payments Standard transactions.
 */
export interface GQLPaypalExpressUrlList {
  
  /**
   * The PayPal URL that allows the buyer to edit their checkout details
   */
  edit?: string;
  
  /**
   * The URL to the PayPal login page
   */
  start?: string;
}

export interface GQLCreateProductReviewInput {
  
  /**
   * The customer's nickname. Defaults to the customer name, if logged in
   */
  nickname: string;
  
  /**
   * Ratings details by category. e.g price: 5, quality: 4 etc
   */
  ratings: Array<GQLProductReviewRatingInput | null>;
  
  /**
   * The SKU of the reviewed product
   */
  sku: string;
  
  /**
   * The summary (title) of the review
   */
  summary: string;
  
  /**
   * The review text.
   */
  text: string;
}

export interface GQLProductReviewRatingInput {
  
  /**
   * An encoded rating ID.
   */
  id: string;
  
  /**
   * An encoded rating value id.
   */
  value_id: string;
}

export interface GQLCreateProductReviewOutput {
  
  /**
   * Contains the completed product review
   */
  review: GQLProductReview;
}

export interface GQLDeleteCompareListOutput {
  
  /**
   * Indicates whether the compare list was successfully deleted
   */
  result: boolean;
}

export interface GQLDeletePaymentTokenOutput {
  customerPaymentTokens?: GQLCustomerPaymentTokens;
  result: boolean;
}

export interface GQLEstimateShippingCostsAddress {
  city?: string;
  country_id?: string;
  customer_id?: number;
  email?: string;
  firstname?: string;
  lastname?: string;
  postcode?: string;
  region?: string;
  region_code?: string;
  region_id?: number;
  same_as_billing?: number;
  street?: Array<string | null>;
  telephone?: string;
}

export interface GQLShippingMethod {
  amount?: number;
  available?: boolean;
  base_amount?: number;
  carrier_code?: string;
  carrier_title?: string;
  error_message?: string;
  method_code?: string;
  method_title?: string;
  price_excl_tax?: number;
  price_incl_tax?: number;
}

export interface GQLCustomerActionConfirmationType {
  
  /**
   * Customer email verification status
   */
  status?: string;
}

export interface GQLCustomerToken {
  
  /**
   * The customer token
   */
  token?: string;
}

export interface GQLGenerateCustomerTokenAsAdminInput {
  
  /**
   * The email address of the customer requesting remote shopping assistance
   */
  customer_email: string;
}

export interface GQLGenerateCustomerTokenAsAdminOutput {
  
  /**
   * The generated customer token
   */
  customer_token: string;
}

/**
 * Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods.
 */
export interface GQLPayflowProResponseInput {
  cart_id: string;
  paypal_payload: string;
}

export interface GQLPayflowProResponseOutput {
  cart: GQLCart;
}

export interface GQLPlaceOrderInput {
  cart_id: string;
}

export interface GQLPlaceOrderOutput {
  order: GQLOrder;
}

export interface GQLRemoveCouponFromCartInput {
  cart_id: string;
}

export interface GQLRemoveCouponFromCartOutput {
  cart?: GQLCart;
}

export interface GQLRemoveItemFromCartInput {
  cart_id: string;
  
  /**
   * Deprecated. Use `cart_item_uid` instead.
   */
  cart_item_id?: number;
  
  /**
   * Required field. The unique ID for a `CartItemInterface` object
   */
  cart_item_uid?: string;
}

export interface GQLRemoveItemFromCartOutput {
  cart: GQLCart;
}

export interface GQLRemoveProductsFromCompareListInput {
  
  /**
   * An array of product IDs to remove from the compare list
   */
  products: Array<string | null>;
  
  /**
   * The unique identifier of the compare list to modify
   */
  uid: string;
}

/**
 * Contains the customer's wish list and any errors encountered
 */
export interface GQLRemoveProductsFromWishlistOutput {
  
  /**
   * An array of errors encountered while deleting products from a wish list
   */
  user_errors: Array<GQLWishListUserInputError | null>;
  
  /**
   * Contains the wish list with after items were successfully deleted
   */
  wishlist: GQLWishlist;
}

export interface GQLReorderItemsOutput {
  
  /**
   * Contains detailed information about the customer's cart.
   */
  cart: GQLCart;
  
  /**
   * An array of reordering errors.
   */
  userInputErrors: Array<GQLCheckoutUserInputError | null>;
}

/**
 * An error encountered while adding an item the the cart.
 */
export interface GQLCheckoutUserInputError {
  
  /**
   * Checkout-specific error code
   */
  code: GQLCheckoutUserInputErrorCodes;
  
  /**
   * Localized error message
   */
  message: string;
  
  /**
   * Path to the input field that caused an error. See the GraphQL specification
   * about path errors for details: http://spec.graphql.org/draft/#sec-Errors
   */
  path: Array<string | null>;
}

export enum GQLCheckoutUserInputErrorCodes {
  REORDER_NOT_AVAILABLE = 'REORDER_NOT_AVAILABLE',
  PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND',
  NOT_SALABLE = 'NOT_SALABLE',
  INSUFFICIENT_STOCK = 'INSUFFICIENT_STOCK',
  UNDEFINED = 'UNDEFINED'
}

export interface GQLRevokeCustomerTokenOutput {
  result: boolean;
}

/**
 * Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods.
 */
export interface GQLS_PaypalExpressTokenInput {
  
  /**
   * Payment method code
   */
  code: string;
  
  /**
   * Indicates whether the buyer selected the quick checkout button. The default value is false
   */
  express_button?: boolean;
  
  /**
   * The unique ID that identifies the guest customer's cart
   */
  guest_cart_id?: string;
  
  /**
   * A set of relative URLs that PayPal uses in response to various actions during the authorization process
   */
  urls: GQLPaypalExpressUrlsInput;
  
  /**
   * Indicates whether the buyer clicked the PayPal credit button. The default value is false
   */
  use_paypal_credit?: boolean;
}

/**
 * Deprecated: use type `PaypalExpressTokenOutput` instead
 */
export interface GQLPaypalExpressToken {
  
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
   */
  paypal_urls?: GQLPaypalExpressUrlList;
  
  /**
   * The token returned by PayPal
   * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
   */
  token?: string;
}

export interface GQLResetPasswordType {
  
  /**
   * Customer reset status
   */
  status?: string;
  
  /**
   * The customer token
   */
  token?: string;
}

export interface GQLS_SetBillingAddressOnCartInput {
  billing_address: GQLBillingAddressInput;
  guest_cart_id?: string;
  same_as_shipping?: boolean;
}

export interface GQLBillingAddressInput {
  address?: GQLCartAddressInput;
  customer_address_id?: number;
  
  /**
   * Set billing address same as shipping
   */
  same_as_shipping?: boolean;
  
  /**
   * Deprecated: use `same_as_shipping` field instead
   */
  use_for_shipping?: boolean;
}

export interface GQLCartAddressInput {
  city: string;
  company?: string;
  country_code: string;
  firstname: string;
  lastname: string;
  postcode?: string;
  region?: string;
  region_id?: number;
  
  /**
   * Determines whether to save the address in the customer's address book. The default value is true
   */
  save_in_address_book?: boolean;
  street: Array<string | null>;
  telephone: string;
  vat_id?: string;
}

export interface GQLSetBillingAddressOnCartOutput {
  cart: GQLCart;
}

export interface GQLS_SetPaymentMethodOnCartInput {
  guest_cart_id?: string;
  payment_method: GQLPaymentMethodInput;
}

export interface GQLPaymentMethodInput {
  additional_data?: GQLPaymentMethodAdditionalData;
  braintree?: GQLBraintreeInput;
  braintree_cc_vault?: GQLBraintreeCcVaultInput;
  
  /**
   * Payment method code
   */
  code: string;
  
  /**
   * Required input for PayPal Hosted pro payments
   */
  hosted_pro?: GQLHostedProInput;
  klarna?: GQLKlarnaInput;
  klarna_kp?: GQLKlarnaInput;
  method?: string;
  
  /**
   * Required input for Payflow Express Checkout payments
   */
  payflow_express?: GQLPayflowExpressInput;
  
  /**
   * Required input for PayPal Payflow Link and Payments Advanced payments
   */
  payflow_link?: GQLPayflowLinkInput;
  
  /**
   * Required input type for PayPal Payflow Pro and Payment Pro payments
   */
  payflowpro?: GQLPayflowProInput;
  
  /**
   * Required input type for PayPal Payflow Pro vault payments
   */
  payflowpro_cc_vault?: GQLVaultTokenInput;
  
  /**
   * Required input for Express Checkout and Payments Standard payments
   */
  paypal_express?: GQLPaypalExpressInput;
  
  /**
   * Purchase order number
   */
  purchase_order_number?: string;
}

export interface GQLPaymentMethodAdditionalData {
  cc_save?: boolean;
  cc_stripejs_token?: string;
  payment_method_nonce?: string;
}

export interface GQLBraintreeInput {
  
  /**
   * Contains a fingerprint provided by Braintree JS SDK and should be sent with
   * sale transaction details to the Braintree payment gateway. Should be specified
   * only in a case if Kount (advanced fraud protection) is enabled for Braintree
   * payment integration.
   */
  device_data?: string;
  
  /**
   * States whether an entered by a customer credit/debit card should be tokenized
   * for later usage. Required only if Vault is enabled for Braintree payment integration.
   */
  is_active_payment_token_enabler: boolean;
  
  /**
   * The one-time payment token generated by Braintree payment gateway based on
   * card details. Required field to make sale transaction.
   */
  payment_method_nonce: string;
}

export interface GQLBraintreeCcVaultInput {
  device_data?: string;
  public_hash: string;
}

/**
 * A set of relative URLs that PayPal will use in response to various actions
 * during the authorization process. Magento prepends the base URL to this value to
 * create a full URL. For example, if the full URL is
 * https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payments Pro Hosted Solution payment method.
 */
export interface GQLHostedProInput {
  
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer
   * cancels the transaction in order to choose a different payment method. If the
   * full URL to this page is https://www.example.com/paypal/action/cancel.html,
   * the relative URL is paypal/action/cancel.html.
   */
  cancel_url: string;
  
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to
   * upon payment success. If the full URL to this page is
   * https://www.example.com/paypal/action/return.html, the relative URL is
   * paypal/action/return.html.
   */
  return_url: string;
}

export interface GQLKlarnaInput {
  
  /**
   * The authorization token must be provided to set any Klarna Payments method
   */
  authorization_token: string;
}

/**
 * Required input for Payflow Express Checkout payments
 */
export interface GQLPayflowExpressInput {
  
  /**
   * The unique ID of the PayPal user
   */
  payer_id: string;
  
  /**
   * The token returned by the createPaypalExpressToken mutation
   */
  token: string;
}

/**
 * A set of relative URLs that PayPal will use in response to various actions
 * during the authorization process. Magento prepends the base URL to this value to
 * create a full URL. For example, if the full URL is
 * https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods.
 */
export interface GQLPayflowLinkInput {
  
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer
   * cancels the transaction in order to choose a different payment method. If the
   * full URL to this page is https://www.example.com/paypal/action/cancel.html,
   * the relative URL is paypal/action/cancel.html.
   */
  cancel_url: string;
  
  /**
   * The relative URL of the transaction error page that PayPal will redirect to
   * upon payment error. If the full URL to this page is
   * https://www.example.com/paypal/action/error.html, the relative URL is
   * paypal/action/error.html.
   */
  error_url: string;
  
  /**
   * The relative URL of the order confirmation page that PayPal will redirect to
   * when the payment is successful and additional confirmation is not needed. If
   * the full URL to this page is
   * https://www.example.com/paypal/action/return.html, the relative URL is
   * paypal/action/return.html.
   */
  return_url: string;
}

/**
 * Required input for Payflow Pro and Payments Pro payment methods.
 */
export interface GQLPayflowProInput {
  
  /**
   * Required input for credit card related information
   */
  cc_details: GQLCreditCardDetailsInput;
  
  /**
   * States whether details about the customer's credit/debit card should be
   * tokenized for later usage. Required only if Vault is enabled for PayPal
   * Payflow Pro payment integration.
   */
  is_active_payment_token_enabler?: boolean;
}

/**
 * Required fields for Payflow Pro and Payments Pro credit card payments
 */
export interface GQLCreditCardDetailsInput {
  
  /**
   * Credit card expiration month
   */
  cc_exp_month: number;
  
  /**
   * Credit card expiration year
   */
  cc_exp_year: number;
  
  /**
   * Last 4 digits of the credit card
   */
  cc_last_4: number;
  
  /**
   * Credit card type
   */
  cc_type: string;
}

/**
 * Required input for payment methods with Vault support.
 */
export interface GQLVaultTokenInput {
  
  /**
   * The public hash of the payment token
   */
  public_hash: string;
}

/**
 * Required input for Express Checkout and Payments Standard payments
 */
export interface GQLPaypalExpressInput {
  
  /**
   * The unique ID of the PayPal user
   */
  payer_id: string;
  
  /**
   * The token returned by the createPaypalExpressToken mutation
   */
  token: string;
}

export interface GQLSetPaymentMethodOnCartOutput {
  cart: GQLCart;
}

export interface GQLShareWishlistInput {
  
  /**
   * Receiver emails
   */
  emails: Array<string | null>;
  
  /**
   * Sharing message
   */
  message?: string;
}

export interface GQLSaveAddressInformation {
  billing_address: GQLAddressInput;
  shipping_address: GQLAddressInput;
  shipping_carrier_code?: string;
  shipping_method_code?: string;
}

export interface GQLAddressInput {
  city?: string;
  company?: string;
  country_id?: string;
  email?: string;
  extension_attributes?: Array<GQLAddressExtensionAttributes | null>;
  firstname?: string;
  lastname?: string;
  method?: string;
  postcode?: string;
  region?: string;
  region_code?: string;
  region_id?: number;
  street?: Array<string | null>;
  telephone?: string;
  vat_id?: string;
}

export interface GQLAddressExtensionAttributes {
  attribute_code?: string;
  value?: string;
}

export interface GQLPaymentDetails {
  payment_methods?: Array<GQLPaymentMethod | null>;
  totals?: GQLPaymentTotals;
}

export interface GQLPaymentTotals extends GQLTotalsObject {
  applied_rule_ids?: string;
  base_currency_code?: string;
  base_discount_amount?: number;
  base_grand_total?: number;
  base_shipping_amount?: number;
  base_shipping_discount_amount?: number;
  base_shipping_incl_tax?: number;
  base_shipping_tax_amount?: number;
  base_subtotal?: number;
  base_subtotal_with_discount?: number;
  base_tax_amount?: number;
  coupon_code?: string;
  customer_is_guest?: boolean;
  customer_tax_class_id?: number;
  discount_amount?: number;
  grand_total?: number;
  is_in_store_pickup_available?: boolean;
  items?: Array<GQLTotalsItem | null>;
  items_count?: number;
  items_qty?: number;
  quote_currency_code?: string;
  shipping_amount?: number;
  shipping_discount_amount?: number;
  shipping_incl_tax?: number;
  shipping_method?: string;
  shipping_tax_amount?: number;
  store_id?: number;
  subtotal?: number;
  subtotal_incl_tax?: number;
  subtotal_with_discount?: number;
  tax_amount?: number;
  weee_tax_applied_amount?: number;
}

export interface GQLSendEmailToFriendInput {
  product_id: number;
  recipients: Array<GQLSendEmailToFriendRecipientInput | null>;
  sender: GQLSendEmailToFriendSenderInput;
}

export interface GQLSendEmailToFriendRecipientInput {
  email: string;
  name: string;
}

export interface GQLSendEmailToFriendSenderInput {
  email: string;
  message: string;
  name: string;
}

export interface GQLSendEmailToFriendOutput {
  recipients?: Array<GQLSendEmailToFriendRecipient | null>;
  sender?: GQLSendEmailToFriendSender;
}

export interface GQLSendEmailToFriendRecipient {
  email: string;
  name: string;
}

export interface GQLSendEmailToFriendSender {
  email: string;
  message: string;
  name: string;
}

export interface GQLSetBillingAddressOnCartInput {
  billing_address: GQLBillingAddressInput;
  cart_id: string;
}

export interface GQLSetGuestEmailOnCartInput {
  cart_id: string;
  email: string;
}

export interface GQLSetGuestEmailOnCartOutput {
  cart: GQLCart;
}

export interface GQLSetPaymentMethodAndPlaceOrderInput {
  cart_id: string;
  payment_method: GQLPaymentMethodInput;
}

export interface GQLSetPaymentMethodOnCartInput {
  cart_id: string;
  payment_method: GQLPaymentMethodInput;
}

export interface GQLSetShippingAddressesOnCartInput {
  cart_id: string;
  shipping_addresses: Array<GQLShippingAddressInput | null>;
}

export interface GQLShippingAddressInput {
  address?: GQLCartAddressInput;
  customer_address_id?: number;
  customer_notes?: string;
  
  /**
   * The code of Pickup Location which will be used for In-Store Pickup.
   */
  pickup_location_code?: string;
}

export interface GQLSetShippingAddressesOnCartOutput {
  cart: GQLCart;
}

export interface GQLSetShippingMethodsOnCartInput {
  cart_id: string;
  shipping_methods: Array<GQLShippingMethodInput | null>;
}

export interface GQLShippingMethodInput {
  carrier_code: string;
  method_code: string;
}

export interface GQLSetShippingMethodsOnCartOutput {
  cart: GQLCart;
}

export interface GQLSubscribeEmailToNewsletterOutput {
  
  /**
   * Returns the status of the subscription request
   */
  status?: GQLSubscriptionStatusesEnum;
}

export enum GQLSubscriptionStatusesEnum {
  NOT_ACTIVE = 'NOT_ACTIVE',
  SUBSCRIBED = 'SUBSCRIBED',
  UNSUBSCRIBED = 'UNSUBSCRIBED',
  UNCONFIRMED = 'UNCONFIRMED'
}

export interface GQLUpdateCartItemsInput {
  cart_id: string;
  cart_items: Array<GQLCartItemUpdateInput | null>;
}

export interface GQLCartItemUpdateInput {
  
  /**
   * Deprecated. Use `cart_item_uid` instead.
   */
  cart_item_id?: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  cart_item_uid?: string;
  customizable_options?: Array<GQLCustomizableOptionInput | null>;
  
  /**
   * Gift message details for the cart item
   */
  gift_message?: GQLGiftMessageInput;
  quantity?: number;
}

/**
 * Contains the text of a gift message, its sender, and recipient
 */
export interface GQLGiftMessageInput {
  
  /**
   * Sender name
   */
  from: string;
  
  /**
   * Gift message text
   */
  message: string;
  
  /**
   * Recipient name
   */
  to: string;
}

export interface GQLUpdateCartItemsOutput {
  cart: GQLCart;
}

export interface GQLCustomerUpdateInput {
  
  /**
   * Indicates whether the customer has enabled remote shopping assistance
   */
  allow_remote_shopping_assistance?: boolean;
  
  /**
   * The customer's date of birth
   */
  date_of_birth?: string;
  
  /**
   * Deprecated: Use `date_of_birth` instead
   */
  dob?: string;
  
  /**
   * The customer's first name
   */
  firstname?: string;
  
  /**
   * The customer's gender (Male - 1, Female - 2)
   */
  gender?: number;
  
  /**
   * Indicates whether the customer is subscribed to the company's newsletter
   */
  is_subscribed?: boolean;
  
  /**
   * The customer's family name
   */
  lastname?: string;
  
  /**
   * The customer's middle name
   */
  middlename?: string;
  
  /**
   * An honorific, such as Dr., Mr., or Mrs.
   */
  prefix?: string;
  
  /**
   * A value such as Sr., Jr., or III
   */
  suffix?: string;
  
  /**
   * The customer's Tax/VAT number (for corporate customers)
   */
  taxvat?: string;
}

/**
 * Defines updates to items in a wish list
 */
export interface GQLWishlistItemUpdateInput {
  
  /**
   * Customer-entered comments about the item
   */
  description?: string;
  
  /**
   * An array of options that the customer entered
   */
  entered_options?: Array<GQLEnteredOptionInput | null>;
  
  /**
   * The new amount or number of this item
   */
  quantity?: number;
  
  /**
   * An array of strings corresponding to options the customer selected
   */
  selected_options?: Array<string | null>;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  wishlist_item_id: string;
}

/**
 * Contains the customer's wish list and any errors encountered
 */
export interface GQLUpdateProductsInWishlistOutput {
  
  /**
   * An array of errors encountered while updating products in a wish list
   */
  user_errors: Array<GQLWishListUserInputError | null>;
  
  /**
   * Contains the wish list with all items that were successfully updated
   */
  wishlist: GQLWishlist;
}

export interface GQLAvailabilityResponseType {
  isAvailable?: boolean;
}

export interface GQLBundleCartItem extends GQLCartItemInterface {
  bundle_options: Array<GQLSelectedBundleOption | null>;
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The entered gift message for the cart item
   */
  gift_message?: GQLGiftMessage;
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

export interface GQLBundleCreditMemoItem extends GQLCreditMemoItemInterface {
  
  /**
   * A list of bundle options that are assigned to the bundle product
   */
  bundle_options?: Array<GQLItemSelectedBundleOption | null>;
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `CreditMemoItemInterface` object
   */
  id: string;
  
  /**
   * The order item the credit memo is applied to
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/**
 * A list of options of the selected bundle product
 */
export interface GQLItemSelectedBundleOption {
  
  /**
   * The unique ID for a `ItemSelectedBundleOption` object
   * @deprecated Use `uid` instead
   */
  id: string;
  
  /**
   * The label of the option
   */
  label: string;
  
  /**
   * The unique ID for a `ItemSelectedBundleOption` object
   */
  uid: string;
  
  /**
   * A list of products that represent the values of the parent option
   */
  values?: Array<GQLItemSelectedBundleOptionValue | null>;
}

/**
 * A list of values for the selected bundle product
 */
export interface GQLItemSelectedBundleOptionValue {
  
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object
   * @deprecated Use `uid` instead
   */
  id: string;
  
  /**
   * The price of the child bundle product
   */
  price: GQLMoney;
  
  /**
   * The name of the child bundle product
   */
  product_name: string;
  
  /**
   * The SKU of the child bundle product
   */
  product_sku: string;
  
  /**
   * Indicates how many of this bundle product were ordered
   */
  quantity: number;
  
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object
   */
  uid: string;
}

export interface GQLBundleInvoiceItem extends GQLInvoiceItemInterface {
  
  /**
   * A list of bundle options that are assigned to the bundle product
   */
  bundle_options?: Array<GQLItemSelectedBundleOption | null>;
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `InvoiceItemInterface` object
   */
  id: string;
  
  /**
   * Contains details about an individual order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/**
 * BundleItem defines an individual item in a bundle product.
 */
export interface GQLBundleItem {
  
  /**
   * An ID assigned to each type of item in a bundle product.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * An array of additional options for this bundle item.
   */
  options?: Array<GQLBundleItemOption | null>;
  
  /**
   * he relative position of this item compared to the other bundle items.
   */
  position?: number;
  
  /**
   * Indicates whether the item must be included in the bundle.
   */
  required?: boolean;
  
  /**
   * The SKU of the bundle product.
   */
  sku?: string;
  
  /**
   * The display name of the item.
   */
  title?: string;
  
  /**
   * The input type that the customer uses to select the item. Examples include radio button and checkbox.
   */
  type?: string;
  
  /**
   * The unique ID for a `BundleItem` object.
   */
  uid?: string;
}

/**
 * BundleItemOption defines characteristics and options for a specific bundle item.
 */
export interface GQLBundleItemOption {
  
  /**
   * Indicates whether the customer can change the number of items for this option.
   */
  can_change_quantity?: boolean;
  
  /**
   * The ID assigned to the bundled item option.
   * @deprecated Use `uid` instead
   */
  id?: number;
  
  /**
   * Indicates whether this option is the default option.
   */
  is_default?: boolean;
  
  /**
   * The text that identifies the bundled item option.
   */
  label?: string;
  
  /**
   * When a bundle item contains multiple options, the relative position of this option compared to the other options.
   */
  position?: number;
  
  /**
   * The price of the selected option.
   */
  price?: number;
  
  /**
   * One of FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * Contains details about this product option.
   */
  product?: GQLProductInterface;
  
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated The `qty` is deprecated. Use `quantity` instead.
   */
  qty?: number;
  
  /**
   * Indicates the quantity of this specific bundle item.
   */
  quantity?: number;
  
  /**
   * The unique ID for a `BundleItemOption` object.
   */
  uid: string;
}

/**
 * Represents order bundle item options
 */
export interface GQLBundleOptions {
  items?: Array<GQLBundleOption | null>;
  
  /**
   * Describes type of bundle option (radio, checkbox and etc)
   */
  type: string;
}

export interface GQLBundleOrderItem extends GQLOrderItemInterface {
  
  /**
   * A list of bundle options that are assigned to the bundle product
   */
  bundle_options?: Array<GQLItemSelectedBundleOption | null>;
  
  /**
   * The final discount information for the product
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The entered option for the base product, such as a logo or image
   */
  entered_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The unique ID for a `OrderItemInterface` object
   */
  id: string;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price of the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The type of product, such as simple, configurable, etc.
   */
  product_type?: string;
  
  /**
   * URL key of the base product
   */
  product_url_key?: string;
  
  /**
   * The number of canceled items
   */
  quantity_canceled?: number;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The number of units ordered for this item
   */
  quantity_ordered?: number;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The number of returned items
   */
  quantity_returned?: number;
  
  /**
   * The number of shipped items
   */
  quantity_shipped?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
  
  /**
   * The selected options for the base product, such as color or size
   */
  selected_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The status of the order item
   */
  status?: string;
}

/**
 * Defines basic features of a bundle product and contains multiple BundleItems
 */
export interface GQLBundleProduct extends GQLProductInterface, GQLRoutableInterface, GQLPhysicalProductInterface, GQLCustomizableProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Additional pricing info specific for bundle products
   */
  bundle_options?: Array<GQLBundleOption | null>;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  
  /**
   * Indicates whether the bundle product has a dynamic price.
   */
  dynamic_price?: boolean;
  
  /**
   * Indicates whether the bundle product has a dynamic SK.
   */
  dynamic_sku?: boolean;
  
  /**
   * Indicates whether the bundle product has a dynamically calculated weight.
   */
  dynamic_weight?: boolean;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  
  /**
   * An array containing information about individual bundle items.
   */
  items?: Array<GQLBundleItem | null>;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * One of PRICE_RANGE or AS_LOW_AS.
   */
  price_view?: GQLPriceViewEnum;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  
  /**
   * Indicates whether to ship bundle items together or individually.
   */
  ship_bundle_items?: GQLShipBundleItemsEnum;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: number;
  yes_no?: number;
}

/**
 * PhysicalProductInterface contains attributes specific to tangible products.
 */
export interface GQLPhysicalProductInterface {
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: number;
}

/** Use this to resolve interface type PhysicalProductInterface */
export type GQLPossiblePhysicalProductInterfaceTypeNames =
'BundleProduct' |
'ConfigurableProduct' |
'SimpleProduct' |
'GroupedProduct';

export interface GQLPhysicalProductInterfaceNameMap {
  PhysicalProductInterface: GQLPhysicalProductInterface;
  BundleProduct: GQLBundleProduct;
  ConfigurableProduct: GQLConfigurableProduct;
  SimpleProduct: GQLSimpleProduct;
  GroupedProduct: GQLGroupedProduct;
}

/**
 * CustomizableProductInterface contains information about customizable product options.
 */
export interface GQLCustomizableProductInterface {
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
}

/** Use this to resolve interface type CustomizableProductInterface */
export type GQLPossibleCustomizableProductInterfaceTypeNames =
'BundleProduct' |
'ConfigurableProduct' |
'SimpleProduct' |
'DownloadableProduct' |
'VirtualProduct';

export interface GQLCustomizableProductInterfaceNameMap {
  CustomizableProductInterface: GQLCustomizableProductInterface;
  BundleProduct: GQLBundleProduct;
  ConfigurableProduct: GQLConfigurableProduct;
  SimpleProduct: GQLSimpleProduct;
  DownloadableProduct: GQLDownloadableProduct;
  VirtualProduct: GQLVirtualProduct;
}

/**
 * The CustomizableOptionInterface contains basic information about a customizable
 * option. It can be implemented by several types of configurable options.
 */
export interface GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
}

/** Use this to resolve interface type CustomizableOptionInterface */
export type GQLPossibleCustomizableOptionInterfaceTypeNames =
'CustomizableAreaOption' |
'CustomizableCheckboxOption' |
'CustomizableDateOption' |
'CustomizableDropDownOption' |
'CustomizableFieldOption' |
'CustomizableFileOption' |
'CustomizableMultipleOption' |
'CustomizableRadioOption';

export interface GQLCustomizableOptionInterfaceNameMap {
  CustomizableOptionInterface: GQLCustomizableOptionInterface;
  CustomizableAreaOption: GQLCustomizableAreaOption;
  CustomizableCheckboxOption: GQLCustomizableCheckboxOption;
  CustomizableDateOption: GQLCustomizableDateOption;
  CustomizableDropDownOption: GQLCustomizableDropDownOption;
  CustomizableFieldOption: GQLCustomizableFieldOption;
  CustomizableFileOption: GQLCustomizableFileOption;
  CustomizableMultipleOption: GQLCustomizableMultipleOption;
  CustomizableRadioOption: GQLCustomizableRadioOption;
}

/**
 * This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range.
 */
export enum GQLPriceViewEnum {
  PRICE_RANGE = 'PRICE_RANGE',
  AS_LOW_AS = 'AS_LOW_AS'
}

/**
 * This enumeration defines whether bundle items must be shipped together.
 */
export enum GQLShipBundleItemsEnum {
  TOGETHER = 'TOGETHER',
  SEPARATELY = 'SEPARATELY'
}

export interface GQLBundleShipmentItem extends GQLShipmentItemInterface {
  
  /**
   * A list of bundle options that are assigned to the bundle product
   */
  bundle_options?: Array<GQLItemSelectedBundleOption | null>;
  
  /**
   * The unique ID for a `ShipmentItemInterface` object
   */
  id: string;
  
  /**
   * Associated order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * Name of the base product
   */
  product_name?: string;
  
  /**
   * Sale price for the base product
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * Number of shipped items
   */
  quantity_shipped: number;
}

export interface GQLBundleWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * An array containing information about the selected bundle items
   */
  bundle_options?: Array<GQLSelectedBundleOption | null>;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

export interface GQLColorSwatchData extends GQLSwatchDataInterface {
  
  /**
   * Value of swatch item (HEX color code, image link or textual value)
   */
  value?: string;
}

export interface GQLSwatchDataInterface {
  
  /**
   * Value of swatch item (HEX color code, image link or textual value)
   */
  value?: string;
}

/** Use this to resolve interface type SwatchDataInterface */
export type GQLPossibleSwatchDataInterfaceTypeNames =
'ColorSwatchData' |
'ImageSwatchData' |
'TextSwatchData';

export interface GQLSwatchDataInterfaceNameMap {
  SwatchDataInterface: GQLSwatchDataInterface;
  ColorSwatchData: GQLColorSwatchData;
  ImageSwatchData: GQLImageSwatchData;
  TextSwatchData: GQLTextSwatchData;
}

/**
 * ConfigurableAttributeOption contains the value_index (and other related
 * information) assigned to a configurable product option
 */
export interface GQLConfigurableAttributeOption {
  
  /**
   * The ID assigned to the attribute
   */
  code?: string;
  
  /**
   * A string that describes the configurable attribute option
   */
  label?: string;
  
  /**
   * The unique ID for a `ConfigurableAttributeOption` object
   */
  uid: string;
  
  /**
   * A unique index number assigned to the configurable product option
   */
  value_index?: number;
}

export interface GQLConfigurableCartItem extends GQLCartItemInterface {
  configurable_options: Array<GQLSelectedConfigurableOption | null>;
  
  /**
   * Product details of the cart item
   */
  configured_variant: GQLProductInterface;
  customizable_options?: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The entered gift message for the cart item
   */
  gift_message?: GQLGiftMessage;
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

export interface GQLSelectedConfigurableOption {
  
  /**
   * The unique ID for a `ConfigurableProductOptions` object
   */
  configurable_product_option_uid: string;
  
  /**
   * The unique ID for a `ConfigurableProductOptionsValues` object
   */
  configurable_product_option_value_uid: string;
  
  /**
   * 
   * @deprecated Use SelectedConfigurableOption.configurable_product_option_uid instead
   */
  id: number;
  option_label: string;
  
  /**
   * 
   * @deprecated Use SelectedConfigurableOption.configurable_product_option_value_uid instead
   */
  value_id: number;
  value_label: string;
}

/**
 * Configurable option available for further selection based on current selection.
 */
export interface GQLConfigurableOptionAvailableForSelection {
  
  /**
   * Attribute code that uniquely identifies configurable option.
   */
  attribute_code: string;
  
  /**
   * Configurable option values available for further selection.
   */
  option_value_uids: Array<string | null>;
}

/**
 * ConfigurableProduct defines basic features of a configurable product and its simple product variants
 */
export interface GQLConfigurableProduct extends GQLProductInterface, GQLRoutableInterface, GQLPhysicalProductInterface, GQLCustomizableProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * An array of linked simple product items
   */
  configurable_options?: Array<GQLConfigurableProductOptions | null>;
  
  /**
   * Specified configurable product options selection
   */
  configurable_product_options_selection?: GQLConfigurableProductOptionsSelection;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of variants of products
   */
  variants?: Array<GQLConfigurableVariant | null>;
  
  /**
   * An array of variants of products, optimized version for PLP
   */
  variants_plp?: Array<GQLConfigurableVariant | null>;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: number;
  yes_no?: number;
}

/**
 * ConfigurableProductOptions defines configurable attributes for the specified product
 */
export interface GQLConfigurableProductOptions {
  
  /**
   * A string that identifies the attribute
   */
  attribute_code?: string;
  
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id?: string;
  
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id_v2?: number;
  
  /**
   * The unique ID for a `Attribute` object
   */
  attribute_uid: string;
  
  /**
   * The configurable option ID number assigned by the system
   * @deprecated Use uid instead
   */
  id?: number;
  
  /**
   * A string that describes the configurable product option, which is displayed on the UI
   */
  label?: string;
  
  /**
   * A number that indicates the order in which the attribute is displayed
   */
  position?: number;
  
  /**
   * This is the same as a product's id field
   * @deprecated `product_id` is not needed and can be obtained from it's parent
   */
  product_id?: number;
  
  /**
   * The unique ID for a `ConfigurableProductOptions` object
   */
  uid: string;
  
  /**
   * Indicates whether the option is the default
   */
  use_default?: boolean;
  
  /**
   * An array that defines the value_index codes assigned to the configurable product
   */
  values?: Array<GQLConfigurableProductOptionsValues | null>;
}

/**
 * ConfigurableProductOptionsValues contains the index number assigned to a configurable product option
 */
export interface GQLConfigurableProductOptionsValues {
  
  /**
   * The label of the product on the default store
   */
  default_label?: string;
  
  /**
   * The label of the product
   */
  label?: string;
  
  /**
   * The label of the product on the current store
   */
  store_label?: string;
  
  /**
   * Swatch data for configurable product option
   */
  swatch_data?: GQLSwatchDataInterface;
  
  /**
   * The unique ID for a `ConfigurableProductOptionsValues` object
   */
  uid?: string;
  
  /**
   * Indicates whether to use the default_label
   */
  use_default_value?: boolean;
  
  /**
   * A unique index number assigned to the configurable product option
   * @deprecated Use `uid` instead
   */
  value_index?: number;
}

/**
 * Metadata corresponding to the configurable options selection.
 */
export interface GQLConfigurableProductOptionsSelection {
  
  /**
   * Configurable options available for further selection based on current selection.
   */
  configurable_options?: Array<GQLConfigurableProductOption | null>;
  
  /**
   * Product images and videos corresponding to the specified configurable options selection.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * Configurable options available for further selection based on current selection.
   */
  options_available_for_selection?: Array<GQLConfigurableOptionAvailableForSelection | null>;
  
  /**
   * Variant represented by the specified configurable options selection. It is
   * expected to be null, until selections are made for each configurable option.
   */
  variant?: GQLSimpleProduct;
}

export interface GQLConfigurableProductOption {
  attribute_code: string;
  label: string;
  uid: string;
  values?: Array<GQLConfigurableProductOptionValue | null>;
}

export interface GQLConfigurableProductOptionValue {
  is_available: boolean;
  is_use_default: boolean;
  label: string;
  swatch?: GQLSwatchDataInterface;
  uid: string;
}

/**
 * A simple product is tangible and is usually sold in single units or in fixed quantities
 */
export interface GQLSimpleProduct extends GQLProductInterface, GQLRoutableInterface, GQLPhysicalProductInterface, GQLCustomizableProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: number;
  yes_no?: number;
}

/**
 * An array containing all the simple product variants of a configurable product
 */
export interface GQLConfigurableVariant {
  attributes?: Array<GQLConfigurableAttributeOption | null>;
  product?: GQLSimpleProduct;
}

/**
 * A configurable product wish list item
 */
export interface GQLConfigurableWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * The SKU of the simple product corresponding to a set of selected configurable options
   */
  child_sku: string;
  
  /**
   * An array of selected configurable options
   */
  configurable_options?: Array<GQLSelectedConfigurableOption | null>;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

export interface GQLCreditMemoItem extends GQLCreditMemoItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `CreditMemoItemInterface` object
   */
  id: string;
  
  /**
   * The order item the credit memo is applied to
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/**
 * CustomizableAreaOption contains information about a text area that is defined as part of a customizable option.
 */
export interface GQLCustomizableAreaOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * The Stock Keeping Unit of the base product.
   */
  product_sku?: string;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An object that defines a text area.
   */
  value?: GQLCustomizableAreaValue;
}

/**
 * CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area.
 */
export interface GQLCustomizableAreaValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The maximum number of characters that can be entered for this customizable option.
   */
  max_characters?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The unique ID for a `CustomizableAreaValue` object.
   */
  uid: string;
}

/**
 * CustomizableCheckbbixOption contains information about a set of checkbox values
 * that are defined as part of a customizable option.
 */
export interface GQLCustomizableCheckboxOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An array that defines a set of checkbox values.
   */
  value?: Array<GQLCustomizableCheckboxValue | null>;
}

/**
 * CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values.
 */
export interface GQLCustomizableCheckboxValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The ID assigned to the value.
   */
  option_type_id?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The order in which the checkbox value is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  
  /**
   * The unique ID for a `CustomizableCheckboxValue` object.
   */
  uid: string;
}

/**
 * CustomizableDateOption contains information about a date picker that is defined as part of a customizable option.
 */
export interface GQLCustomizableDateOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * The Stock Keeping Unit of the base product.
   */
  product_sku?: string;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An object that defines a date field in a customizable option.
   */
  value?: GQLCustomizableDateValue;
}

/**
 * CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker.
 */
export interface GQLCustomizableDateValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * DATE, DATE_TIME or TIME
   */
  type?: GQLCustomizableDateTypeEnum;
  
  /**
   * The unique ID for a `CustomizableDateValue` object.
   */
  uid: string;
}

/**
 * This enumeration customizable date type.
 */
export enum GQLCustomizableDateTypeEnum {
  DATE = 'DATE',
  DATE_TIME = 'DATE_TIME',
  TIME = 'TIME'
}

/**
 * CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option.
 */
export interface GQLCustomizableDropDownOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An array that defines the set of options for a drop down menu.
   */
  value?: Array<GQLCustomizableDropDownValue | null>;
}

/**
 * CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu.
 */
export interface GQLCustomizableDropDownValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The ID assigned to the value.
   */
  option_type_id?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  
  /**
   * The unique ID for a `CustomizableDropDownValue` object.
   */
  uid: string;
}

/**
 * CustomizableFieldOption contains information about a text field that is defined as part of a customizable option.
 */
export interface GQLCustomizableFieldOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * The Stock Keeping Unit of the base product.
   */
  product_sku?: string;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An object that defines a text field.
   */
  value?: GQLCustomizableFieldValue;
}

/**
 * CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field.
 */
export interface GQLCustomizableFieldValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * Option file extensions (If type file).
   */
  file_extension?: string;
  
  /**
   * The maximum number of characters that can be entered for this customizable option.
   */
  max_characters?: number;
  
  /**
   * The price of the custom value.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The unique ID for a `CustomizableFieldValue` object.
   */
  uid: string;
}

/**
 * CustomizableFileOption contains information about a file picker that is defined as part of a customizable option.
 */
export interface GQLCustomizableFileOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * The Stock Keeping Unit of the base product.
   */
  product_sku?: string;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An object that defines a file value.
   */
  value?: GQLCustomizableFileValue;
}

/**
 * CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker.
 */
export interface GQLCustomizableFileValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The file extension to accept.
   */
  file_extension?: string;
  
  /**
   * The maximum width of an image.
   */
  image_size_x?: number;
  
  /**
   * The maximum height of an image.
   */
  image_size_y?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The unique ID for a `CustomizableFileValue` object.
   */
  uid: string;
}

/**
 * CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option.
 */
export interface GQLCustomizableMultipleOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An array that defines the set of options for a multiselect.
   */
  value?: Array<GQLCustomizableMultipleValue | null>;
}

/**
 * CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect.
 */
export interface GQLCustomizableMultipleValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The ID assigned to the value.
   */
  option_type_id?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  
  /**
   * The unique ID for a `CustomizableMultipleValue` object.
   */
  uid: string;
}

/**
 * CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option.
 */
export interface GQLCustomizableRadioOption extends GQLCustomizableOptionInterface {
  
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: number;
  
  /**
   * Indicates whether the option is required.
   */
  required?: boolean;
  
  /**
   * The order in which the option is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  type?: string;
  
  /**
   * The unique ID for a `CustomizableOptionInterface` object.
   */
  uid: string;
  
  /**
   * An array that defines a set of radio buttons.
   */
  value?: Array<GQLCustomizableRadioValue | null>;
}

/**
 * CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons.
 */
export interface GQLCustomizableRadioValue {
  
  /**
   * Currency code for the option.
   */
  currency?: string;
  
  /**
   * The ID assigned to the value.
   */
  option_type_id?: number;
  
  /**
   * The price assigned to this option.
   */
  price?: number;
  
  /**
   * Option value price excluding tax.
   */
  priceExclTax?: number;
  
  /**
   * Option value price including tax.
   */
  priceInclTax?: number;
  
  /**
   * FIXED, PERCENT, or DYNAMIC.
   */
  price_type?: GQLPriceTypeEnum;
  
  /**
   * The Stock Keeping Unit for this option.
   */
  sku?: string;
  
  /**
   * The order in which the radio button is displayed.
   */
  sort_order?: number;
  
  /**
   * The display name for this option.
   */
  title?: string;
  
  /**
   * The unique ID for a `CustomizableRadioValue` object.
   */
  uid: string;
}

/**
 * Downloadable Cart Item
 */
export interface GQLDownloadableCartItem extends GQLCartItemInterface {
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  
  /**
   * An array containing information about the links for the added to cart downloadable product
   */
  links?: Array<GQLDownloadableProductLinks | null>;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * DownloadableProductSamples defines characteristics of a downloadable product
   */
  samples?: Array<GQLDownloadableProductSamples | null>;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

/**
 * DownloadableProductLinks defines characteristics of a downloadable product
 */
export interface GQLDownloadableProductLinks {
  
  /**
   * 
   * @deprecated This information should not be exposed on frontend
   */
  id?: number;
  
  /**
   * 
   * @deprecated This information should not be exposed on frontend
   */
  is_shareable?: boolean;
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  link_type?: GQLDownloadableFileTypeEnum;
  
  /**
   * 
   * @deprecated This information should not be exposed on frontend
   */
  number_of_downloads?: number;
  
  /**
   * The price of the downloadable product
   */
  price?: number;
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  sample_file?: string;
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  sample_type?: GQLDownloadableFileTypeEnum;
  
  /**
   * URL to the downloadable sample
   */
  sample_url?: string;
  
  /**
   * A number indicating the sort order
   */
  sort_order?: number;
  
  /**
   * The display name of the link
   */
  title?: string;
  
  /**
   * The unique ID for a `DownloadableProductLinks` object.
   */
  uid: string;
}

export enum GQLDownloadableFileTypeEnum {
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  FILE = 'FILE',
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  URL = 'URL'
}

/**
 * DownloadableProductSamples defines characteristics of a downloadable product
 */
export interface GQLDownloadableProductSamples {
  
  /**
   * 
   * @deprecated This information should not be exposed on frontend
   */
  id?: number;
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  sample_file?: string;
  
  /**
   * 
   * @deprecated `sample_url` serves to get the downloadable sample
   */
  sample_type?: GQLDownloadableFileTypeEnum;
  
  /**
   * URL to the downloadable sample
   */
  sample_url?: string;
  
  /**
   * A number indicating the sort order
   */
  sort_order?: number;
  
  /**
   * The display name of the sample
   */
  title?: string;
}

export interface GQLDownloadableCreditMemoItem extends GQLCreditMemoItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * A list of downloadable links that are refunded from the downloadable product
   */
  downloadable_links?: Array<GQLDownloadableItemsLinks | null>;
  
  /**
   * The unique ID for a `CreditMemoItemInterface` object
   */
  id: string;
  
  /**
   * The order item the credit memo is applied to
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

/**
 * DownloadableProductLinks defines characteristics of a downloadable product
 */
export interface GQLDownloadableItemsLinks {
  
  /**
   * A number indicating the sort order
   */
  sort_order?: number;
  
  /**
   * The display name of the link
   */
  title?: string;
  
  /**
   * The unique ID for a `DownloadableItemsLinks` object.
   */
  uid: string;
}

export interface GQLDownloadableInvoiceItem extends GQLInvoiceItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * A list of downloadable links that are invoiced from the downloadable product
   */
  downloadable_links?: Array<GQLDownloadableItemsLinks | null>;
  
  /**
   * The unique ID for a `InvoiceItemInterface` object
   */
  id: string;
  
  /**
   * Contains details about an individual order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

export interface GQLDownloadableOrderItem extends GQLOrderItemInterface {
  
  /**
   * The final discount information for the product
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * A list of downloadable links that are ordered from the downloadable product
   */
  downloadable_links?: Array<GQLDownloadableItemsLinks | null>;
  
  /**
   * The entered option for the base product, such as a logo or image
   */
  entered_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The unique ID for a `OrderItemInterface` object
   */
  id: string;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price of the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The type of product, such as simple, configurable, etc.
   */
  product_type?: string;
  
  /**
   * URL key of the base product
   */
  product_url_key?: string;
  
  /**
   * The number of canceled items
   */
  quantity_canceled?: number;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The number of units ordered for this item
   */
  quantity_ordered?: number;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The number of returned items
   */
  quantity_returned?: number;
  
  /**
   * The number of shipped items
   */
  quantity_shipped?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
  
  /**
   * The selected options for the base product, such as color or size
   */
  selected_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The status of the order item
   */
  status?: string;
}

/**
 * DownloadableProduct defines a product that the shopper downloads
 */
export interface GQLDownloadableProduct extends GQLProductInterface, GQLRoutableInterface, GQLCustomizableProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  
  /**
   * An array containing information about the links for this downloadable product
   */
  downloadable_product_links?: Array<GQLDownloadableProductLinks | null>;
  
  /**
   * An array containing information about samples of this downloadable product.
   */
  downloadable_product_samples?: Array<GQLDownloadableProductSamples | null>;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  license_key?: string;
  
  /**
   * A value of 1 indicates that each link in the array must be purchased separately
   */
  links_purchased_separately?: number;
  
  /**
   * The heading above the list of downloadable products
   */
  links_title?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  samples_title?: string;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  yes_no?: number;
}

/**
 * A downloadable product wish list item
 */
export interface GQLDownloadableWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * An array containing information about the selected links
   */
  links_v2?: Array<GQLDownloadableProductLinks | null>;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
  
  /**
   * An array containing information about the selected samples
   */
  samples?: Array<GQLDownloadableProductSamples | null>;
}

export interface GQLExtensionAttributes {
  tax_grandtotal_details?: Array<GQLTaxGrandTotalDetails | null>;
}

export interface GQLTaxGrandTotalDetails {
  amount?: number;
  group_id?: number;
}

/**
 * A grouped product consists of simple standalone products that are presented as a group
 */
export interface GQLGroupedProduct extends GQLProductInterface, GQLRoutableInterface, GQLPhysicalProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  
  /**
   * An array containing grouped product items
   */
  items?: Array<GQLGroupedProductItem | null>;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: number;
  yes_no?: number;
}

/**
 * GroupedProductItem contains information about an individual grouped product item
 */
export interface GQLGroupedProductItem {
  
  /**
   * The relative position of this item compared to the other group items
   */
  position?: number;
  
  /**
   * The ProductInterface object, which contains details about this product option
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this grouped product item
   */
  qty?: number;
}

/**
 * A grouped product wish list item
 */
export interface GQLGroupedProductWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

export interface GQLImageSwatchData extends GQLSwatchDataInterface {
  
  /**
   * Thumbnail swatch image URL
   */
  thumbnail?: string;
  
  /**
   * Value of swatch item (HEX color code, image link or textual value)
   */
  value?: string;
}

export interface GQLInvoiceItem extends GQLInvoiceItemInterface {
  
  /**
   * Contains information about the final discount amount for the base product, including discounts on options
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The unique ID for a `InvoiceItemInterface` object
   */
  id: string;
  
  /**
   * Contains details about an individual order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price for the base product including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
}

export interface GQLLayerFilterItem extends GQLLayerFilterItemInterface {
  
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: number;
  
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: string;
  
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: string;
}

export interface GQLOrderItem extends GQLOrderItemInterface {
  
  /**
   * The final discount information for the product
   */
  discounts?: Array<GQLDiscount | null>;
  
  /**
   * The entered option for the base product, such as a logo or image
   */
  entered_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The unique ID for a `OrderItemInterface` object
   */
  id: string;
  
  /**
   * The name of the base product
   */
  product_name?: string;
  
  /**
   * The sale price of the base product, including selected options
   */
  product_sale_price: GQLMoney;
  
  /**
   * The SKU of the base product
   */
  product_sku: string;
  
  /**
   * The type of product, such as simple, configurable, etc.
   */
  product_type?: string;
  
  /**
   * URL key of the base product
   */
  product_url_key?: string;
  
  /**
   * The number of canceled items
   */
  quantity_canceled?: number;
  
  /**
   * The number of invoiced items
   */
  quantity_invoiced?: number;
  
  /**
   * The number of units ordered for this item
   */
  quantity_ordered?: number;
  
  /**
   * The number of refunded items
   */
  quantity_refunded?: number;
  
  /**
   * The number of returned items
   */
  quantity_returned?: number;
  
  /**
   * The number of shipped items
   */
  quantity_shipped?: number;
  
  /**
   * The row subtotal price, including selected options
   */
  row_subtotal: GQLMoney;
  
  /**
   * The selected options for the base product, such as color or size
   */
  selected_options?: Array<GQLOrderItemOption | null>;
  
  /**
   * The status of the order item
   */
  status?: string;
}

/**
 * Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods.
 */
export interface GQLPayflowProToken {
  response_message: string;
  result: number;
  result_code: number;
  secure_token: string;
  secure_token_id: string;
}

export interface GQLPaymentInformation {
  billing_address: GQLAddressInput;
  paymentMethod: GQLPaymentMethodInput;
}

/**
 * ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead.
 * ProductFilterInput defines the filters to be used in the search. A filter
 * contains at least one attribute, a comparison operator, and the value that is
 * being searched for.
 */
export interface GQLProductFilterInput {
  
  /**
   * Category ID the product belongs to.
   */
  category_id?: GQLFilterTypeInput;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: GQLFilterTypeInput;
  
  /**
   * Timestamp indicating when the product was created.
   */
  created_at?: GQLFilterTypeInput;
  
  /**
   * The name of a custom layout.
   */
  custom_layout?: GQLFilterTypeInput;
  
  /**
   * XML code that is applied as a layout update to the product page.
   */
  custom_layout_update?: GQLFilterTypeInput;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLFilterTypeInput;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: GQLFilterTypeInput;
  
  /**
   * Indicates whether additional attributes have been created for the product.
   */
  has_options?: GQLFilterTypeInput;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLFilterTypeInput;
  
  /**
   * The label assigned to a product image.
   */
  image_label?: GQLFilterTypeInput;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: GQLFilterTypeInput;
  
  /**
   * The numeric maximal price of the product. Do not include the currency code.
   */
  max_price?: GQLFilterTypeInput;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: GQLFilterTypeInput;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: GQLFilterTypeInput;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: GQLFilterTypeInput;
  
  /**
   * The numeric minimal price of the product. Do not include the currency code.
   */
  min_price?: GQLFilterTypeInput;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: GQLFilterTypeInput;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   */
  news_from_date?: GQLFilterTypeInput;
  
  /**
   * The end date for new product listings.
   */
  news_to_date?: GQLFilterTypeInput;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: GQLFilterTypeInput;
  
  /**
   * The keyword required to perform a logical OR comparison.
   */
  or?: GQLProductFilterInput;
  
  /**
   * The price of an item.
   */
  price?: GQLFilterTypeInput;
  
  /**
   * Indicates whether the product has required options.
   */
  required_options?: GQLFilterTypeInput;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLFilterTypeInput;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: GQLFilterTypeInput;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLFilterTypeInput;
  
  /**
   * The label assigned to a product's small image.
   */
  small_image_label?: GQLFilterTypeInput;
  
  /**
   * The beginning date that a product has a special price.
   */
  special_from_date?: GQLFilterTypeInput;
  
  /**
   * The discounted price of the product. Do not include the currency code.
   */
  special_price?: GQLFilterTypeInput;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: GQLFilterTypeInput;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: GQLFilterTypeInput;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLFilterTypeInput;
  
  /**
   * The label assigned to a product's thumbnail image.
   */
  thumbnail_label?: GQLFilterTypeInput;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   */
  tier_price?: GQLFilterTypeInput;
  
  /**
   * Timestamp indicating when the product was updated.
   */
  updated_at?: GQLFilterTypeInput;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: GQLFilterTypeInput;
  url_path?: GQLFilterTypeInput;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: GQLFilterTypeInput;
}

/**
 * Extend product Image fields for frontend-driven loading mechanism
 */
export interface GQLProductImage extends GQLMediaGalleryInterface {
  
  /**
   * Whether the image is hidden from view.
   */
  disabled?: boolean;
  
  /**
   * The label of the product image or video.
   */
  label?: string;
  
  /**
   * Relative path to origin image
   */
  path?: string;
  
  /**
   * The media item's position after it has been sorted.
   */
  position?: number;
  
  /**
   * The URL of the product image or video.
   */
  url?: string;
}

/**
 * ProductLinks is an implementation of ProductLinksInterface.
 */
export interface GQLProductLinks extends GQLProductLinksInterface {
  
  /**
   * One of related, associated, upsell, or crosssell.
   */
  link_type?: string;
  
  /**
   * The SKU of the linked product.
   */
  linked_product_sku?: string;
  
  /**
   * The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable).
   */
  linked_product_type?: string;
  
  /**
   * The position within the list of product links.
   */
  position?: number;
  
  /**
   * The identifier of the linked product.
   */
  sku?: string;
}

/**
 * ProductSortInput is deprecated, use @ProductAttributeSortInput instead.
 * ProductSortInput specifies the attribute to use for sorting search results and
 * indicates whether the results are sorted in ascending or descending order.
 */
export interface GQLProductSortInput {
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: GQLSortEnum;
  
  /**
   * Timestamp indicating when the product was created.
   */
  created_at?: GQLSortEnum;
  
  /**
   * The name of a custom layout.
   */
  custom_layout?: GQLSortEnum;
  
  /**
   * XML code that is applied as a layout update to the product page.
   */
  custom_layout_update?: GQLSortEnum;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLSortEnum;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: GQLSortEnum;
  
  /**
   * Indicates whether additional attributes have been created for the product.
   */
  has_options?: GQLSortEnum;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLSortEnum;
  
  /**
   * The label assigned to a product image.
   */
  image_label?: GQLSortEnum;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: GQLSortEnum;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: GQLSortEnum;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: GQLSortEnum;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: GQLSortEnum;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: GQLSortEnum;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   */
  news_from_date?: GQLSortEnum;
  
  /**
   * The end date for new product listings.
   */
  news_to_date?: GQLSortEnum;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: GQLSortEnum;
  
  /**
   * The price of the item.
   */
  price?: GQLSortEnum;
  
  /**
   * Indicates whether the product has required options.
   */
  required_options?: GQLSortEnum;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLSortEnum;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: GQLSortEnum;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLSortEnum;
  
  /**
   * The label assigned to a product's small image.
   */
  small_image_label?: GQLSortEnum;
  
  /**
   * The beginning date that a product has a special price.
   */
  special_from_date?: GQLSortEnum;
  
  /**
   * The discounted price of the product.
   */
  special_price?: GQLSortEnum;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: GQLSortEnum;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: GQLSortEnum;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLSortEnum;
  
  /**
   * The label assigned to a product's thumbnail image.
   */
  thumbnail_label?: GQLSortEnum;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   */
  tier_price?: GQLSortEnum;
  
  /**
   * Timestamp indicating when the product was updated.
   */
  updated_at?: GQLSortEnum;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: GQLSortEnum;
  url_path?: GQLSortEnum;
  
  /**
   * The weight of the item, in units defined by the store.
   */
  weight?: GQLSortEnum;
}

/**
 * Contains information about a product video.
 */
export interface GQLProductVideo extends GQLMediaGalleryInterface {
  
  /**
   * Whether the image is hidden from view.
   */
  disabled?: boolean;
  
  /**
   * The label of the product image or video.
   */
  label?: string;
  
  /**
   * The media item's position after it has been sorted.
   */
  position?: number;
  
  /**
   * The URL of the product image or video.
   */
  url?: string;
  
  /**
   * Contains a ProductMediaGalleryEntriesVideoContent object.
   */
  video_content?: GQLProductMediaGalleryEntriesVideoContent;
}

export interface GQLSalesItemInterface {
  
  /**
   * The entered gift message for the order item
   */
  gift_message?: GQLGiftMessage;
}

export interface GQLShipmentItem extends GQLShipmentItemInterface {
  
  /**
   * The unique ID for a `ShipmentItemInterface` object
   */
  id: string;
  
  /**
   * Associated order item
   */
  order_item?: GQLOrderItemInterface;
  
  /**
   * Name of the base product
   */
  product_name?: string;
  
  /**
   * Sale price for the base product
   */
  product_sale_price: GQLMoney;
  
  /**
   * SKU of the base product
   */
  product_sku: string;
  
  /**
   * Number of shipped items
   */
  quantity_shipped: number;
}

/**
 * Simple Cart Item
 */
export interface GQLSimpleCartItem extends GQLCartItemInterface {
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The entered gift message for the cart item
   */
  gift_message?: GQLGiftMessage;
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

/**
 * A simple product wish list Item
 */
export interface GQLSimpleWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

export interface GQLSwatchLayerFilterItem extends GQLLayerFilterItemInterface, GQLSwatchLayerFilterItemInterface {
  
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: number;
  
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: string;
  
  /**
   * Data required to render swatch filter item
   */
  swatch_data?: GQLSwatchData;
  
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: string;
}

export interface GQLSwatchLayerFilterItemInterface {
  
  /**
   * Data required to render swatch filter item
   */
  swatch_data?: GQLSwatchData;
}

/** Use this to resolve interface type SwatchLayerFilterItemInterface */
export type GQLPossibleSwatchLayerFilterItemInterfaceTypeNames =
'SwatchLayerFilterItem';

export interface GQLSwatchLayerFilterItemInterfaceNameMap {
  SwatchLayerFilterItemInterface: GQLSwatchLayerFilterItemInterface;
  SwatchLayerFilterItem: GQLSwatchLayerFilterItem;
}

export interface GQLTextSwatchData extends GQLSwatchDataInterface {
  
  /**
   * Value of swatch item (HEX color code, image link or textual value)
   */
  value?: string;
}

export interface GQLTotalsSegment {
  code?: string;
  extension_attributes?: GQLExtensionAttributes;
  title?: string;
  value?: number;
}

/**
 * Virtual Cart Item
 */
export interface GQLVirtualCartItem extends GQLCartItemInterface {
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * 
   * @deprecated Use `uid` instead
   */
  id: string;
  prices?: GQLCartItemPrices;
  product: GQLProductInterface;
  quantity: number;
  
  /**
   * The unique ID for a `CartItemInterface` object
   */
  uid: string;
}

/**
 * A virtual product is a non-tangible product that does not require shipping and is not kept in inventory
 */
export interface GQLVirtualProduct extends GQLProductInterface, GQLRoutableInterface, GQLCustomizableProductInterface {
  New_attribute_size?: number;
  New_multiple_attribute?: string;
  Test_Ainars?: number;
  attribute_allows_html?: string;
  
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: number;
  brand?: string;
  
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use
   * Canonical Link Meta Tag For Products' is enabled
   */
  canonical_url?: string;
  
  /**
   * The categories assigned to a product.
   */
  categories?: Array<GQLCategoryInterface | null>;
  clothing_colour?: number;
  clothing_gender?: number;
  clothing_size?: number;
  clothing_type?: number;
  color?: number;
  color_elena?: number;
  colors_with_images?: number;
  
  /**
   * The product's country of origin.
   */
  country_of_manufacture?: string;
  
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: string;
  
  /**
   * Crosssell Products
   */
  crosssell_products?: Array<GQLProductInterface | null>;
  
  /**
   * Detailed information about the product. The value can include simple HTML tags.
   */
  description?: GQLComplexTextValue;
  fit?: number;
  
  /**
   * Indicates whether a gift message is available.
   */
  gift_message_available?: string;
  
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: number;
  
  /**
   * The relative path to the main image on the product page.
   */
  image?: GQLOptimizedProductImage;
  images_type_map?: number;
  license_key?: string;
  
  /**
   * A number representing the product's manufacturer.
   */
  manufacturer?: number;
  material?: string;
  
  /**
   * An array of Media Gallery objects.
   */
  media_gallery?: Array<GQLMediaGalleryInterface | null>;
  
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Array<GQLMediaGalleryEntry | null>;
  memory?: number;
  
  /**
   * A brief overview of the product for search results listings, maximum 255 characters.
   */
  meta_description?: string;
  
  /**
   * A comma-separated list of keywords that are visible only to search engines.
   */
  meta_keyword?: string;
  
  /**
   * A string that is displayed in the title bar and tab of the browser and in search results lists.
   */
  meta_title?: string;
  multiple_attribute?: string;
  
  /**
   * The product name. Customers use this name to identify the product.
   */
  name?: string;
  
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: string;
  
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: string;
  
  /**
   * Product stock only x left count
   */
  only_x_left_in_stock?: number;
  
  /**
   * An array of options for a customizable product.
   */
  options?: Array<GQLCustomizableOptionInterface | null>;
  
  /**
   * If the product has multiple options, determines where they appear on the product page.
   */
  options_container?: string;
  original_price?: number;
  
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: GQLProductPrices;
  
  /**
   * A PriceRange object, indicating the range of prices for the product
   */
  price_range: GQLPriceRange;
  
  /**
   * An array of TierPrice objects.
   */
  price_tiers?: Array<GQLTierPrice | null>;
  
  /**
   * An array of ProductLinks objects.
   */
  product_links?: Array<GQLProductLinksInterface | null>;
  
  /**
   * Qty field for checkout order view
   */
  qty?: number;
  quantity?: number;
  ranking?: number;
  
  /**
   * The average of all the ratings given to the product.
   */
  rating_summary: number;
  
  /**
   * Contains 0 when there is no redirect error. A value of 301 indicates the URL
   * of the requested resource has been changed permanently, while a value of 302
   * indicates a temporary redirect
   */
  redirect_code: number;
  
  /**
   * Related Products
   */
  related_products?: Array<GQLProductInterface | null>;
  
  /**
   * The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original
   */
  relative_url?: string;
  
  /**
   * The total count of all the reviews given to the product.
   */
  review_count: number;
  
  /**
   * The list of products reviews.
   */
  reviews: GQLProductReviews;
  row_total?: number;
  s_attributes?: Array<GQLAttributeWithValue | null>;
  salable_qty?: number;
  shoes_size?: number;
  
  /**
   * A short description of the product. Its use depends on the theme.
   */
  short_description?: GQLComplexTextValue;
  size?: number;
  
  /**
   * A number or code assigned to a product to identify the product, options, price, and manufacturer.
   */
  sku?: string;
  
  /**
   * The relative path to the small image, which is used on catalog pages.
   */
  small_image?: GQLOptimizedProductImage;
  
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: string;
  
  /**
   * The discounted price of the product.
   */
  special_price?: number;
  
  /**
   * The end date that a product has a special price.
   */
  special_to_date?: string;
  stock_item?: GQLProductStockItem;
  
  /**
   * Stock status of the product
   */
  stock_status?: GQLProductStockStatus;
  
  /**
   * The file name of a swatch image
   */
  swatch_image?: string;
  test?: number;
  texture?: number;
  
  /**
   * The relative path to the product's thumbnail image.
   */
  thumbnail?: GQLOptimizedProductImage;
  
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: number;
  
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Array<GQLProductTierPrices | null>;
  
  /**
   * One of PRODUCT, CATEGORY, or CMS_PAGE.
   */
  type?: GQLUrlRewriteEntityTypeEnum;
  
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: string;
  
  /**
   * The unique ID for a `ProductInterface` object.
   */
  uid: string;
  
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: string;
  
  /**
   * Upsell Products
   */
  upsell_products?: Array<GQLProductInterface | null>;
  url?: string;
  
  /**
   * The part of the URL that identifies the product
   */
  url_key?: string;
  
  /**
   * 
   * @deprecated Use product's `canonical_url` or url rewrites instead
   */
  url_path?: string;
  
  /**
   * URL rewrites list
   */
  url_rewrites?: Array<GQLUrlRewrite | null>;
  
  /**
   * The part of the product URL that is appended after the url key
   */
  url_suffix?: string;
  valuesss?: number;
  
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Array<GQLWebsite | null>;
  yes_no?: number;
}

/**
 * A virtual product wish list item
 */
export interface GQLVirtualWishlistItem extends GQLWishlistItemInterface {
  
  /**
   * The date and time the item was added to the wish list
   */
  added_at: string;
  
  /**
   * Custom options selected for the wish list item
   */
  customizable_options: Array<GQLSelectedCustomizableOption | null>;
  
  /**
   * The description of the item
   */
  description?: string;
  
  /**
   * The unique ID for a `WishlistItemInterface` object
   */
  id: string;
  
  /**
   * Product details of the wish list item
   */
  product?: GQLProductInterface;
  
  /**
   * The quantity of this wish list item
   */
  quantity: number;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  StoreConfig?: GQLStoreConfigTypeResolver;
  PriceTaxDisplay?: GQLPriceTaxDisplayTypeResolver;
  SendFriendConfiguration?: GQLSendFriendConfigurationTypeResolver;
  Cart?: GQLCartTypeResolver;
  AppliedCoupon?: GQLAppliedCouponTypeResolver;
  AvailablePaymentMethod?: GQLAvailablePaymentMethodTypeResolver;
  BillingCartAddress?: GQLBillingCartAddressTypeResolver;
  CartAddressInterface?: {
    __resolveType: GQLCartAddressInterfaceTypeResolver
  };
  
  CartAddressCountry?: GQLCartAddressCountryTypeResolver;
  CartAddressRegion?: GQLCartAddressRegionTypeResolver;
  GiftMessage?: GQLGiftMessageTypeResolver;
  CartItemInterface?: {
    __resolveType: GQLCartItemInterfaceTypeResolver
  };
  
  CartItemPrices?: GQLCartItemPricesTypeResolver;
  Discount?: GQLDiscountTypeResolver;
  Money?: GQLMoneyTypeResolver;
  FixedProductTax?: GQLFixedProductTaxTypeResolver;
  ProductInterface?: {
    __resolveType: GQLProductInterfaceTypeResolver
  };
  
  CategoryInterface?: {
    __resolveType: GQLCategoryInterfaceTypeResolver
  };
  
  Breadcrumb?: GQLBreadcrumbTypeResolver;
  CmsBlock?: GQLCmsBlockTypeResolver;
  CategoryProducts?: GQLCategoryProductsTypeResolver;
  SearchResultPageInfo?: GQLSearchResultPageInfoTypeResolver;
  ComplexTextValue?: GQLComplexTextValueTypeResolver;
  OptimizedProductImage?: GQLOptimizedProductImageTypeResolver;
  MediaGalleryInterface?: {
    __resolveType: GQLMediaGalleryInterfaceTypeResolver
  };
  
  MediaGalleryEntry?: GQLMediaGalleryEntryTypeResolver;
  MediaGalleryImageOfType?: GQLMediaGalleryImageOfTypeTypeResolver;
  ProductMediaGalleryEntriesContent?: GQLProductMediaGalleryEntriesContentTypeResolver;
  ProductMediaGalleryEntriesVideoContent?: GQLProductMediaGalleryEntriesVideoContentTypeResolver;
  ProductPrices?: GQLProductPricesTypeResolver;
  Price?: GQLPriceTypeResolver;
  PriceAdjustment?: GQLPriceAdjustmentTypeResolver;
  PriceRange?: GQLPriceRangeTypeResolver;
  ProductPrice?: GQLProductPriceTypeResolver;
  ProductDiscount?: GQLProductDiscountTypeResolver;
  TierPrice?: GQLTierPriceTypeResolver;
  ProductLinksInterface?: {
    __resolveType: GQLProductLinksInterfaceTypeResolver
  };
  
  ProductReviews?: GQLProductReviewsTypeResolver;
  ProductReview?: GQLProductReviewTypeResolver;
  ProductReviewRating?: GQLProductReviewRatingTypeResolver;
  AttributeWithValue?: GQLAttributeWithValueTypeResolver;
  AttributeWithValueOption?: GQLAttributeWithValueOptionTypeResolver;
  AttributeWithValueSwatchData?: GQLAttributeWithValueSwatchDataTypeResolver;
  ProductStockItem?: GQLProductStockItemTypeResolver;
  ProductTierPrices?: GQLProductTierPricesTypeResolver;
  UrlRewrite?: GQLUrlRewriteTypeResolver;
  HttpQueryParameter?: GQLHttpQueryParameterTypeResolver;
  Website?: GQLWebsiteTypeResolver;
  CartPrices?: GQLCartPricesTypeResolver;
  CartTaxItem?: GQLCartTaxItemTypeResolver;
  CartDiscount?: GQLCartDiscountTypeResolver;
  SelectedPaymentMethod?: GQLSelectedPaymentMethodTypeResolver;
  ShippingCartAddress?: GQLShippingCartAddressTypeResolver;
  AvailableShippingMethod?: GQLAvailableShippingMethodTypeResolver;
  CartItemQuantity?: GQLCartItemQuantityTypeResolver;
  SelectedShippingMethod?: GQLSelectedShippingMethodTypeResolver;
  CategoryResult?: GQLCategoryResultTypeResolver;
  CategoryTree?: GQLCategoryTreeTypeResolver;
  RoutableInterface?: {
    __resolveType: GQLRoutableInterfaceTypeResolver
  };
  
  ChatData?: GQLChatDataTypeResolver;
  CheckoutAgreement?: GQLCheckoutAgreementTypeResolver;
  CmsBlocks?: GQLCmsBlocksTypeResolver;
  CmsPage?: GQLCmsPageTypeResolver;
  CompareList?: GQLCompareListTypeResolver;
  ComparableAttribute?: GQLComparableAttributeTypeResolver;
  ComparableItem?: GQLComparableItemTypeResolver;
  ProductAttribute?: GQLProductAttributeTypeResolver;
  ContactPageConfig?: GQLContactPageConfigTypeResolver;
  Country?: GQLCountryTypeResolver;
  Region?: GQLRegionTypeResolver;
  Currency?: GQLCurrencyTypeResolver;
  ExchangeRate?: GQLExchangeRateTypeResolver;
  CurrencyConfig?: GQLCurrencyConfigTypeResolver;
  CustomAttributeMetadata?: GQLCustomAttributeMetadataTypeResolver;
  Attribute?: GQLAttributeTypeResolver;
  AttributeOption?: GQLAttributeOptionTypeResolver;
  StorefrontProperties?: GQLStorefrontPropertiesTypeResolver;
  Customer?: GQLCustomerTypeResolver;
  CustomerAddress?: GQLCustomerAddressTypeResolver;
  CustomerAddressAttribute?: GQLCustomerAddressAttributeTypeResolver;
  CustomerAddressRegion?: GQLCustomerAddressRegionTypeResolver;
  CustomerOrders?: GQLCustomerOrdersTypeResolver;
  CustomerOrder?: GQLCustomerOrderTypeResolver;
  OrderAddress?: GQLOrderAddressTypeResolver;
  SalesCommentItem?: GQLSalesCommentItemTypeResolver;
  CreditMemo?: GQLCreditMemoTypeResolver;
  CreditMemoItemInterface?: {
    __resolveType: GQLCreditMemoItemInterfaceTypeResolver
  };
  
  OrderItemInterface?: {
    __resolveType: GQLOrderItemInterfaceTypeResolver
  };
  
  OrderItemOption?: GQLOrderItemOptionTypeResolver;
  BundleOption?: GQLBundleOptionTypeResolver;
  BundleOptionSelection?: GQLBundleOptionSelectionTypeResolver;
  CreditMemoTotal?: GQLCreditMemoTotalTypeResolver;
  ShippingHandling?: GQLShippingHandlingTypeResolver;
  ShippingDiscount?: GQLShippingDiscountTypeResolver;
  TaxItem?: GQLTaxItemTypeResolver;
  Invoice?: GQLInvoiceTypeResolver;
  InvoiceItemInterface?: {
    __resolveType: GQLInvoiceItemInterfaceTypeResolver
  };
  
  InvoiceTotal?: GQLInvoiceTotalTypeResolver;
  OrderPaymentMethod?: GQLOrderPaymentMethodTypeResolver;
  KeyValue?: GQLKeyValueTypeResolver;
  OrderShipment?: GQLOrderShipmentTypeResolver;
  ShipmentItemInterface?: {
    __resolveType: GQLShipmentItemInterfaceTypeResolver
  };
  
  ShipmentTracking?: GQLShipmentTrackingTypeResolver;
  OrderTotal?: GQLOrderTotalTypeResolver;
  Wishlist?: GQLWishlistTypeResolver;
  WishlistItem?: GQLWishlistItemTypeResolver;
  WishlistItemOption?: GQLWishlistItemOptionTypeResolver;
  WishlistItems?: GQLWishlistItemsTypeResolver;
  WishlistItemInterface?: {
    __resolveType: GQLWishlistItemInterfaceTypeResolver
  };
  
  SelectedCustomizableOption?: GQLSelectedCustomizableOptionTypeResolver;
  SelectedCustomizableOptionValue?: GQLSelectedCustomizableOptionValueTypeResolver;
  CartItemSelectedOptionValuePrice?: GQLCartItemSelectedOptionValuePriceTypeResolver;
  CustomerDownloadableProducts?: GQLCustomerDownloadableProductsTypeResolver;
  CustomerDownloadableProduct?: GQLCustomerDownloadableProductTypeResolver;
  CustomerPaymentTokens?: GQLCustomerPaymentTokensTypeResolver;
  PaymentToken?: GQLPaymentTokenTypeResolver;
  IsConfigSettingEnabledOutput?: GQLIsConfigSettingEnabledOutputTypeResolver;
  Braintree?: GQLBraintreeTypeResolver;
  CartDisplayConfig?: GQLCartDisplayConfigTypeResolver;
  QuoteData?: GQLQuoteDataTypeResolver;
  TotalsObject?: {
    __resolveType: GQLTotalsObjectTypeResolver
  };
  
  TotalsItem?: GQLTotalsItemTypeResolver;
  SelectedBundleOption?: GQLSelectedBundleOptionTypeResolver;
  SelectedBundleOptionValue?: GQLSelectedBundleOptionValueTypeResolver;
  SelectedDownloadableLinks?: GQLSelectedDownloadableLinksTypeResolver;
  AppliedTaxItem?: GQLAppliedTaxItemTypeResolver;
  AppliedTaxItemRate?: GQLAppliedTaxItemRateTypeResolver;
  HostedProUrl?: GQLHostedProUrlTypeResolver;
  Order?: GQLOrderTypeResolver;
  BaseOrderInfo?: GQLBaseOrderInfoTypeResolver;
  PaymentInfo?: GQLPaymentInfoTypeResolver;
  AdditionalCustomerInfo?: GQLAdditionalCustomerInfoTypeResolver;
  CreditCustomerInfo?: GQLCreditCustomerInfoTypeResolver;
  ShippingInfo?: GQLShippingInfoTypeResolver;
  OrderCustomerAddress?: GQLOrderCustomerAddressTypeResolver;
  OrderList?: GQLOrderListTypeResolver;
  PayflowLinkToken?: GQLPayflowLinkTokenTypeResolver;
  PaymentMethod?: GQLPaymentMethodTypeResolver;
  Stores?: GQLStoresTypeResolver;
  Store?: GQLStoreTypeResolver;
  IsEmailAvailableOutput?: GQLIsEmailAvailableOutputTypeResolver;
  PickupLocations?: GQLPickupLocationsTypeResolver;
  PickupLocation?: GQLPickupLocationTypeResolver;
  ProductReviewRatingsMetadata?: GQLProductReviewRatingsMetadataTypeResolver;
  ProductReviewRatingMetadata?: GQLProductReviewRatingMetadataTypeResolver;
  ProductReviewRatingValueMetadata?: GQLProductReviewRatingValueMetadataTypeResolver;
  Products?: GQLProductsTypeResolver;
  Aggregation?: GQLAggregationTypeResolver;
  AggregationOption?: GQLAggregationOptionTypeResolver;
  AggregationOptionInterface?: {
    __resolveType: GQLAggregationOptionInterfaceTypeResolver
  };
  
  SwatchData?: GQLSwatchDataTypeResolver;
  LayerFilter?: GQLLayerFilterTypeResolver;
  LayerFilterItemInterface?: {
    __resolveType: GQLLayerFilterItemInterfaceTypeResolver
  };
  
  SortFields?: GQLSortFieldsTypeResolver;
  SortField?: GQLSortFieldTypeResolver;
  WishlistOutput?: GQLWishlistOutputTypeResolver;
  Menu?: GQLMenuTypeResolver;
  Item?: GQLItemTypeResolver;
  Slider?: GQLSliderTypeResolver;
  Slide?: GQLSlideTypeResolver;
  Map?: GQLMapTypeResolver;
  TrackingData?: GQLTrackingDataTypeResolver;
  EntityUrl?: GQLEntityUrlTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  AddBundleProductsToCartOutput?: GQLAddBundleProductsToCartOutputTypeResolver;
  AddConfigurableProductsToCartOutput?: GQLAddConfigurableProductsToCartOutputTypeResolver;
  AddDownloadableProductsToCartOutput?: GQLAddDownloadableProductsToCartOutputTypeResolver;
  AddProductsToCartOutput?: GQLAddProductsToCartOutputTypeResolver;
  CartUserInputError?: GQLCartUserInputErrorTypeResolver;
  AddProductsToWishlistOutput?: GQLAddProductsToWishlistOutputTypeResolver;
  WishListUserInputError?: GQLWishListUserInputErrorTypeResolver;
  AddSimpleProductsToCartOutput?: GQLAddSimpleProductsToCartOutputTypeResolver;
  AddVirtualProductsToCartOutput?: GQLAddVirtualProductsToCartOutputTypeResolver;
  AddWishlistItemsToCartOutput?: GQLAddWishlistItemsToCartOutputTypeResolver;
  WishlistCartUserInputError?: GQLWishlistCartUserInputErrorTypeResolver;
  ApplyCouponToCartOutput?: GQLApplyCouponToCartOutputTypeResolver;
  AssignCompareListToCustomerOutput?: GQLAssignCompareListToCustomerOutputTypeResolver;
  CreateCustomerType?: GQLCreateCustomerTypeTypeResolver;
  ContactFormResponse?: GQLContactFormResponseTypeResolver;
  CustomerOutput?: GQLCustomerOutputTypeResolver;
  createKlarnaPaymentsSessionOutput?: GQLcreateKlarnaPaymentsSessionOutputTypeResolver;
  Categories?: GQLCategoriesTypeResolver;
  Assets?: GQLAssetsTypeResolver;
  CreatePayflowProTokenOutput?: GQLCreatePayflowProTokenOutputTypeResolver;
  PaypalExpressTokenOutput?: GQLPaypalExpressTokenOutputTypeResolver;
  PaypalExpressUrlList?: GQLPaypalExpressUrlListTypeResolver;
  CreateProductReviewOutput?: GQLCreateProductReviewOutputTypeResolver;
  DeleteCompareListOutput?: GQLDeleteCompareListOutputTypeResolver;
  DeletePaymentTokenOutput?: GQLDeletePaymentTokenOutputTypeResolver;
  ShippingMethod?: GQLShippingMethodTypeResolver;
  CustomerActionConfirmationType?: GQLCustomerActionConfirmationTypeTypeResolver;
  CustomerToken?: GQLCustomerTokenTypeResolver;
  GenerateCustomerTokenAsAdminOutput?: GQLGenerateCustomerTokenAsAdminOutputTypeResolver;
  PayflowProResponseOutput?: GQLPayflowProResponseOutputTypeResolver;
  PlaceOrderOutput?: GQLPlaceOrderOutputTypeResolver;
  RemoveCouponFromCartOutput?: GQLRemoveCouponFromCartOutputTypeResolver;
  RemoveItemFromCartOutput?: GQLRemoveItemFromCartOutputTypeResolver;
  RemoveProductsFromWishlistOutput?: GQLRemoveProductsFromWishlistOutputTypeResolver;
  ReorderItemsOutput?: GQLReorderItemsOutputTypeResolver;
  CheckoutUserInputError?: GQLCheckoutUserInputErrorTypeResolver;
  RevokeCustomerTokenOutput?: GQLRevokeCustomerTokenOutputTypeResolver;
  PaypalExpressToken?: GQLPaypalExpressTokenTypeResolver;
  ResetPasswordType?: GQLResetPasswordTypeTypeResolver;
  SetBillingAddressOnCartOutput?: GQLSetBillingAddressOnCartOutputTypeResolver;
  SetPaymentMethodOnCartOutput?: GQLSetPaymentMethodOnCartOutputTypeResolver;
  PaymentDetails?: GQLPaymentDetailsTypeResolver;
  PaymentTotals?: GQLPaymentTotalsTypeResolver;
  SendEmailToFriendOutput?: GQLSendEmailToFriendOutputTypeResolver;
  SendEmailToFriendRecipient?: GQLSendEmailToFriendRecipientTypeResolver;
  SendEmailToFriendSender?: GQLSendEmailToFriendSenderTypeResolver;
  SetGuestEmailOnCartOutput?: GQLSetGuestEmailOnCartOutputTypeResolver;
  SetShippingAddressesOnCartOutput?: GQLSetShippingAddressesOnCartOutputTypeResolver;
  SetShippingMethodsOnCartOutput?: GQLSetShippingMethodsOnCartOutputTypeResolver;
  SubscribeEmailToNewsletterOutput?: GQLSubscribeEmailToNewsletterOutputTypeResolver;
  UpdateCartItemsOutput?: GQLUpdateCartItemsOutputTypeResolver;
  UpdateProductsInWishlistOutput?: GQLUpdateProductsInWishlistOutputTypeResolver;
  AvailabilityResponseType?: GQLAvailabilityResponseTypeTypeResolver;
  BundleCartItem?: GQLBundleCartItemTypeResolver;
  BundleCreditMemoItem?: GQLBundleCreditMemoItemTypeResolver;
  ItemSelectedBundleOption?: GQLItemSelectedBundleOptionTypeResolver;
  ItemSelectedBundleOptionValue?: GQLItemSelectedBundleOptionValueTypeResolver;
  BundleInvoiceItem?: GQLBundleInvoiceItemTypeResolver;
  BundleItem?: GQLBundleItemTypeResolver;
  BundleItemOption?: GQLBundleItemOptionTypeResolver;
  BundleOptions?: GQLBundleOptionsTypeResolver;
  BundleOrderItem?: GQLBundleOrderItemTypeResolver;
  BundleProduct?: GQLBundleProductTypeResolver;
  PhysicalProductInterface?: {
    __resolveType: GQLPhysicalProductInterfaceTypeResolver
  };
  
  CustomizableProductInterface?: {
    __resolveType: GQLCustomizableProductInterfaceTypeResolver
  };
  
  CustomizableOptionInterface?: {
    __resolveType: GQLCustomizableOptionInterfaceTypeResolver
  };
  
  BundleShipmentItem?: GQLBundleShipmentItemTypeResolver;
  BundleWishlistItem?: GQLBundleWishlistItemTypeResolver;
  ColorSwatchData?: GQLColorSwatchDataTypeResolver;
  SwatchDataInterface?: {
    __resolveType: GQLSwatchDataInterfaceTypeResolver
  };
  
  ConfigurableAttributeOption?: GQLConfigurableAttributeOptionTypeResolver;
  ConfigurableCartItem?: GQLConfigurableCartItemTypeResolver;
  SelectedConfigurableOption?: GQLSelectedConfigurableOptionTypeResolver;
  ConfigurableOptionAvailableForSelection?: GQLConfigurableOptionAvailableForSelectionTypeResolver;
  ConfigurableProduct?: GQLConfigurableProductTypeResolver;
  ConfigurableProductOptions?: GQLConfigurableProductOptionsTypeResolver;
  ConfigurableProductOptionsValues?: GQLConfigurableProductOptionsValuesTypeResolver;
  ConfigurableProductOptionsSelection?: GQLConfigurableProductOptionsSelectionTypeResolver;
  ConfigurableProductOption?: GQLConfigurableProductOptionTypeResolver;
  ConfigurableProductOptionValue?: GQLConfigurableProductOptionValueTypeResolver;
  SimpleProduct?: GQLSimpleProductTypeResolver;
  ConfigurableVariant?: GQLConfigurableVariantTypeResolver;
  ConfigurableWishlistItem?: GQLConfigurableWishlistItemTypeResolver;
  CreditMemoItem?: GQLCreditMemoItemTypeResolver;
  CustomizableAreaOption?: GQLCustomizableAreaOptionTypeResolver;
  CustomizableAreaValue?: GQLCustomizableAreaValueTypeResolver;
  CustomizableCheckboxOption?: GQLCustomizableCheckboxOptionTypeResolver;
  CustomizableCheckboxValue?: GQLCustomizableCheckboxValueTypeResolver;
  CustomizableDateOption?: GQLCustomizableDateOptionTypeResolver;
  CustomizableDateValue?: GQLCustomizableDateValueTypeResolver;
  CustomizableDropDownOption?: GQLCustomizableDropDownOptionTypeResolver;
  CustomizableDropDownValue?: GQLCustomizableDropDownValueTypeResolver;
  CustomizableFieldOption?: GQLCustomizableFieldOptionTypeResolver;
  CustomizableFieldValue?: GQLCustomizableFieldValueTypeResolver;
  CustomizableFileOption?: GQLCustomizableFileOptionTypeResolver;
  CustomizableFileValue?: GQLCustomizableFileValueTypeResolver;
  CustomizableMultipleOption?: GQLCustomizableMultipleOptionTypeResolver;
  CustomizableMultipleValue?: GQLCustomizableMultipleValueTypeResolver;
  CustomizableRadioOption?: GQLCustomizableRadioOptionTypeResolver;
  CustomizableRadioValue?: GQLCustomizableRadioValueTypeResolver;
  DownloadableCartItem?: GQLDownloadableCartItemTypeResolver;
  DownloadableProductLinks?: GQLDownloadableProductLinksTypeResolver;
  DownloadableProductSamples?: GQLDownloadableProductSamplesTypeResolver;
  DownloadableCreditMemoItem?: GQLDownloadableCreditMemoItemTypeResolver;
  DownloadableItemsLinks?: GQLDownloadableItemsLinksTypeResolver;
  DownloadableInvoiceItem?: GQLDownloadableInvoiceItemTypeResolver;
  DownloadableOrderItem?: GQLDownloadableOrderItemTypeResolver;
  DownloadableProduct?: GQLDownloadableProductTypeResolver;
  DownloadableWishlistItem?: GQLDownloadableWishlistItemTypeResolver;
  ExtensionAttributes?: GQLExtensionAttributesTypeResolver;
  TaxGrandTotalDetails?: GQLTaxGrandTotalDetailsTypeResolver;
  GroupedProduct?: GQLGroupedProductTypeResolver;
  GroupedProductItem?: GQLGroupedProductItemTypeResolver;
  GroupedProductWishlistItem?: GQLGroupedProductWishlistItemTypeResolver;
  ImageSwatchData?: GQLImageSwatchDataTypeResolver;
  InvoiceItem?: GQLInvoiceItemTypeResolver;
  LayerFilterItem?: GQLLayerFilterItemTypeResolver;
  OrderItem?: GQLOrderItemTypeResolver;
  PayflowProToken?: GQLPayflowProTokenTypeResolver;
  ProductImage?: GQLProductImageTypeResolver;
  ProductLinks?: GQLProductLinksTypeResolver;
  ProductVideo?: GQLProductVideoTypeResolver;
  SalesItemInterface?: GQLSalesItemInterfaceTypeResolver;
  ShipmentItem?: GQLShipmentItemTypeResolver;
  SimpleCartItem?: GQLSimpleCartItemTypeResolver;
  SimpleWishlistItem?: GQLSimpleWishlistItemTypeResolver;
  SwatchLayerFilterItem?: GQLSwatchLayerFilterItemTypeResolver;
  SwatchLayerFilterItemInterface?: {
    __resolveType: GQLSwatchLayerFilterItemInterfaceTypeResolver
  };
  
  TextSwatchData?: GQLTextSwatchDataTypeResolver;
  TotalsSegment?: GQLTotalsSegmentTypeResolver;
  VirtualCartItem?: GQLVirtualCartItemTypeResolver;
  VirtualProduct?: GQLVirtualProductTypeResolver;
  VirtualWishlistItem?: GQLVirtualWishlistItemTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  availableStores?: QueryToAvailableStoresResolver<TParent>;
  cart?: QueryToCartResolver<TParent>;
  categories?: QueryToCategoriesResolver<TParent>;
  category?: QueryToCategoryResolver<TParent>;
  categoryList?: QueryToCategoryListResolver<TParent>;
  chatData?: QueryToChatDataResolver<TParent>;
  checkoutAgreements?: QueryToCheckoutAgreementsResolver<TParent>;
  cmsBlocks?: QueryToCmsBlocksResolver<TParent>;
  cmsPage?: QueryToCmsPageResolver<TParent>;
  compareList?: QueryToCompareListResolver<TParent>;
  contactPageConfig?: QueryToContactPageConfigResolver<TParent>;
  countries?: QueryToCountriesResolver<TParent>;
  country?: QueryToCountryResolver<TParent>;
  currency?: QueryToCurrencyResolver<TParent>;
  currencyData?: QueryToCurrencyDataResolver<TParent>;
  customAttributeMetadata?: QueryToCustomAttributeMetadataResolver<TParent>;
  customer?: QueryToCustomerResolver<TParent>;
  customerCart?: QueryToCustomerCartResolver<TParent>;
  customerDownloadableProducts?: QueryToCustomerDownloadableProductsResolver<TParent>;
  customerOrders?: QueryToCustomerOrdersResolver<TParent>;
  customerPaymentTokens?: QueryToCustomerPaymentTokensResolver<TParent>;
  emailCaptureCheckout?: QueryToEmailCaptureCheckoutResolver<TParent>;
  emailCaptureNewsletter?: QueryToEmailCaptureNewsletterResolver<TParent>;
  getBraintreeConfig?: QueryToGetBraintreeConfigResolver<TParent>;
  getCartDisplayConfig?: QueryToGetCartDisplayConfigResolver<TParent>;
  getCartForCustomer?: QueryToGetCartForCustomerResolver<TParent>;
  getHostedProUrl?: QueryToGetHostedProUrlResolver<TParent>;
  getOrderById?: QueryToGetOrderByIdResolver<TParent>;
  getOrderList?: QueryToGetOrderListResolver<TParent>;
  getPayflowLinkToken?: QueryToGetPayflowLinkTokenResolver<TParent>;
  getPaymentMethods?: QueryToGetPaymentMethodsResolver<TParent>;
  getStores?: QueryToGetStoresResolver<TParent>;
  isEmailAvailable?: QueryToIsEmailAvailableResolver<TParent>;
  orderByInvoice?: QueryToOrderByInvoiceResolver<TParent>;
  orderByRefund?: QueryToOrderByRefundResolver<TParent>;
  orderByShipment?: QueryToOrderByShipmentResolver<TParent>;
  orderData?: QueryToOrderDataResolver<TParent>;
  pickupLocations?: QueryToPickupLocationsResolver<TParent>;
  productReviewRatingsMetadata?: QueryToProductReviewRatingsMetadataResolver<TParent>;
  products?: QueryToProductsResolver<TParent>;
  route?: QueryToRouteResolver<TParent>;
  s_wishlist?: QueryToS_wishlistResolver<TParent>;
  scandiwebMenu?: QueryToScandiwebMenuResolver<TParent>;
  scandiwebSlider?: QueryToScandiwebSliderResolver<TParent>;
  storeConfig?: QueryToStoreConfigResolver<TParent>;
  storeList?: QueryToStoreListResolver<TParent>;
  trackingData?: QueryToTrackingDataResolver<TParent>;
  urlResolver?: QueryToUrlResolverResolver<TParent>;
  wishlist?: QueryToWishlistResolver<TParent>;
}

export interface QueryToAvailableStoresArgs {
  useCurrentGroup?: boolean;
}
export interface QueryToAvailableStoresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAvailableStoresArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCartArgs {
  cart_id: string;
}
export interface QueryToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCategoriesArgs {
  filters?: GQLCategoryFilterInput;
  pageSize?: number;
  currentPage?: number;
}
export interface QueryToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCategoriesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCategoryArgs {
  id?: number;
}
export interface QueryToCategoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCategoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCategoryListArgs {
  filters?: GQLCategoryFilterInput;
}
export interface QueryToCategoryListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCategoryListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToChatDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCheckoutAgreementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCmsBlocksArgs {
  identifiers?: Array<string | null>;
}
export interface QueryToCmsBlocksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCmsBlocksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCmsPageArgs {
  id?: number;
  identifier?: string;
  url_key?: string;
}
export interface QueryToCmsPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCmsPageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCompareListArgs {
  uid: string;
}
export interface QueryToCompareListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCompareListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToContactPageConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCountriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCountryArgs {
  id?: string;
}
export interface QueryToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCountryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCurrencyDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomAttributeMetadataArgs {
  attributes: Array<GQLAttributeInput>;
}
export interface QueryToCustomAttributeMetadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCustomAttributeMetadataArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerDownloadableProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerOrdersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCustomerPaymentTokensResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEmailCaptureCheckoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEmailCaptureNewsletterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetBraintreeConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetCartDisplayConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetCartForCustomerArgs {
  guestCartId?: string;
}
export interface QueryToGetCartForCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetCartForCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetHostedProUrlArgs {
  input: GQLHostedProUrlInput;
}
export interface QueryToGetHostedProUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetHostedProUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetOrderByIdArgs {
  id: number;
}
export interface QueryToGetOrderByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetOrderByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetOrderListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetPayflowLinkTokenArgs {
  input: GQLPayflowLinkTokenInput;
}
export interface QueryToGetPayflowLinkTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetPayflowLinkTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetPaymentMethodsArgs {
  guestCartId?: string;
}
export interface QueryToGetPaymentMethodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetPaymentMethodsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetStoresArgs {
  search?: string;
  country?: string;
  productsInfo?: Array<GQLProductInfoInput | null>;
}
export interface QueryToGetStoresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetStoresArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToIsEmailAvailableArgs {
  email: string;
}
export interface QueryToIsEmailAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToIsEmailAvailableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrderByInvoiceArgs {
  invoiceId: number;
}
export interface QueryToOrderByInvoiceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrderByInvoiceArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrderByRefundArgs {
  refundId: number;
}
export interface QueryToOrderByRefundResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrderByRefundArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrderByShipmentArgs {
  shipmentId: number;
}
export interface QueryToOrderByShipmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrderByShipmentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToOrderDataArgs {
  orderId: string;
}
export interface QueryToOrderDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToOrderDataArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPickupLocationsArgs {
  area?: GQLAreaInput;
  filters?: GQLPickupLocationFilterInput;
  sort?: GQLPickupLocationSortInput;
  pageSize?: number;
  currentPage?: number;
  productsInfo?: Array<GQLProductInfoInput | null>;
}
export interface QueryToPickupLocationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPickupLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProductReviewRatingsMetadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToProductsArgs {
  search?: string;
  filter?: GQLProductAttributeFilterInput;
  pageSize?: number;
  currentPage?: number;
  sort?: GQLProductAttributeSortInput;
}
export interface QueryToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRouteArgs {
  url: string;
}
export interface QueryToRouteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRouteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToS_wishlistArgs {
  sharing_code?: string;
}
export interface QueryToS_wishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToS_wishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToScandiwebMenuArgs {
  identifier: string;
}
export interface QueryToScandiwebMenuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToScandiwebMenuArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToScandiwebSliderArgs {
  id: string;
}
export interface QueryToScandiwebSliderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToScandiwebSliderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToStoreConfigResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToStoreListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTrackingDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUrlResolverArgs {
  url: string;
}
export interface QueryToUrlResolverResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUrlResolverArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStoreConfigTypeResolver<TParent = any> {
  absolute_footer?: StoreConfigToAbsolute_footerResolver<TParent>;
  access_token_lifetime?: StoreConfigToAccess_token_lifetimeResolver<TParent>;
  address_lines_quantity?: StoreConfigToAddress_lines_quantityResolver<TParent>;
  allow_guests_to_write_product_reviews?: StoreConfigToAllow_guests_to_write_product_reviewsResolver<TParent>;
  allow_items?: StoreConfigToAllow_itemsResolver<TParent>;
  allow_order?: StoreConfigToAllow_orderResolver<TParent>;
  anchor_text_for_next?: StoreConfigToAnchor_text_for_nextResolver<TParent>;
  anchor_text_for_previous?: StoreConfigToAnchor_text_for_previousResolver<TParent>;
  autocomplete_on_storefront?: StoreConfigToAutocomplete_on_storefrontResolver<TParent>;
  base_currency_code?: StoreConfigToBase_currency_codeResolver<TParent>;
  base_link_url?: StoreConfigToBase_link_urlResolver<TParent>;
  base_media_url?: StoreConfigToBase_media_urlResolver<TParent>;
  base_static_url?: StoreConfigToBase_static_urlResolver<TParent>;
  base_url?: StoreConfigToBase_urlResolver<TParent>;
  braintree_cc_vault_active?: StoreConfigToBraintree_cc_vault_activeResolver<TParent>;
  catalog_default_sort_by?: StoreConfigToCatalog_default_sort_byResolver<TParent>;
  category_fixed_product_tax_display_setting?: StoreConfigToCategory_fixed_product_tax_display_settingResolver<TParent>;
  category_url_suffix?: StoreConfigToCategory_url_suffixResolver<TParent>;
  cms_home_page?: StoreConfigToCms_home_pageResolver<TParent>;
  cms_no_cookies?: StoreConfigToCms_no_cookiesResolver<TParent>;
  cms_no_route?: StoreConfigToCms_no_routeResolver<TParent>;
  code?: StoreConfigToCodeResolver<TParent>;
  configurable_thumbnail_source?: StoreConfigToConfigurable_thumbnail_sourceResolver<TParent>;
  cookie_lifetime?: StoreConfigToCookie_lifetimeResolver<TParent>;
  cookie_link?: StoreConfigToCookie_linkResolver<TParent>;
  cookie_text?: StoreConfigToCookie_textResolver<TParent>;
  copyright?: StoreConfigToCopyrightResolver<TParent>;
  date_fields_order?: StoreConfigToDate_fields_orderResolver<TParent>;
  default_country?: StoreConfigToDefault_countryResolver<TParent>;
  default_description?: StoreConfigToDefault_descriptionResolver<TParent>;
  default_display_currency_code?: StoreConfigToDefault_display_currency_codeResolver<TParent>;
  default_keywords?: StoreConfigToDefault_keywordsResolver<TParent>;
  default_title?: StoreConfigToDefault_titleResolver<TParent>;
  delivery_instore_active?: StoreConfigToDelivery_instore_activeResolver<TParent>;
  demo_notice?: StoreConfigToDemo_noticeResolver<TParent>;
  demonotice?: StoreConfigToDemonoticeResolver<TParent>;
  display_product_stock_status?: StoreConfigToDisplay_product_stock_statusResolver<TParent>;
  downloadable_disable_guest_checkout?: StoreConfigToDownloadable_disable_guest_checkoutResolver<TParent>;
  downloadable_links_target_new_window?: StoreConfigToDownloadable_links_target_new_windowResolver<TParent>;
  front?: StoreConfigToFrontResolver<TParent>;
  grid_per_page?: StoreConfigToGrid_per_pageResolver<TParent>;
  grid_per_page_values?: StoreConfigToGrid_per_page_valuesResolver<TParent>;
  guest_checkout?: StoreConfigToGuest_checkoutResolver<TParent>;
  head_includes?: StoreConfigToHead_includesResolver<TParent>;
  head_shortcut_icon?: StoreConfigToHead_shortcut_iconResolver<TParent>;
  header_logo_src?: StoreConfigToHeader_logo_srcResolver<TParent>;
  id?: StoreConfigToIdResolver<TParent>;
  is_active?: StoreConfigToIs_activeResolver<TParent>;
  is_allowed_reorder?: StoreConfigToIs_allowed_reorderResolver<TParent>;
  is_default_store?: StoreConfigToIs_default_storeResolver<TParent>;
  is_default_store_group?: StoreConfigToIs_default_store_groupResolver<TParent>;
  is_email_confirmation_required?: StoreConfigToIs_email_confirmation_requiredResolver<TParent>;
  layered_navigation_product_count_enabled?: StoreConfigToLayered_navigation_product_count_enabledResolver<TParent>;
  list_mode?: StoreConfigToList_modeResolver<TParent>;
  list_per_page?: StoreConfigToList_per_pageResolver<TParent>;
  list_per_page_values?: StoreConfigToList_per_page_valuesResolver<TParent>;
  locale?: StoreConfigToLocaleResolver<TParent>;
  logo_alt?: StoreConfigToLogo_altResolver<TParent>;
  logo_height?: StoreConfigToLogo_heightResolver<TParent>;
  logo_width?: StoreConfigToLogo_widthResolver<TParent>;
  magento_wishlist_general_is_enabled?: StoreConfigToMagento_wishlist_general_is_enabledResolver<TParent>;
  minimum_password_length?: StoreConfigToMinimum_password_lengthResolver<TParent>;
  minimun_password_length?: StoreConfigToMinimun_password_lengthResolver<TParent>;
  name?: StoreConfigToNameResolver<TParent>;
  newsletter_general_active?: StoreConfigToNewsletter_general_activeResolver<TParent>;
  newsletter_subscription_allow_guest_subscribe?: StoreConfigToNewsletter_subscription_allow_guest_subscribeResolver<TParent>;
  newsletter_subscription_confirm?: StoreConfigToNewsletter_subscription_confirmResolver<TParent>;
  no_route?: StoreConfigToNo_routeResolver<TParent>;
  pagination_frame?: StoreConfigToPagination_frameResolver<TParent>;
  pagination_frame_skip?: StoreConfigToPagination_frame_skipResolver<TParent>;
  payment_payflowpro_cc_vault_active?: StoreConfigToPayment_payflowpro_cc_vault_activeResolver<TParent>;
  paypal_client_id?: StoreConfigToPaypal_client_idResolver<TParent>;
  paypal_sandbox_flag?: StoreConfigToPaypal_sandbox_flagResolver<TParent>;
  plp_list_mode?: StoreConfigToPlp_list_modeResolver<TParent>;
  priceTaxDisplay?: StoreConfigToPriceTaxDisplayResolver<TParent>;
  product_alert_allow_price?: StoreConfigToProduct_alert_allow_priceResolver<TParent>;
  product_alert_allow_stock?: StoreConfigToProduct_alert_allow_stockResolver<TParent>;
  product_fixed_product_tax_display_setting?: StoreConfigToProduct_fixed_product_tax_display_settingResolver<TParent>;
  product_reviews_enabled?: StoreConfigToProduct_reviews_enabledResolver<TParent>;
  product_url_suffix?: StoreConfigToProduct_url_suffixResolver<TParent>;
  product_use_categories?: StoreConfigToProduct_use_categoriesResolver<TParent>;
  redirect_dashboard?: StoreConfigToRedirect_dashboardResolver<TParent>;
  region_display_all?: StoreConfigToRegion_display_allResolver<TParent>;
  required_character_classes_number?: StoreConfigToRequired_character_classes_numberResolver<TParent>;
  reviews_allow_guest?: StoreConfigToReviews_allow_guestResolver<TParent>;
  reviews_are_enabled?: StoreConfigToReviews_are_enabledResolver<TParent>;
  root_category_id?: StoreConfigToRoot_category_idResolver<TParent>;
  root_category_uid?: StoreConfigToRoot_category_uidResolver<TParent>;
  rss_order_subscribe_allow?: StoreConfigToRss_order_subscribe_allowResolver<TParent>;
  sales_fixed_product_tax_display_setting?: StoreConfigToSales_fixed_product_tax_display_settingResolver<TParent>;
  secure_base_link_url?: StoreConfigToSecure_base_link_urlResolver<TParent>;
  secure_base_media_url?: StoreConfigToSecure_base_media_urlResolver<TParent>;
  secure_base_static_url?: StoreConfigToSecure_base_static_urlResolver<TParent>;
  secure_base_url?: StoreConfigToSecure_base_urlResolver<TParent>;
  send_friend?: StoreConfigToSend_friendResolver<TParent>;
  show_cms_breadcrumbs?: StoreConfigToShow_cms_breadcrumbsResolver<TParent>;
  show_tax_vat_number?: StoreConfigToShow_tax_vat_numberResolver<TParent>;
  show_vat_number_on_storefront?: StoreConfigToShow_vat_number_on_storefrontResolver<TParent>;
  store_code?: StoreConfigToStore_codeResolver<TParent>;
  store_group_code?: StoreConfigToStore_group_codeResolver<TParent>;
  store_group_name?: StoreConfigToStore_group_nameResolver<TParent>;
  store_name?: StoreConfigToStore_nameResolver<TParent>;
  store_sort_order?: StoreConfigToStore_sort_orderResolver<TParent>;
  terms_are_enabled?: StoreConfigToTerms_are_enabledResolver<TParent>;
  time_format?: StoreConfigToTime_formatResolver<TParent>;
  timezone?: StoreConfigToTimezoneResolver<TParent>;
  title_prefix?: StoreConfigToTitle_prefixResolver<TParent>;
  title_separator?: StoreConfigToTitle_separatorResolver<TParent>;
  title_suffix?: StoreConfigToTitle_suffixResolver<TParent>;
  use_calendar?: StoreConfigToUse_calendarResolver<TParent>;
  use_store_in_url?: StoreConfigToUse_store_in_urlResolver<TParent>;
  website_code?: StoreConfigToWebsite_codeResolver<TParent>;
  website_id?: StoreConfigToWebsite_idResolver<TParent>;
  website_name?: StoreConfigToWebsite_nameResolver<TParent>;
  weight_unit?: StoreConfigToWeight_unitResolver<TParent>;
  welcome?: StoreConfigToWelcomeResolver<TParent>;
  wishlist_general_active?: StoreConfigToWishlist_general_activeResolver<TParent>;
  year_range?: StoreConfigToYear_rangeResolver<TParent>;
}

export interface StoreConfigToAbsolute_footerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAccess_token_lifetimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAddress_lines_quantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAllow_guests_to_write_product_reviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAllow_itemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAllow_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAnchor_text_for_nextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAnchor_text_for_previousResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToAutocomplete_on_storefrontResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBase_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBase_link_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBase_media_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBase_static_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBase_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToBraintree_cc_vault_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCatalog_default_sort_byResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCategory_fixed_product_tax_display_settingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCategory_url_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCms_home_pageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCms_no_cookiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCms_no_routeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToConfigurable_thumbnail_sourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCookie_lifetimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCookie_linkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCookie_textResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToCopyrightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDate_fields_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDefault_countryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDefault_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDefault_display_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDefault_keywordsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDefault_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDelivery_instore_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDemo_noticeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDemonoticeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDisplay_product_stock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDownloadable_disable_guest_checkoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToDownloadable_links_target_new_windowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToFrontResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToGrid_per_pageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToGrid_per_page_valuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToGuest_checkoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToHead_includesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToHead_shortcut_iconResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToHeader_logo_srcResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIs_allowed_reorderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIs_default_storeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIs_default_store_groupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToIs_email_confirmation_requiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToLayered_navigation_product_count_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToList_modeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToList_per_pageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToList_per_page_valuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToLocaleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToLogo_altResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToLogo_heightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToLogo_widthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToMagento_wishlist_general_is_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToMinimum_password_lengthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToMinimun_password_lengthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToNewsletter_general_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToNewsletter_subscription_allow_guest_subscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToNewsletter_subscription_confirmResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToNo_routeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPagination_frameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPagination_frame_skipResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPayment_payflowpro_cc_vault_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPaypal_client_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPaypal_sandbox_flagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPlp_list_modeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToPriceTaxDisplayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_alert_allow_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_alert_allow_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_fixed_product_tax_display_settingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_reviews_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_url_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToProduct_use_categoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRedirect_dashboardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRegion_display_allResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRequired_character_classes_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToReviews_allow_guestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToReviews_are_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRoot_category_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRoot_category_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToRss_order_subscribe_allowResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSales_fixed_product_tax_display_settingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSecure_base_link_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSecure_base_media_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSecure_base_static_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSecure_base_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToSend_friendResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToShow_cms_breadcrumbsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToShow_tax_vat_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToShow_vat_number_on_storefrontResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToStore_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToStore_group_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToStore_group_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToStore_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToStore_sort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTerms_are_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTime_formatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTitle_prefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTitle_separatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToTitle_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToUse_calendarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToUse_store_in_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWebsite_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWebsite_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWebsite_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWeight_unitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWelcomeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToWishlist_general_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreConfigToYear_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPriceTaxDisplayTypeResolver<TParent = any> {
  product_price_display_type?: PriceTaxDisplayToProduct_price_display_typeResolver<TParent>;
  shipping_price_display_type?: PriceTaxDisplayToShipping_price_display_typeResolver<TParent>;
}

export interface PriceTaxDisplayToProduct_price_display_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceTaxDisplayToShipping_price_display_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSendFriendConfigurationTypeResolver<TParent = any> {
  enabled_for_customers?: SendFriendConfigurationToEnabled_for_customersResolver<TParent>;
  enabled_for_guests?: SendFriendConfigurationToEnabled_for_guestsResolver<TParent>;
}

export interface SendFriendConfigurationToEnabled_for_customersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SendFriendConfigurationToEnabled_for_guestsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartTypeResolver<TParent = any> {
  applied_coupon?: CartToApplied_couponResolver<TParent>;
  applied_coupons?: CartToApplied_couponsResolver<TParent>;
  available_payment_methods?: CartToAvailable_payment_methodsResolver<TParent>;
  billing_address?: CartToBilling_addressResolver<TParent>;
  email?: CartToEmailResolver<TParent>;
  gift_message?: CartToGift_messageResolver<TParent>;
  id?: CartToIdResolver<TParent>;
  is_virtual?: CartToIs_virtualResolver<TParent>;
  items?: CartToItemsResolver<TParent>;
  prices?: CartToPricesResolver<TParent>;
  selected_payment_method?: CartToSelected_payment_methodResolver<TParent>;
  shipping_addresses?: CartToShipping_addressesResolver<TParent>;
  total_quantity?: CartToTotal_quantityResolver<TParent>;
}

export interface CartToApplied_couponResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToApplied_couponsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToAvailable_payment_methodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToBilling_addressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToIs_virtualResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToSelected_payment_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToShipping_addressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartToTotal_quantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAppliedCouponTypeResolver<TParent = any> {
  code?: AppliedCouponToCodeResolver<TParent>;
}

export interface AppliedCouponToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAvailablePaymentMethodTypeResolver<TParent = any> {
  code?: AvailablePaymentMethodToCodeResolver<TParent>;
  title?: AvailablePaymentMethodToTitleResolver<TParent>;
}

export interface AvailablePaymentMethodToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailablePaymentMethodToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingCartAddressTypeResolver<TParent = any> {
  city?: BillingCartAddressToCityResolver<TParent>;
  company?: BillingCartAddressToCompanyResolver<TParent>;
  country?: BillingCartAddressToCountryResolver<TParent>;
  customer_notes?: BillingCartAddressToCustomer_notesResolver<TParent>;
  firstname?: BillingCartAddressToFirstnameResolver<TParent>;
  lastname?: BillingCartAddressToLastnameResolver<TParent>;
  postcode?: BillingCartAddressToPostcodeResolver<TParent>;
  region?: BillingCartAddressToRegionResolver<TParent>;
  street?: BillingCartAddressToStreetResolver<TParent>;
  telephone?: BillingCartAddressToTelephoneResolver<TParent>;
}

export interface BillingCartAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToCustomer_notesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCartAddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartAddressInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BillingCartAddress' | 'ShippingCartAddress' | Promise<'BillingCartAddress' | 'ShippingCartAddress'>;
}
export interface GQLCartAddressCountryTypeResolver<TParent = any> {
  code?: CartAddressCountryToCodeResolver<TParent>;
  label?: CartAddressCountryToLabelResolver<TParent>;
}

export interface CartAddressCountryToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartAddressCountryToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartAddressRegionTypeResolver<TParent = any> {
  code?: CartAddressRegionToCodeResolver<TParent>;
  label?: CartAddressRegionToLabelResolver<TParent>;
  region_id?: CartAddressRegionToRegion_idResolver<TParent>;
}

export interface CartAddressRegionToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartAddressRegionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartAddressRegionToRegion_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGiftMessageTypeResolver<TParent = any> {
  from?: GiftMessageToFromResolver<TParent>;
  message?: GiftMessageToMessageResolver<TParent>;
  to?: GiftMessageToToResolver<TParent>;
}

export interface GiftMessageToFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GiftMessageToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GiftMessageToToResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleCartItem' | 'ConfigurableCartItem' | 'DownloadableCartItem' | 'SimpleCartItem' | 'VirtualCartItem' | Promise<'BundleCartItem' | 'ConfigurableCartItem' | 'DownloadableCartItem' | 'SimpleCartItem' | 'VirtualCartItem'>;
}
export interface GQLCartItemPricesTypeResolver<TParent = any> {
  discounts?: CartItemPricesToDiscountsResolver<TParent>;
  fixed_product_taxes?: CartItemPricesToFixed_product_taxesResolver<TParent>;
  price?: CartItemPricesToPriceResolver<TParent>;
  row_total?: CartItemPricesToRow_totalResolver<TParent>;
  row_total_including_tax?: CartItemPricesToRow_total_including_taxResolver<TParent>;
  total_item_discount?: CartItemPricesToTotal_item_discountResolver<TParent>;
}

export interface CartItemPricesToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPricesToFixed_product_taxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPricesToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPricesToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPricesToRow_total_including_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemPricesToTotal_item_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDiscountTypeResolver<TParent = any> {
  amount?: DiscountToAmountResolver<TParent>;
  label?: DiscountToLabelResolver<TParent>;
}

export interface DiscountToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DiscountToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMoneyTypeResolver<TParent = any> {
  currency?: MoneyToCurrencyResolver<TParent>;
  value?: MoneyToValueResolver<TParent>;
}

export interface MoneyToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MoneyToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFixedProductTaxTypeResolver<TParent = any> {
  amount?: FixedProductTaxToAmountResolver<TParent>;
  label?: FixedProductTaxToLabelResolver<TParent>;
}

export interface FixedProductTaxToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FixedProductTaxToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'VirtualProduct' | Promise<'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'VirtualProduct'>;
}
export interface GQLCategoryInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CategoryTree' | Promise<'CategoryTree'>;
}
export interface GQLBreadcrumbTypeResolver<TParent = any> {
  category_id?: BreadcrumbToCategory_idResolver<TParent>;
  category_is_active?: BreadcrumbToCategory_is_activeResolver<TParent>;
  category_level?: BreadcrumbToCategory_levelResolver<TParent>;
  category_name?: BreadcrumbToCategory_nameResolver<TParent>;
  category_uid?: BreadcrumbToCategory_uidResolver<TParent>;
  category_url?: BreadcrumbToCategory_urlResolver<TParent>;
  category_url_key?: BreadcrumbToCategory_url_keyResolver<TParent>;
  category_url_path?: BreadcrumbToCategory_url_pathResolver<TParent>;
}

export interface BreadcrumbToCategory_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_is_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_levelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_url_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BreadcrumbToCategory_url_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCmsBlockTypeResolver<TParent = any> {
  content?: CmsBlockToContentResolver<TParent>;
  disabled?: CmsBlockToDisabledResolver<TParent>;
  identifier?: CmsBlockToIdentifierResolver<TParent>;
  title?: CmsBlockToTitleResolver<TParent>;
}

export interface CmsBlockToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsBlockToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoryProductsTypeResolver<TParent = any> {
  items?: CategoryProductsToItemsResolver<TParent>;
  page_info?: CategoryProductsToPage_infoResolver<TParent>;
  total_count?: CategoryProductsToTotal_countResolver<TParent>;
}

export interface CategoryProductsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryProductsToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryProductsToTotal_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultPageInfoTypeResolver<TParent = any> {
  current_page?: SearchResultPageInfoToCurrent_pageResolver<TParent>;
  page_size?: SearchResultPageInfoToPage_sizeResolver<TParent>;
  total_pages?: SearchResultPageInfoToTotal_pagesResolver<TParent>;
}

export interface SearchResultPageInfoToCurrent_pageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultPageInfoToPage_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultPageInfoToTotal_pagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComplexTextValueTypeResolver<TParent = any> {
  html?: ComplexTextValueToHtmlResolver<TParent>;
}

export interface ComplexTextValueToHtmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOptimizedProductImageTypeResolver<TParent = any> {
  label?: OptimizedProductImageToLabelResolver<TParent>;
  path?: OptimizedProductImageToPathResolver<TParent>;
  url?: OptimizedProductImageToUrlResolver<TParent>;
}

export interface OptimizedProductImageToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptimizedProductImageToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OptimizedProductImageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaGalleryInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ProductImage' | 'ProductVideo' | Promise<'ProductImage' | 'ProductVideo'>;
}
export interface GQLMediaGalleryEntryTypeResolver<TParent = any> {
  base?: MediaGalleryEntryToBaseResolver<TParent>;
  content?: MediaGalleryEntryToContentResolver<TParent>;
  disabled?: MediaGalleryEntryToDisabledResolver<TParent>;
  file?: MediaGalleryEntryToFileResolver<TParent>;
  id?: MediaGalleryEntryToIdResolver<TParent>;
  label?: MediaGalleryEntryToLabelResolver<TParent>;
  large?: MediaGalleryEntryToLargeResolver<TParent>;
  media_type?: MediaGalleryEntryToMedia_typeResolver<TParent>;
  position?: MediaGalleryEntryToPositionResolver<TParent>;
  thumbnail?: MediaGalleryEntryToThumbnailResolver<TParent>;
  types?: MediaGalleryEntryToTypesResolver<TParent>;
  uid?: MediaGalleryEntryToUidResolver<TParent>;
  video_content?: MediaGalleryEntryToVideo_contentResolver<TParent>;
}

export interface MediaGalleryEntryToBaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToLargeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToMedia_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToTypesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryEntryToVideo_contentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaGalleryImageOfTypeTypeResolver<TParent = any> {
  type?: MediaGalleryImageOfTypeToTypeResolver<TParent>;
  url?: MediaGalleryImageOfTypeToUrlResolver<TParent>;
}

export interface MediaGalleryImageOfTypeToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaGalleryImageOfTypeToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductMediaGalleryEntriesContentTypeResolver<TParent = any> {
  base64_encoded_data?: ProductMediaGalleryEntriesContentToBase64_encoded_dataResolver<TParent>;
  name?: ProductMediaGalleryEntriesContentToNameResolver<TParent>;
  type?: ProductMediaGalleryEntriesContentToTypeResolver<TParent>;
}

export interface ProductMediaGalleryEntriesContentToBase64_encoded_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesContentToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesContentToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductMediaGalleryEntriesVideoContentTypeResolver<TParent = any> {
  media_type?: ProductMediaGalleryEntriesVideoContentToMedia_typeResolver<TParent>;
  video_description?: ProductMediaGalleryEntriesVideoContentToVideo_descriptionResolver<TParent>;
  video_metadata?: ProductMediaGalleryEntriesVideoContentToVideo_metadataResolver<TParent>;
  video_provider?: ProductMediaGalleryEntriesVideoContentToVideo_providerResolver<TParent>;
  video_title?: ProductMediaGalleryEntriesVideoContentToVideo_titleResolver<TParent>;
  video_url?: ProductMediaGalleryEntriesVideoContentToVideo_urlResolver<TParent>;
}

export interface ProductMediaGalleryEntriesVideoContentToMedia_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesVideoContentToVideo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesVideoContentToVideo_metadataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesVideoContentToVideo_providerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesVideoContentToVideo_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductMediaGalleryEntriesVideoContentToVideo_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductPricesTypeResolver<TParent = any> {
  maximalPrice?: ProductPricesToMaximalPriceResolver<TParent>;
  minimalPrice?: ProductPricesToMinimalPriceResolver<TParent>;
  regularPrice?: ProductPricesToRegularPriceResolver<TParent>;
}

export interface ProductPricesToMaximalPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPricesToMinimalPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPricesToRegularPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPriceTypeResolver<TParent = any> {
  adjustments?: PriceToAdjustmentsResolver<TParent>;
  amount?: PriceToAmountResolver<TParent>;
}

export interface PriceToAdjustmentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPriceAdjustmentTypeResolver<TParent = any> {
  amount?: PriceAdjustmentToAmountResolver<TParent>;
  code?: PriceAdjustmentToCodeResolver<TParent>;
  description?: PriceAdjustmentToDescriptionResolver<TParent>;
}

export interface PriceAdjustmentToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceAdjustmentToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceAdjustmentToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPriceRangeTypeResolver<TParent = any> {
  maximum_price?: PriceRangeToMaximum_priceResolver<TParent>;
  minimum_price?: PriceRangeToMinimum_priceResolver<TParent>;
}

export interface PriceRangeToMaximum_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PriceRangeToMinimum_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductPriceTypeResolver<TParent = any> {
  default_final_price?: ProductPriceToDefault_final_priceResolver<TParent>;
  default_final_price_excl_tax?: ProductPriceToDefault_final_price_excl_taxResolver<TParent>;
  default_price?: ProductPriceToDefault_priceResolver<TParent>;
  discount?: ProductPriceToDiscountResolver<TParent>;
  final_price?: ProductPriceToFinal_priceResolver<TParent>;
  final_price_excl_tax?: ProductPriceToFinal_price_excl_taxResolver<TParent>;
  fixed_product_taxes?: ProductPriceToFixed_product_taxesResolver<TParent>;
  regular_price?: ProductPriceToRegular_priceResolver<TParent>;
  regular_price_excl_tax?: ProductPriceToRegular_price_excl_taxResolver<TParent>;
}

export interface ProductPriceToDefault_final_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToDefault_final_price_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToDefault_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToFinal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToFinal_price_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToFixed_product_taxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToRegular_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductPriceToRegular_price_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductDiscountTypeResolver<TParent = any> {
  amount_off?: ProductDiscountToAmount_offResolver<TParent>;
  percent_off?: ProductDiscountToPercent_offResolver<TParent>;
}

export interface ProductDiscountToAmount_offResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductDiscountToPercent_offResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTierPriceTypeResolver<TParent = any> {
  discount?: TierPriceToDiscountResolver<TParent>;
  final_price?: TierPriceToFinal_priceResolver<TParent>;
  quantity?: TierPriceToQuantityResolver<TParent>;
}

export interface TierPriceToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TierPriceToFinal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TierPriceToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductLinksInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ProductLinks' | Promise<'ProductLinks'>;
}
export interface GQLProductReviewsTypeResolver<TParent = any> {
  items?: ProductReviewsToItemsResolver<TParent>;
  page_info?: ProductReviewsToPage_infoResolver<TParent>;
}

export interface ProductReviewsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewsToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductReviewTypeResolver<TParent = any> {
  average_rating?: ProductReviewToAverage_ratingResolver<TParent>;
  created_at?: ProductReviewToCreated_atResolver<TParent>;
  nickname?: ProductReviewToNicknameResolver<TParent>;
  product?: ProductReviewToProductResolver<TParent>;
  ratings_breakdown?: ProductReviewToRatings_breakdownResolver<TParent>;
  summary?: ProductReviewToSummaryResolver<TParent>;
  text?: ProductReviewToTextResolver<TParent>;
}

export interface ProductReviewToAverage_ratingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToNicknameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToRatings_breakdownResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewToTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductReviewRatingTypeResolver<TParent = any> {
  name?: ProductReviewRatingToNameResolver<TParent>;
  value?: ProductReviewRatingToValueResolver<TParent>;
}

export interface ProductReviewRatingToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewRatingToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttributeWithValueTypeResolver<TParent = any> {
  attribute_code?: AttributeWithValueToAttribute_codeResolver<TParent>;
  attribute_group_code?: AttributeWithValueToAttribute_group_codeResolver<TParent>;
  attribute_group_id?: AttributeWithValueToAttribute_group_idResolver<TParent>;
  attribute_group_name?: AttributeWithValueToAttribute_group_nameResolver<TParent>;
  attribute_id?: AttributeWithValueToAttribute_idResolver<TParent>;
  attribute_label?: AttributeWithValueToAttribute_labelResolver<TParent>;
  attribute_options?: AttributeWithValueToAttribute_optionsResolver<TParent>;
  attribute_type?: AttributeWithValueToAttribute_typeResolver<TParent>;
  attribute_value?: AttributeWithValueToAttribute_valueResolver<TParent>;
  entity_type?: AttributeWithValueToEntity_typeResolver<TParent>;
  used_in_product_listing?: AttributeWithValueToUsed_in_product_listingResolver<TParent>;
}

export interface AttributeWithValueToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_group_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_group_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_group_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToAttribute_valueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToEntity_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueToUsed_in_product_listingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttributeWithValueOptionTypeResolver<TParent = any> {
  label?: AttributeWithValueOptionToLabelResolver<TParent>;
  swatch_data?: AttributeWithValueOptionToSwatch_dataResolver<TParent>;
  value?: AttributeWithValueOptionToValueResolver<TParent>;
}

export interface AttributeWithValueOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueOptionToSwatch_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttributeWithValueSwatchDataTypeResolver<TParent = any> {
  type?: AttributeWithValueSwatchDataToTypeResolver<TParent>;
  value?: AttributeWithValueSwatchDataToValueResolver<TParent>;
}

export interface AttributeWithValueSwatchDataToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeWithValueSwatchDataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductStockItemTypeResolver<TParent = any> {
  in_stock?: ProductStockItemToIn_stockResolver<TParent>;
  max_sale_qty?: ProductStockItemToMax_sale_qtyResolver<TParent>;
  min_sale_qty?: ProductStockItemToMin_sale_qtyResolver<TParent>;
  qty?: ProductStockItemToQtyResolver<TParent>;
  qty_increments?: ProductStockItemToQty_incrementsResolver<TParent>;
}

export interface ProductStockItemToIn_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductStockItemToMax_sale_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductStockItemToMin_sale_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductStockItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductStockItemToQty_incrementsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductTierPricesTypeResolver<TParent = any> {
  customer_group_id?: ProductTierPricesToCustomer_group_idResolver<TParent>;
  percentage_value?: ProductTierPricesToPercentage_valueResolver<TParent>;
  qty?: ProductTierPricesToQtyResolver<TParent>;
  value?: ProductTierPricesToValueResolver<TParent>;
  website_id?: ProductTierPricesToWebsite_idResolver<TParent>;
}

export interface ProductTierPricesToCustomer_group_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPricesToPercentage_valueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPricesToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPricesToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductTierPricesToWebsite_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUrlRewriteTypeResolver<TParent = any> {
  parameters?: UrlRewriteToParametersResolver<TParent>;
  url?: UrlRewriteToUrlResolver<TParent>;
}

export interface UrlRewriteToParametersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UrlRewriteToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHttpQueryParameterTypeResolver<TParent = any> {
  name?: HttpQueryParameterToNameResolver<TParent>;
  value?: HttpQueryParameterToValueResolver<TParent>;
}

export interface HttpQueryParameterToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HttpQueryParameterToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWebsiteTypeResolver<TParent = any> {
  code?: WebsiteToCodeResolver<TParent>;
  default_group_id?: WebsiteToDefault_group_idResolver<TParent>;
  id?: WebsiteToIdResolver<TParent>;
  is_default?: WebsiteToIs_defaultResolver<TParent>;
  name?: WebsiteToNameResolver<TParent>;
  sort_order?: WebsiteToSort_orderResolver<TParent>;
}

export interface WebsiteToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsiteToDefault_group_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsiteToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsiteToIs_defaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsiteToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WebsiteToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartPricesTypeResolver<TParent = any> {
  applied_taxes?: CartPricesToApplied_taxesResolver<TParent>;
  discount?: CartPricesToDiscountResolver<TParent>;
  discounts?: CartPricesToDiscountsResolver<TParent>;
  grand_total?: CartPricesToGrand_totalResolver<TParent>;
  subtotal_excluding_tax?: CartPricesToSubtotal_excluding_taxResolver<TParent>;
  subtotal_including_tax?: CartPricesToSubtotal_including_taxResolver<TParent>;
  subtotal_with_discount_excluding_tax?: CartPricesToSubtotal_with_discount_excluding_taxResolver<TParent>;
}

export interface CartPricesToApplied_taxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToDiscountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToSubtotal_excluding_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToSubtotal_including_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartPricesToSubtotal_with_discount_excluding_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartTaxItemTypeResolver<TParent = any> {
  amount?: CartTaxItemToAmountResolver<TParent>;
  label?: CartTaxItemToLabelResolver<TParent>;
}

export interface CartTaxItemToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartTaxItemToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartDiscountTypeResolver<TParent = any> {
  amount?: CartDiscountToAmountResolver<TParent>;
  label?: CartDiscountToLabelResolver<TParent>;
}

export interface CartDiscountToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDiscountToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedPaymentMethodTypeResolver<TParent = any> {
  code?: SelectedPaymentMethodToCodeResolver<TParent>;
  purchase_order_number?: SelectedPaymentMethodToPurchase_order_numberResolver<TParent>;
  title?: SelectedPaymentMethodToTitleResolver<TParent>;
}

export interface SelectedPaymentMethodToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedPaymentMethodToPurchase_order_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedPaymentMethodToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingCartAddressTypeResolver<TParent = any> {
  available_shipping_methods?: ShippingCartAddressToAvailable_shipping_methodsResolver<TParent>;
  cart_items?: ShippingCartAddressToCart_itemsResolver<TParent>;
  cart_items_v2?: ShippingCartAddressToCart_items_v2Resolver<TParent>;
  city?: ShippingCartAddressToCityResolver<TParent>;
  company?: ShippingCartAddressToCompanyResolver<TParent>;
  country?: ShippingCartAddressToCountryResolver<TParent>;
  customer_notes?: ShippingCartAddressToCustomer_notesResolver<TParent>;
  firstname?: ShippingCartAddressToFirstnameResolver<TParent>;
  items_weight?: ShippingCartAddressToItems_weightResolver<TParent>;
  lastname?: ShippingCartAddressToLastnameResolver<TParent>;
  pickup_location_code?: ShippingCartAddressToPickup_location_codeResolver<TParent>;
  postcode?: ShippingCartAddressToPostcodeResolver<TParent>;
  region?: ShippingCartAddressToRegionResolver<TParent>;
  selected_shipping_method?: ShippingCartAddressToSelected_shipping_methodResolver<TParent>;
  street?: ShippingCartAddressToStreetResolver<TParent>;
  telephone?: ShippingCartAddressToTelephoneResolver<TParent>;
}

export interface ShippingCartAddressToAvailable_shipping_methodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCart_itemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCart_items_v2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToCustomer_notesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToItems_weightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToPickup_location_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToSelected_shipping_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingCartAddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAvailableShippingMethodTypeResolver<TParent = any> {
  amount?: AvailableShippingMethodToAmountResolver<TParent>;
  available?: AvailableShippingMethodToAvailableResolver<TParent>;
  base_amount?: AvailableShippingMethodToBase_amountResolver<TParent>;
  carrier_code?: AvailableShippingMethodToCarrier_codeResolver<TParent>;
  carrier_title?: AvailableShippingMethodToCarrier_titleResolver<TParent>;
  error_message?: AvailableShippingMethodToError_messageResolver<TParent>;
  method_code?: AvailableShippingMethodToMethod_codeResolver<TParent>;
  method_title?: AvailableShippingMethodToMethod_titleResolver<TParent>;
  price_excl_tax?: AvailableShippingMethodToPrice_excl_taxResolver<TParent>;
  price_incl_tax?: AvailableShippingMethodToPrice_incl_taxResolver<TParent>;
}

export interface AvailableShippingMethodToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToBase_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToCarrier_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToCarrier_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToError_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToMethod_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToMethod_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToPrice_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AvailableShippingMethodToPrice_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemQuantityTypeResolver<TParent = any> {
  cart_item_id?: CartItemQuantityToCart_item_idResolver<TParent>;
  quantity?: CartItemQuantityToQuantityResolver<TParent>;
}

export interface CartItemQuantityToCart_item_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemQuantityToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedShippingMethodTypeResolver<TParent = any> {
  amount?: SelectedShippingMethodToAmountResolver<TParent>;
  base_amount?: SelectedShippingMethodToBase_amountResolver<TParent>;
  carrier_code?: SelectedShippingMethodToCarrier_codeResolver<TParent>;
  carrier_title?: SelectedShippingMethodToCarrier_titleResolver<TParent>;
  method_code?: SelectedShippingMethodToMethod_codeResolver<TParent>;
  method_title?: SelectedShippingMethodToMethod_titleResolver<TParent>;
}

export interface SelectedShippingMethodToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedShippingMethodToBase_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedShippingMethodToCarrier_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedShippingMethodToCarrier_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedShippingMethodToMethod_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedShippingMethodToMethod_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoryResultTypeResolver<TParent = any> {
  items?: CategoryResultToItemsResolver<TParent>;
  page_info?: CategoryResultToPage_infoResolver<TParent>;
  total_count?: CategoryResultToTotal_countResolver<TParent>;
}

export interface CategoryResultToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryResultToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryResultToTotal_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoryTreeTypeResolver<TParent = any> {
  available_sort_by?: CategoryTreeToAvailable_sort_byResolver<TParent>;
  breadcrumbs?: CategoryTreeToBreadcrumbsResolver<TParent>;
  canonical_url?: CategoryTreeToCanonical_urlResolver<TParent>;
  children?: CategoryTreeToChildrenResolver<TParent>;
  children_count?: CategoryTreeToChildren_countResolver<TParent>;
  cms_block?: CategoryTreeToCms_blockResolver<TParent>;
  created_at?: CategoryTreeToCreated_atResolver<TParent>;
  custom_layout_update_file?: CategoryTreeToCustom_layout_update_fileResolver<TParent>;
  default_sort_by?: CategoryTreeToDefault_sort_byResolver<TParent>;
  description?: CategoryTreeToDescriptionResolver<TParent>;
  display_mode?: CategoryTreeToDisplay_modeResolver<TParent>;
  filter_price_range?: CategoryTreeToFilter_price_rangeResolver<TParent>;
  id?: CategoryTreeToIdResolver<TParent>;
  image?: CategoryTreeToImageResolver<TParent>;
  include_in_menu?: CategoryTreeToInclude_in_menuResolver<TParent>;
  is_active?: CategoryTreeToIs_activeResolver<TParent>;
  is_anchor?: CategoryTreeToIs_anchorResolver<TParent>;
  landing_page?: CategoryTreeToLanding_pageResolver<TParent>;
  level?: CategoryTreeToLevelResolver<TParent>;
  meta_description?: CategoryTreeToMeta_descriptionResolver<TParent>;
  meta_keywords?: CategoryTreeToMeta_keywordsResolver<TParent>;
  meta_title?: CategoryTreeToMeta_titleResolver<TParent>;
  name?: CategoryTreeToNameResolver<TParent>;
  path?: CategoryTreeToPathResolver<TParent>;
  path_in_store?: CategoryTreeToPath_in_storeResolver<TParent>;
  position?: CategoryTreeToPositionResolver<TParent>;
  product_count?: CategoryTreeToProduct_countResolver<TParent>;
  products?: CategoryTreeToProductsResolver<TParent>;
  redirect_code?: CategoryTreeToRedirect_codeResolver<TParent>;
  relative_url?: CategoryTreeToRelative_urlResolver<TParent>;
  type?: CategoryTreeToTypeResolver<TParent>;
  uid?: CategoryTreeToUidResolver<TParent>;
  updated_at?: CategoryTreeToUpdated_atResolver<TParent>;
  url?: CategoryTreeToUrlResolver<TParent>;
  url_key?: CategoryTreeToUrl_keyResolver<TParent>;
  url_path?: CategoryTreeToUrl_pathResolver<TParent>;
  url_suffix?: CategoryTreeToUrl_suffixResolver<TParent>;
}

export interface CategoryTreeToAvailable_sort_byResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToBreadcrumbsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToChildrenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToChildren_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToCms_blockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToCustom_layout_update_fileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToDefault_sort_byResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToDisplay_modeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToFilter_price_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToInclude_in_menuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToIs_anchorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToLanding_pageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToLevelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToMeta_keywordsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToPath_in_storeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToProduct_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToProductsArgs {
  pageSize?: number;
  currentPage?: number;
  sort?: GQLProductAttributeSortInput;
}
export interface CategoryTreeToProductsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CategoryTreeToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoryTreeToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoutableInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CategoryTree' | 'CmsPage' | 'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'VirtualProduct' | Promise<'CategoryTree' | 'CmsPage' | 'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'GroupedProduct' | 'VirtualProduct'>;
}
export interface GQLChatDataTypeResolver<TParent = any> {
  api_space_id?: ChatDataToApi_space_idResolver<TParent>;
  cookie_name?: ChatDataToCookie_nameResolver<TParent>;
  is_enabled?: ChatDataToIs_enabledResolver<TParent>;
}

export interface ChatDataToApi_space_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChatDataToCookie_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChatDataToIs_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCheckoutAgreementTypeResolver<TParent = any> {
  agreement_id?: CheckoutAgreementToAgreement_idResolver<TParent>;
  checkbox_text?: CheckoutAgreementToCheckbox_textResolver<TParent>;
  content?: CheckoutAgreementToContentResolver<TParent>;
  content_height?: CheckoutAgreementToContent_heightResolver<TParent>;
  is_html?: CheckoutAgreementToIs_htmlResolver<TParent>;
  mode?: CheckoutAgreementToModeResolver<TParent>;
  name?: CheckoutAgreementToNameResolver<TParent>;
}

export interface CheckoutAgreementToAgreement_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToCheckbox_textResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToContent_heightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToIs_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutAgreementToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCmsBlocksTypeResolver<TParent = any> {
  items?: CmsBlocksToItemsResolver<TParent>;
}

export interface CmsBlocksToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCmsPageTypeResolver<TParent = any> {
  content?: CmsPageToContentResolver<TParent>;
  content_heading?: CmsPageToContent_headingResolver<TParent>;
  identifier?: CmsPageToIdentifierResolver<TParent>;
  meta_description?: CmsPageToMeta_descriptionResolver<TParent>;
  meta_keywords?: CmsPageToMeta_keywordsResolver<TParent>;
  meta_title?: CmsPageToMeta_titleResolver<TParent>;
  page_layout?: CmsPageToPage_layoutResolver<TParent>;
  page_width?: CmsPageToPage_widthResolver<TParent>;
  redirect_code?: CmsPageToRedirect_codeResolver<TParent>;
  relative_url?: CmsPageToRelative_urlResolver<TParent>;
  title?: CmsPageToTitleResolver<TParent>;
  type?: CmsPageToTypeResolver<TParent>;
  url_key?: CmsPageToUrl_keyResolver<TParent>;
}

export interface CmsPageToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToContent_headingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToMeta_keywordsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToPage_layoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToPage_widthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CmsPageToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCompareListTypeResolver<TParent = any> {
  attributes?: CompareListToAttributesResolver<TParent>;
  item_count?: CompareListToItem_countResolver<TParent>;
  items?: CompareListToItemsResolver<TParent>;
  uid?: CompareListToUidResolver<TParent>;
}

export interface CompareListToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompareListToItem_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompareListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CompareListToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComparableAttributeTypeResolver<TParent = any> {
  code?: ComparableAttributeToCodeResolver<TParent>;
  label?: ComparableAttributeToLabelResolver<TParent>;
}

export interface ComparableAttributeToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComparableAttributeToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLComparableItemTypeResolver<TParent = any> {
  attributes?: ComparableItemToAttributesResolver<TParent>;
  product?: ComparableItemToProductResolver<TParent>;
  uid?: ComparableItemToUidResolver<TParent>;
}

export interface ComparableItemToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComparableItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ComparableItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductAttributeTypeResolver<TParent = any> {
  code?: ProductAttributeToCodeResolver<TParent>;
  value?: ProductAttributeToValueResolver<TParent>;
}

export interface ProductAttributeToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductAttributeToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactPageConfigTypeResolver<TParent = any> {
  enabled?: ContactPageConfigToEnabledResolver<TParent>;
}

export interface ContactPageConfigToEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCountryTypeResolver<TParent = any> {
  available_regions?: CountryToAvailable_regionsResolver<TParent>;
  full_name_english?: CountryToFull_name_englishResolver<TParent>;
  full_name_locale?: CountryToFull_name_localeResolver<TParent>;
  id?: CountryToIdResolver<TParent>;
  is_state_required?: CountryToIs_state_requiredResolver<TParent>;
  three_letter_abbreviation?: CountryToThree_letter_abbreviationResolver<TParent>;
  two_letter_abbreviation?: CountryToTwo_letter_abbreviationResolver<TParent>;
}

export interface CountryToAvailable_regionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToFull_name_englishResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToFull_name_localeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToIs_state_requiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToThree_letter_abbreviationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CountryToTwo_letter_abbreviationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRegionTypeResolver<TParent = any> {
  code?: RegionToCodeResolver<TParent>;
  id?: RegionToIdResolver<TParent>;
  name?: RegionToNameResolver<TParent>;
}

export interface RegionToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RegionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCurrencyTypeResolver<TParent = any> {
  available_currency_codes?: CurrencyToAvailable_currency_codesResolver<TParent>;
  base_currency_code?: CurrencyToBase_currency_codeResolver<TParent>;
  base_currency_symbol?: CurrencyToBase_currency_symbolResolver<TParent>;
  default_display_currecy_code?: CurrencyToDefault_display_currecy_codeResolver<TParent>;
  default_display_currecy_symbol?: CurrencyToDefault_display_currecy_symbolResolver<TParent>;
  default_display_currency_code?: CurrencyToDefault_display_currency_codeResolver<TParent>;
  default_display_currency_symbol?: CurrencyToDefault_display_currency_symbolResolver<TParent>;
  exchange_rates?: CurrencyToExchange_ratesResolver<TParent>;
  id?: CurrencyToIdResolver<TParent>;
  label?: CurrencyToLabelResolver<TParent>;
  value?: CurrencyToValueResolver<TParent>;
}

export interface CurrencyToAvailable_currency_codesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToBase_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToBase_currency_symbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToDefault_display_currecy_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToDefault_display_currecy_symbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToDefault_display_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToDefault_display_currency_symbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToExchange_ratesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExchangeRateTypeResolver<TParent = any> {
  currency_to?: ExchangeRateToCurrency_toResolver<TParent>;
  rate?: ExchangeRateToRateResolver<TParent>;
}

export interface ExchangeRateToCurrency_toResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ExchangeRateToRateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCurrencyConfigTypeResolver<TParent = any> {
  available_currencies_data?: CurrencyConfigToAvailable_currencies_dataResolver<TParent>;
  current_currency_code?: CurrencyConfigToCurrent_currency_codeResolver<TParent>;
}

export interface CurrencyConfigToAvailable_currencies_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyConfigToCurrent_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomAttributeMetadataTypeResolver<TParent = any> {
  items?: CustomAttributeMetadataToItemsResolver<TParent>;
}

export interface CustomAttributeMetadataToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttributeTypeResolver<TParent = any> {
  attribute_code?: AttributeToAttribute_codeResolver<TParent>;
  attribute_options?: AttributeToAttribute_optionsResolver<TParent>;
  attribute_type?: AttributeToAttribute_typeResolver<TParent>;
  entity_type?: AttributeToEntity_typeResolver<TParent>;
  input_type?: AttributeToInput_typeResolver<TParent>;
  storefront_properties?: AttributeToStorefront_propertiesResolver<TParent>;
}

export interface AttributeToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeToAttribute_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeToAttribute_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeToEntity_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeToInput_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeToStorefront_propertiesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAttributeOptionTypeResolver<TParent = any> {
  label?: AttributeOptionToLabelResolver<TParent>;
  value?: AttributeOptionToValueResolver<TParent>;
}

export interface AttributeOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AttributeOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStorefrontPropertiesTypeResolver<TParent = any> {
  position?: StorefrontPropertiesToPositionResolver<TParent>;
  use_in_layered_navigation?: StorefrontPropertiesToUse_in_layered_navigationResolver<TParent>;
  use_in_product_listing?: StorefrontPropertiesToUse_in_product_listingResolver<TParent>;
  use_in_search_results_layered_navigation?: StorefrontPropertiesToUse_in_search_results_layered_navigationResolver<TParent>;
  visible_on_catalog_pages?: StorefrontPropertiesToVisible_on_catalog_pagesResolver<TParent>;
}

export interface StorefrontPropertiesToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StorefrontPropertiesToUse_in_layered_navigationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StorefrontPropertiesToUse_in_product_listingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StorefrontPropertiesToUse_in_search_results_layered_navigationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StorefrontPropertiesToVisible_on_catalog_pagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerTypeResolver<TParent = any> {
  addresses?: CustomerToAddressesResolver<TParent>;
  allow_remote_shopping_assistance?: CustomerToAllow_remote_shopping_assistanceResolver<TParent>;
  compare_list?: CustomerToCompare_listResolver<TParent>;
  confirmation_required?: CustomerToConfirmation_requiredResolver<TParent>;
  created_at?: CustomerToCreated_atResolver<TParent>;
  date_of_birth?: CustomerToDate_of_birthResolver<TParent>;
  default_billing?: CustomerToDefault_billingResolver<TParent>;
  default_shipping?: CustomerToDefault_shippingResolver<TParent>;
  dob?: CustomerToDobResolver<TParent>;
  email?: CustomerToEmailResolver<TParent>;
  firstname?: CustomerToFirstnameResolver<TParent>;
  gender?: CustomerToGenderResolver<TParent>;
  group_id?: CustomerToGroup_idResolver<TParent>;
  id?: CustomerToIdResolver<TParent>;
  is_subscribed?: CustomerToIs_subscribedResolver<TParent>;
  lastname?: CustomerToLastnameResolver<TParent>;
  middlename?: CustomerToMiddlenameResolver<TParent>;
  orders?: CustomerToOrdersResolver<TParent>;
  prefix?: CustomerToPrefixResolver<TParent>;
  reviews?: CustomerToReviewsResolver<TParent>;
  suffix?: CustomerToSuffixResolver<TParent>;
  taxvat?: CustomerToTaxvatResolver<TParent>;
  wishlist?: CustomerToWishlistResolver<TParent>;
  wishlist_v2?: CustomerToWishlist_v2Resolver<TParent>;
  wishlists?: CustomerToWishlistsResolver<TParent>;
}

export interface CustomerToAddressesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToAllow_remote_shopping_assistanceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToCompare_listResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToConfirmation_requiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDate_of_birthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDefault_billingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDefault_shippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToDobResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToGroup_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToIs_subscribedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToMiddlenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToOrdersArgs {
  filter?: GQLCustomerOrdersFilterInput;
  currentPage?: number;
  pageSize?: number;
}
export interface CustomerToOrdersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CustomerToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface CustomerToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CustomerToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToSuffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToTaxvatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToWishlist_v2Args {
  id: string;
}
export interface CustomerToWishlist_v2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: CustomerToWishlist_v2Args, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerToWishlistsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface CustomerToWishlistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CustomerToWishlistsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerAddressTypeResolver<TParent = any> {
  city?: CustomerAddressToCityResolver<TParent>;
  company?: CustomerAddressToCompanyResolver<TParent>;
  country_code?: CustomerAddressToCountry_codeResolver<TParent>;
  country_id?: CustomerAddressToCountry_idResolver<TParent>;
  custom_attributes?: CustomerAddressToCustom_attributesResolver<TParent>;
  customer_id?: CustomerAddressToCustomer_idResolver<TParent>;
  default_billing?: CustomerAddressToDefault_billingResolver<TParent>;
  default_shipping?: CustomerAddressToDefault_shippingResolver<TParent>;
  extension_attributes?: CustomerAddressToExtension_attributesResolver<TParent>;
  fax?: CustomerAddressToFaxResolver<TParent>;
  firstname?: CustomerAddressToFirstnameResolver<TParent>;
  id?: CustomerAddressToIdResolver<TParent>;
  lastname?: CustomerAddressToLastnameResolver<TParent>;
  middlename?: CustomerAddressToMiddlenameResolver<TParent>;
  postcode?: CustomerAddressToPostcodeResolver<TParent>;
  prefix?: CustomerAddressToPrefixResolver<TParent>;
  region?: CustomerAddressToRegionResolver<TParent>;
  region_id?: CustomerAddressToRegion_idResolver<TParent>;
  street?: CustomerAddressToStreetResolver<TParent>;
  suffix?: CustomerAddressToSuffixResolver<TParent>;
  telephone?: CustomerAddressToTelephoneResolver<TParent>;
  vat_id?: CustomerAddressToVat_idResolver<TParent>;
}

export interface CustomerAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToCountry_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToCountry_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToCustom_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToCustomer_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToDefault_billingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToDefault_shippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToExtension_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToFaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToMiddlenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToRegion_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToSuffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressToVat_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerAddressAttributeTypeResolver<TParent = any> {
  attribute_code?: CustomerAddressAttributeToAttribute_codeResolver<TParent>;
  value?: CustomerAddressAttributeToValueResolver<TParent>;
}

export interface CustomerAddressAttributeToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressAttributeToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerAddressRegionTypeResolver<TParent = any> {
  region?: CustomerAddressRegionToRegionResolver<TParent>;
  region_code?: CustomerAddressRegionToRegion_codeResolver<TParent>;
  region_id?: CustomerAddressRegionToRegion_idResolver<TParent>;
}

export interface CustomerAddressRegionToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressRegionToRegion_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerAddressRegionToRegion_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerOrdersTypeResolver<TParent = any> {
  items?: CustomerOrdersToItemsResolver<TParent>;
  page_info?: CustomerOrdersToPage_infoResolver<TParent>;
  total_count?: CustomerOrdersToTotal_countResolver<TParent>;
}

export interface CustomerOrdersToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrdersToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrdersToTotal_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerOrderTypeResolver<TParent = any> {
  billing_address?: CustomerOrderToBilling_addressResolver<TParent>;
  can_reorder?: CustomerOrderToCan_reorderResolver<TParent>;
  carrier?: CustomerOrderToCarrierResolver<TParent>;
  comments?: CustomerOrderToCommentsResolver<TParent>;
  created_at?: CustomerOrderToCreated_atResolver<TParent>;
  credit_memos?: CustomerOrderToCredit_memosResolver<TParent>;
  gift_message?: CustomerOrderToGift_messageResolver<TParent>;
  grand_total?: CustomerOrderToGrand_totalResolver<TParent>;
  id?: CustomerOrderToIdResolver<TParent>;
  increment_id?: CustomerOrderToIncrement_idResolver<TParent>;
  invoices?: CustomerOrderToInvoicesResolver<TParent>;
  items?: CustomerOrderToItemsResolver<TParent>;
  number?: CustomerOrderToNumberResolver<TParent>;
  order_date?: CustomerOrderToOrder_dateResolver<TParent>;
  order_number?: CustomerOrderToOrder_numberResolver<TParent>;
  payment_methods?: CustomerOrderToPayment_methodsResolver<TParent>;
  rss_link?: CustomerOrderToRss_linkResolver<TParent>;
  shipments?: CustomerOrderToShipmentsResolver<TParent>;
  shipping_address?: CustomerOrderToShipping_addressResolver<TParent>;
  shipping_method?: CustomerOrderToShipping_methodResolver<TParent>;
  status?: CustomerOrderToStatusResolver<TParent>;
  total?: CustomerOrderToTotalResolver<TParent>;
}

export interface CustomerOrderToBilling_addressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToCan_reorderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToCarrierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToCredit_memosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToIncrement_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToInvoicesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToOrder_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToOrder_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToPayment_methodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToRss_linkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToShipmentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToShipping_addressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToShipping_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerOrderToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderAddressTypeResolver<TParent = any> {
  city?: OrderAddressToCityResolver<TParent>;
  company?: OrderAddressToCompanyResolver<TParent>;
  country_code?: OrderAddressToCountry_codeResolver<TParent>;
  country_id?: OrderAddressToCountry_idResolver<TParent>;
  fax?: OrderAddressToFaxResolver<TParent>;
  firstname?: OrderAddressToFirstnameResolver<TParent>;
  lastname?: OrderAddressToLastnameResolver<TParent>;
  middlename?: OrderAddressToMiddlenameResolver<TParent>;
  postcode?: OrderAddressToPostcodeResolver<TParent>;
  prefix?: OrderAddressToPrefixResolver<TParent>;
  region?: OrderAddressToRegionResolver<TParent>;
  region_id?: OrderAddressToRegion_idResolver<TParent>;
  street?: OrderAddressToStreetResolver<TParent>;
  suffix?: OrderAddressToSuffixResolver<TParent>;
  telephone?: OrderAddressToTelephoneResolver<TParent>;
  vat_id?: OrderAddressToVat_idResolver<TParent>;
}

export interface OrderAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToCountry_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToCountry_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToFaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToMiddlenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToRegion_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToSuffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderAddressToVat_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSalesCommentItemTypeResolver<TParent = any> {
  message?: SalesCommentItemToMessageResolver<TParent>;
  timestamp?: SalesCommentItemToTimestampResolver<TParent>;
}

export interface SalesCommentItemToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SalesCommentItemToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreditMemoTypeResolver<TParent = any> {
  comments?: CreditMemoToCommentsResolver<TParent>;
  id?: CreditMemoToIdResolver<TParent>;
  items?: CreditMemoToItemsResolver<TParent>;
  number?: CreditMemoToNumberResolver<TParent>;
  total?: CreditMemoToTotalResolver<TParent>;
}

export interface CreditMemoToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreditMemoItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleCreditMemoItem' | 'CreditMemoItem' | 'DownloadableCreditMemoItem' | Promise<'BundleCreditMemoItem' | 'CreditMemoItem' | 'DownloadableCreditMemoItem'>;
}
export interface GQLOrderItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleOrderItem' | 'DownloadableOrderItem' | 'OrderItem' | Promise<'BundleOrderItem' | 'DownloadableOrderItem' | 'OrderItem'>;
}
export interface GQLOrderItemOptionTypeResolver<TParent = any> {
  items?: OrderItemOptionToItemsResolver<TParent>;
  label?: OrderItemOptionToLabelResolver<TParent>;
  linkItems?: OrderItemOptionToLinkItemsResolver<TParent>;
  value?: OrderItemOptionToValueResolver<TParent>;
}

export interface OrderItemOptionToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemOptionToLinkItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleOptionTypeResolver<TParent = any> {
  option_id?: BundleOptionToOption_idResolver<TParent>;
  price?: BundleOptionToPriceResolver<TParent>;
  qty?: BundleOptionToQtyResolver<TParent>;
  selection_details?: BundleOptionToSelection_detailsResolver<TParent>;
  title?: BundleOptionToTitleResolver<TParent>;
}

export interface BundleOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionToSelection_detailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleOptionSelectionTypeResolver<TParent = any> {
  final_option_price?: BundleOptionSelectionToFinal_option_priceResolver<TParent>;
  final_option_price_excl_tax?: BundleOptionSelectionToFinal_option_price_excl_taxResolver<TParent>;
  name?: BundleOptionSelectionToNameResolver<TParent>;
  regular_option_price?: BundleOptionSelectionToRegular_option_priceResolver<TParent>;
  regular_option_price_excl_tax?: BundleOptionSelectionToRegular_option_price_excl_taxResolver<TParent>;
  selection_id?: BundleOptionSelectionToSelection_idResolver<TParent>;
}

export interface BundleOptionSelectionToFinal_option_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionSelectionToFinal_option_price_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionSelectionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionSelectionToRegular_option_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionSelectionToRegular_option_price_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionSelectionToSelection_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreditMemoTotalTypeResolver<TParent = any> {
  adjustment?: CreditMemoTotalToAdjustmentResolver<TParent>;
  base_grand_total?: CreditMemoTotalToBase_grand_totalResolver<TParent>;
  discounts?: CreditMemoTotalToDiscountsResolver<TParent>;
  grand_total?: CreditMemoTotalToGrand_totalResolver<TParent>;
  shipping_handling?: CreditMemoTotalToShipping_handlingResolver<TParent>;
  subtotal?: CreditMemoTotalToSubtotalResolver<TParent>;
  taxes?: CreditMemoTotalToTaxesResolver<TParent>;
  total_shipping?: CreditMemoTotalToTotal_shippingResolver<TParent>;
  total_tax?: CreditMemoTotalToTotal_taxResolver<TParent>;
}

export interface CreditMemoTotalToAdjustmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToBase_grand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToShipping_handlingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToTaxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToTotal_shippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoTotalToTotal_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingHandlingTypeResolver<TParent = any> {
  amount_excluding_tax?: ShippingHandlingToAmount_excluding_taxResolver<TParent>;
  amount_including_tax?: ShippingHandlingToAmount_including_taxResolver<TParent>;
  discounts?: ShippingHandlingToDiscountsResolver<TParent>;
  taxes?: ShippingHandlingToTaxesResolver<TParent>;
  total_amount?: ShippingHandlingToTotal_amountResolver<TParent>;
}

export interface ShippingHandlingToAmount_excluding_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingHandlingToAmount_including_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingHandlingToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingHandlingToTaxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingHandlingToTotal_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingDiscountTypeResolver<TParent = any> {
  amount?: ShippingDiscountToAmountResolver<TParent>;
}

export interface ShippingDiscountToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTaxItemTypeResolver<TParent = any> {
  amount?: TaxItemToAmountResolver<TParent>;
  rate?: TaxItemToRateResolver<TParent>;
  title?: TaxItemToTitleResolver<TParent>;
}

export interface TaxItemToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxItemToRateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxItemToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInvoiceTypeResolver<TParent = any> {
  comments?: InvoiceToCommentsResolver<TParent>;
  id?: InvoiceToIdResolver<TParent>;
  items?: InvoiceToItemsResolver<TParent>;
  number?: InvoiceToNumberResolver<TParent>;
  total?: InvoiceToTotalResolver<TParent>;
}

export interface InvoiceToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInvoiceItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleInvoiceItem' | 'DownloadableInvoiceItem' | 'InvoiceItem' | Promise<'BundleInvoiceItem' | 'DownloadableInvoiceItem' | 'InvoiceItem'>;
}
export interface GQLInvoiceTotalTypeResolver<TParent = any> {
  base_grand_total?: InvoiceTotalToBase_grand_totalResolver<TParent>;
  discounts?: InvoiceTotalToDiscountsResolver<TParent>;
  grand_total?: InvoiceTotalToGrand_totalResolver<TParent>;
  shipping_handling?: InvoiceTotalToShipping_handlingResolver<TParent>;
  subtotal?: InvoiceTotalToSubtotalResolver<TParent>;
  taxes?: InvoiceTotalToTaxesResolver<TParent>;
  total_shipping?: InvoiceTotalToTotal_shippingResolver<TParent>;
  total_tax?: InvoiceTotalToTotal_taxResolver<TParent>;
}

export interface InvoiceTotalToBase_grand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToShipping_handlingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToTaxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToTotal_shippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceTotalToTotal_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderPaymentMethodTypeResolver<TParent = any> {
  additional_data?: OrderPaymentMethodToAdditional_dataResolver<TParent>;
  name?: OrderPaymentMethodToNameResolver<TParent>;
  purchase_number?: OrderPaymentMethodToPurchase_numberResolver<TParent>;
  type?: OrderPaymentMethodToTypeResolver<TParent>;
}

export interface OrderPaymentMethodToAdditional_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderPaymentMethodToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderPaymentMethodToPurchase_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderPaymentMethodToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLKeyValueTypeResolver<TParent = any> {
  name?: KeyValueToNameResolver<TParent>;
  value?: KeyValueToValueResolver<TParent>;
}

export interface KeyValueToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface KeyValueToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderShipmentTypeResolver<TParent = any> {
  comments?: OrderShipmentToCommentsResolver<TParent>;
  id?: OrderShipmentToIdResolver<TParent>;
  items?: OrderShipmentToItemsResolver<TParent>;
  number?: OrderShipmentToNumberResolver<TParent>;
  tracking?: OrderShipmentToTrackingResolver<TParent>;
}

export interface OrderShipmentToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderShipmentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderShipmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderShipmentToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderShipmentToTrackingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShipmentItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleShipmentItem' | 'ShipmentItem' | Promise<'BundleShipmentItem' | 'ShipmentItem'>;
}
export interface GQLShipmentTrackingTypeResolver<TParent = any> {
  carrier?: ShipmentTrackingToCarrierResolver<TParent>;
  number?: ShipmentTrackingToNumberResolver<TParent>;
  title?: ShipmentTrackingToTitleResolver<TParent>;
}

export interface ShipmentTrackingToCarrierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentTrackingToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentTrackingToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderTotalTypeResolver<TParent = any> {
  base_grand_total?: OrderTotalToBase_grand_totalResolver<TParent>;
  discounts?: OrderTotalToDiscountsResolver<TParent>;
  grand_total?: OrderTotalToGrand_totalResolver<TParent>;
  shipping_handling?: OrderTotalToShipping_handlingResolver<TParent>;
  subtotal?: OrderTotalToSubtotalResolver<TParent>;
  taxes?: OrderTotalToTaxesResolver<TParent>;
  total_shipping?: OrderTotalToTotal_shippingResolver<TParent>;
  total_tax?: OrderTotalToTotal_taxResolver<TParent>;
}

export interface OrderTotalToBase_grand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToShipping_handlingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToTaxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToTotal_shippingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderTotalToTotal_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistTypeResolver<TParent = any> {
  id?: WishlistToIdResolver<TParent>;
  items?: WishlistToItemsResolver<TParent>;
  items_count?: WishlistToItems_countResolver<TParent>;
  items_v2?: WishlistToItems_v2Resolver<TParent>;
  sharing_code?: WishlistToSharing_codeResolver<TParent>;
  updated_at?: WishlistToUpdated_atResolver<TParent>;
}

export interface WishlistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistToItems_v2Args {
  currentPage?: number;
  pageSize?: number;
}
export interface WishlistToItems_v2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: WishlistToItems_v2Args, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistToSharing_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistItemTypeResolver<TParent = any> {
  added_at?: WishlistItemToAdded_atResolver<TParent>;
  buy_request?: WishlistItemToBuy_requestResolver<TParent>;
  description?: WishlistItemToDescriptionResolver<TParent>;
  id?: WishlistItemToIdResolver<TParent>;
  options?: WishlistItemToOptionsResolver<TParent>;
  price?: WishlistItemToPriceResolver<TParent>;
  price_without_tax?: WishlistItemToPrice_without_taxResolver<TParent>;
  product?: WishlistItemToProductResolver<TParent>;
  qty?: WishlistItemToQtyResolver<TParent>;
  sku?: WishlistItemToSkuResolver<TParent>;
}

export interface WishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToBuy_requestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToPrice_without_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistItemOptionTypeResolver<TParent = any> {
  label?: WishlistItemOptionToLabelResolver<TParent>;
  value?: WishlistItemOptionToValueResolver<TParent>;
}

export interface WishlistItemOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistItemsTypeResolver<TParent = any> {
  items?: WishlistItemsToItemsResolver<TParent>;
  page_info?: WishlistItemsToPage_infoResolver<TParent>;
}

export interface WishlistItemsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistItemsToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleWishlistItem' | 'ConfigurableWishlistItem' | 'DownloadableWishlistItem' | 'GroupedProductWishlistItem' | 'SimpleWishlistItem' | 'VirtualWishlistItem' | Promise<'BundleWishlistItem' | 'ConfigurableWishlistItem' | 'DownloadableWishlistItem' | 'GroupedProductWishlistItem' | 'SimpleWishlistItem' | 'VirtualWishlistItem'>;
}
export interface GQLSelectedCustomizableOptionTypeResolver<TParent = any> {
  customizable_option_uid?: SelectedCustomizableOptionToCustomizable_option_uidResolver<TParent>;
  id?: SelectedCustomizableOptionToIdResolver<TParent>;
  is_required?: SelectedCustomizableOptionToIs_requiredResolver<TParent>;
  label?: SelectedCustomizableOptionToLabelResolver<TParent>;
  sort_order?: SelectedCustomizableOptionToSort_orderResolver<TParent>;
  type?: SelectedCustomizableOptionToTypeResolver<TParent>;
  values?: SelectedCustomizableOptionToValuesResolver<TParent>;
}

export interface SelectedCustomizableOptionToCustomizable_option_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToIs_requiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedCustomizableOptionValueTypeResolver<TParent = any> {
  customizable_option_value_uid?: SelectedCustomizableOptionValueToCustomizable_option_value_uidResolver<TParent>;
  id?: SelectedCustomizableOptionValueToIdResolver<TParent>;
  label?: SelectedCustomizableOptionValueToLabelResolver<TParent>;
  price?: SelectedCustomizableOptionValueToPriceResolver<TParent>;
  value?: SelectedCustomizableOptionValueToValueResolver<TParent>;
}

export interface SelectedCustomizableOptionValueToCustomizable_option_value_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionValueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionValueToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedCustomizableOptionValueToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartItemSelectedOptionValuePriceTypeResolver<TParent = any> {
  type?: CartItemSelectedOptionValuePriceToTypeResolver<TParent>;
  units?: CartItemSelectedOptionValuePriceToUnitsResolver<TParent>;
  value?: CartItemSelectedOptionValuePriceToValueResolver<TParent>;
}

export interface CartItemSelectedOptionValuePriceToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemSelectedOptionValuePriceToUnitsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartItemSelectedOptionValuePriceToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerDownloadableProductsTypeResolver<TParent = any> {
  items?: CustomerDownloadableProductsToItemsResolver<TParent>;
}

export interface CustomerDownloadableProductsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerDownloadableProductTypeResolver<TParent = any> {
  date?: CustomerDownloadableProductToDateResolver<TParent>;
  download_url?: CustomerDownloadableProductToDownload_urlResolver<TParent>;
  link_title?: CustomerDownloadableProductToLink_titleResolver<TParent>;
  order_id?: CustomerDownloadableProductToOrder_idResolver<TParent>;
  order_increment_id?: CustomerDownloadableProductToOrder_increment_idResolver<TParent>;
  remaining_downloads?: CustomerDownloadableProductToRemaining_downloadsResolver<TParent>;
  status?: CustomerDownloadableProductToStatusResolver<TParent>;
  title?: CustomerDownloadableProductToTitleResolver<TParent>;
}

export interface CustomerDownloadableProductToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToDownload_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToLink_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToOrder_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToOrder_increment_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToRemaining_downloadsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomerDownloadableProductToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerPaymentTokensTypeResolver<TParent = any> {
  items?: CustomerPaymentTokensToItemsResolver<TParent>;
}

export interface CustomerPaymentTokensToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentTokenTypeResolver<TParent = any> {
  details?: PaymentTokenToDetailsResolver<TParent>;
  payment_method_code?: PaymentTokenToPayment_method_codeResolver<TParent>;
  public_hash?: PaymentTokenToPublic_hashResolver<TParent>;
  type?: PaymentTokenToTypeResolver<TParent>;
}

export interface PaymentTokenToDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTokenToPayment_method_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTokenToPublic_hashResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTokenToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIsConfigSettingEnabledOutputTypeResolver<TParent = any> {
  is_enabled?: IsConfigSettingEnabledOutputToIs_enabledResolver<TParent>;
}

export interface IsConfigSettingEnabledOutputToIs_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBraintreeTypeResolver<TParent = any> {
  is_three_d_secure?: BraintreeToIs_three_d_secureResolver<TParent>;
}

export interface BraintreeToIs_three_d_secureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartDisplayConfigTypeResolver<TParent = any> {
  display_full_tax_summary?: CartDisplayConfigToDisplay_full_tax_summaryResolver<TParent>;
  display_tax_in_price?: CartDisplayConfigToDisplay_tax_in_priceResolver<TParent>;
  display_tax_in_shipping_amount?: CartDisplayConfigToDisplay_tax_in_shipping_amountResolver<TParent>;
  display_tax_in_subtotal?: CartDisplayConfigToDisplay_tax_in_subtotalResolver<TParent>;
  display_zero_tax_subtotal?: CartDisplayConfigToDisplay_zero_tax_subtotalResolver<TParent>;
  include_tax_in_order_total?: CartDisplayConfigToInclude_tax_in_order_totalResolver<TParent>;
}

export interface CartDisplayConfigToDisplay_full_tax_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDisplayConfigToDisplay_tax_in_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDisplayConfigToDisplay_tax_in_shipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDisplayConfigToDisplay_tax_in_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDisplayConfigToDisplay_zero_tax_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartDisplayConfigToInclude_tax_in_order_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQuoteDataTypeResolver<TParent = any> {
  applied_rule_ids?: QuoteDataToApplied_rule_idsResolver<TParent>;
  applied_taxes?: QuoteDataToApplied_taxesResolver<TParent>;
  base_currency_code?: QuoteDataToBase_currency_codeResolver<TParent>;
  base_discount_amount?: QuoteDataToBase_discount_amountResolver<TParent>;
  base_grand_total?: QuoteDataToBase_grand_totalResolver<TParent>;
  base_shipping_amount?: QuoteDataToBase_shipping_amountResolver<TParent>;
  base_shipping_discount_amount?: QuoteDataToBase_shipping_discount_amountResolver<TParent>;
  base_shipping_incl_tax?: QuoteDataToBase_shipping_incl_taxResolver<TParent>;
  base_shipping_tax_amount?: QuoteDataToBase_shipping_tax_amountResolver<TParent>;
  base_subtotal?: QuoteDataToBase_subtotalResolver<TParent>;
  base_subtotal_with_discount?: QuoteDataToBase_subtotal_with_discountResolver<TParent>;
  base_tax_amount?: QuoteDataToBase_tax_amountResolver<TParent>;
  coupon_code?: QuoteDataToCoupon_codeResolver<TParent>;
  customer_is_guest?: QuoteDataToCustomer_is_guestResolver<TParent>;
  customer_tax_class_id?: QuoteDataToCustomer_tax_class_idResolver<TParent>;
  discount_amount?: QuoteDataToDiscount_amountResolver<TParent>;
  grand_total?: QuoteDataToGrand_totalResolver<TParent>;
  id?: QuoteDataToIdResolver<TParent>;
  is_in_store_pickup_available?: QuoteDataToIs_in_store_pickup_availableResolver<TParent>;
  is_virtual?: QuoteDataToIs_virtualResolver<TParent>;
  items?: QuoteDataToItemsResolver<TParent>;
  items_count?: QuoteDataToItems_countResolver<TParent>;
  items_qty?: QuoteDataToItems_qtyResolver<TParent>;
  quote_currency_code?: QuoteDataToQuote_currency_codeResolver<TParent>;
  shipping_amount?: QuoteDataToShipping_amountResolver<TParent>;
  shipping_discount_amount?: QuoteDataToShipping_discount_amountResolver<TParent>;
  shipping_incl_tax?: QuoteDataToShipping_incl_taxResolver<TParent>;
  shipping_method?: QuoteDataToShipping_methodResolver<TParent>;
  shipping_tax_amount?: QuoteDataToShipping_tax_amountResolver<TParent>;
  store_id?: QuoteDataToStore_idResolver<TParent>;
  subtotal?: QuoteDataToSubtotalResolver<TParent>;
  subtotal_incl_tax?: QuoteDataToSubtotal_incl_taxResolver<TParent>;
  subtotal_with_discount?: QuoteDataToSubtotal_with_discountResolver<TParent>;
  tax_amount?: QuoteDataToTax_amountResolver<TParent>;
  weee_tax_applied_amount?: QuoteDataToWeee_tax_applied_amountResolver<TParent>;
}

export interface QuoteDataToApplied_rule_idsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToApplied_taxesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_grand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_shipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_shipping_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_shipping_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_shipping_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_subtotal_with_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToBase_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToCoupon_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToCustomer_is_guestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToCustomer_tax_class_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToDiscount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToIs_in_store_pickup_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToIs_virtualResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToItems_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToQuote_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToShipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToShipping_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToShipping_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToShipping_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToShipping_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToStore_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToSubtotal_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToSubtotal_with_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToTax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QuoteDataToWeee_tax_applied_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTotalsObjectTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'QuoteData' | 'PaymentTotals' | Promise<'QuoteData' | 'PaymentTotals'>;
}
export interface GQLTotalsItemTypeResolver<TParent = any> {
  base_discount_amount?: TotalsItemToBase_discount_amountResolver<TParent>;
  base_price?: TotalsItemToBase_priceResolver<TParent>;
  base_price_incl_tax?: TotalsItemToBase_price_incl_taxResolver<TParent>;
  base_row_total?: TotalsItemToBase_row_totalResolver<TParent>;
  base_row_total_incl_tax?: TotalsItemToBase_row_total_incl_taxResolver<TParent>;
  base_tax_amount?: TotalsItemToBase_tax_amountResolver<TParent>;
  bundle_options?: TotalsItemToBundle_optionsResolver<TParent>;
  customizable_options?: TotalsItemToCustomizable_optionsResolver<TParent>;
  discount_amount?: TotalsItemToDiscount_amountResolver<TParent>;
  discount_percent?: TotalsItemToDiscount_percentResolver<TParent>;
  downloadable_links?: TotalsItemToDownloadable_linksResolver<TParent>;
  item_id?: TotalsItemToItem_idResolver<TParent>;
  name?: TotalsItemToNameResolver<TParent>;
  options?: TotalsItemToOptionsResolver<TParent>;
  price?: TotalsItemToPriceResolver<TParent>;
  price_incl_tax?: TotalsItemToPrice_incl_taxResolver<TParent>;
  product?: TotalsItemToProductResolver<TParent>;
  qty?: TotalsItemToQtyResolver<TParent>;
  row_total?: TotalsItemToRow_totalResolver<TParent>;
  row_total_incl_tax?: TotalsItemToRow_total_incl_taxResolver<TParent>;
  row_total_with_discount?: TotalsItemToRow_total_with_discountResolver<TParent>;
  sku?: TotalsItemToSkuResolver<TParent>;
  tax_amount?: TotalsItemToTax_amountResolver<TParent>;
  tax_percent?: TotalsItemToTax_percentResolver<TParent>;
  weee_tax_applied?: TotalsItemToWeee_tax_appliedResolver<TParent>;
  weee_tax_applied_amount?: TotalsItemToWeee_tax_applied_amountResolver<TParent>;
}

export interface TotalsItemToBase_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBase_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBase_price_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBase_row_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBase_row_total_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBase_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToDiscount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToDiscount_percentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToDownloadable_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToItem_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToPrice_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToRow_total_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToRow_total_with_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToTax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToTax_percentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToWeee_tax_appliedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsItemToWeee_tax_applied_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedBundleOptionTypeResolver<TParent = any> {
  id?: SelectedBundleOptionToIdResolver<TParent>;
  label?: SelectedBundleOptionToLabelResolver<TParent>;
  type?: SelectedBundleOptionToTypeResolver<TParent>;
  uid?: SelectedBundleOptionToUidResolver<TParent>;
  values?: SelectedBundleOptionToValuesResolver<TParent>;
}

export interface SelectedBundleOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedBundleOptionValueTypeResolver<TParent = any> {
  id?: SelectedBundleOptionValueToIdResolver<TParent>;
  label?: SelectedBundleOptionValueToLabelResolver<TParent>;
  price?: SelectedBundleOptionValueToPriceResolver<TParent>;
  quantity?: SelectedBundleOptionValueToQuantityResolver<TParent>;
  uid?: SelectedBundleOptionValueToUidResolver<TParent>;
}

export interface SelectedBundleOptionValueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionValueToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionValueToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedBundleOptionValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedDownloadableLinksTypeResolver<TParent = any> {
  id?: SelectedDownloadableLinksToIdResolver<TParent>;
  label?: SelectedDownloadableLinksToLabelResolver<TParent>;
}

export interface SelectedDownloadableLinksToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedDownloadableLinksToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAppliedTaxItemTypeResolver<TParent = any> {
  amount?: AppliedTaxItemToAmountResolver<TParent>;
  percent?: AppliedTaxItemToPercentResolver<TParent>;
  rates?: AppliedTaxItemToRatesResolver<TParent>;
}

export interface AppliedTaxItemToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppliedTaxItemToPercentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppliedTaxItemToRatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAppliedTaxItemRateTypeResolver<TParent = any> {
  percent?: AppliedTaxItemRateToPercentResolver<TParent>;
  title?: AppliedTaxItemRateToTitleResolver<TParent>;
}

export interface AppliedTaxItemRateToPercentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AppliedTaxItemRateToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHostedProUrlTypeResolver<TParent = any> {
  secure_form_url?: HostedProUrlToSecure_form_urlResolver<TParent>;
}

export interface HostedProUrlToSecure_form_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderTypeResolver<TParent = any> {
  base_order_info?: OrderToBase_order_infoResolver<TParent>;
  items?: OrderToItemsResolver<TParent>;
  order_id?: OrderToOrder_idResolver<TParent>;
  order_number?: OrderToOrder_numberResolver<TParent>;
  order_products?: OrderToOrder_productsResolver<TParent>;
  payment_info?: OrderToPayment_infoResolver<TParent>;
  shipping_info?: OrderToShipping_infoResolver<TParent>;
  total?: OrderToTotalResolver<TParent>;
}

export interface OrderToBase_order_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToOrder_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToOrder_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToOrder_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToPayment_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToShipping_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBaseOrderInfoTypeResolver<TParent = any> {
  created_at?: BaseOrderInfoToCreated_atResolver<TParent>;
  currency_code?: BaseOrderInfoToCurrency_codeResolver<TParent>;
  grand_total?: BaseOrderInfoToGrand_totalResolver<TParent>;
  id?: BaseOrderInfoToIdResolver<TParent>;
  increment_id?: BaseOrderInfoToIncrement_idResolver<TParent>;
  status?: BaseOrderInfoToStatusResolver<TParent>;
  status_label?: BaseOrderInfoToStatus_labelResolver<TParent>;
  sub_total?: BaseOrderInfoToSub_totalResolver<TParent>;
  total_qty_ordered?: BaseOrderInfoToTotal_qty_orderedResolver<TParent>;
}

export interface BaseOrderInfoToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToCurrency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToIncrement_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToStatus_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToSub_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BaseOrderInfoToTotal_qty_orderedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentInfoTypeResolver<TParent = any> {
  additional_information?: PaymentInfoToAdditional_informationResolver<TParent>;
  cc_last_4?: PaymentInfoToCc_last_4Resolver<TParent>;
  cc_owner?: PaymentInfoToCc_ownerResolver<TParent>;
  cc_type?: PaymentInfoToCc_typeResolver<TParent>;
  method?: PaymentInfoToMethodResolver<TParent>;
}

export interface PaymentInfoToAdditional_informationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentInfoToCc_last_4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentInfoToCc_ownerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentInfoToCc_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentInfoToMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAdditionalCustomerInfoTypeResolver<TParent = any> {
  bank?: AdditionalCustomerInfoToBankResolver<TParent>;
  credit_type?: AdditionalCustomerInfoToCredit_typeResolver<TParent>;
  customer_info?: AdditionalCustomerInfoToCustomer_infoResolver<TParent>;
  method_title?: AdditionalCustomerInfoToMethod_titleResolver<TParent>;
  month?: AdditionalCustomerInfoToMonthResolver<TParent>;
}

export interface AdditionalCustomerInfoToBankResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdditionalCustomerInfoToCredit_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdditionalCustomerInfoToCustomer_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdditionalCustomerInfoToMethod_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AdditionalCustomerInfoToMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreditCustomerInfoTypeResolver<TParent = any> {
  first_name?: CreditCustomerInfoToFirst_nameResolver<TParent>;
  iin_number?: CreditCustomerInfoToIin_numberResolver<TParent>;
  last_name?: CreditCustomerInfoToLast_nameResolver<TParent>;
  middle_name?: CreditCustomerInfoToMiddle_nameResolver<TParent>;
  phone?: CreditCustomerInfoToPhoneResolver<TParent>;
}

export interface CreditCustomerInfoToFirst_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditCustomerInfoToIin_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditCustomerInfoToLast_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditCustomerInfoToMiddle_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditCustomerInfoToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingInfoTypeResolver<TParent = any> {
  shipping_address?: ShippingInfoToShipping_addressResolver<TParent>;
  shipping_amount?: ShippingInfoToShipping_amountResolver<TParent>;
  shipping_description?: ShippingInfoToShipping_descriptionResolver<TParent>;
  shipping_incl_tax?: ShippingInfoToShipping_incl_taxResolver<TParent>;
  shipping_method?: ShippingInfoToShipping_methodResolver<TParent>;
  tracking_numbers?: ShippingInfoToTracking_numbersResolver<TParent>;
}

export interface ShippingInfoToShipping_addressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInfoToShipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInfoToShipping_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInfoToShipping_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInfoToShipping_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingInfoToTracking_numbersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderCustomerAddressTypeResolver<TParent = any> {
  apartment_number?: OrderCustomerAddressToApartment_numberResolver<TParent>;
  city?: OrderCustomerAddressToCityResolver<TParent>;
  company?: OrderCustomerAddressToCompanyResolver<TParent>;
  country_id?: OrderCustomerAddressToCountry_idResolver<TParent>;
  customer_id?: OrderCustomerAddressToCustomer_idResolver<TParent>;
  district?: OrderCustomerAddressToDistrictResolver<TParent>;
  firstname?: OrderCustomerAddressToFirstnameResolver<TParent>;
  house_number?: OrderCustomerAddressToHouse_numberResolver<TParent>;
  id?: OrderCustomerAddressToIdResolver<TParent>;
  is_b2b?: OrderCustomerAddressToIs_b2bResolver<TParent>;
  lastname?: OrderCustomerAddressToLastnameResolver<TParent>;
  middlename?: OrderCustomerAddressToMiddlenameResolver<TParent>;
  organizationaddress?: OrderCustomerAddressToOrganizationaddressResolver<TParent>;
  organizationbik?: OrderCustomerAddressToOrganizationbikResolver<TParent>;
  organizationbin?: OrderCustomerAddressToOrganizationbinResolver<TParent>;
  organizationiic?: OrderCustomerAddressToOrganizationiicResolver<TParent>;
  organizationname?: OrderCustomerAddressToOrganizationnameResolver<TParent>;
  post_office_code?: OrderCustomerAddressToPost_office_codeResolver<TParent>;
  postcode?: OrderCustomerAddressToPostcodeResolver<TParent>;
  postomat_code?: OrderCustomerAddressToPostomat_codeResolver<TParent>;
  prefix?: OrderCustomerAddressToPrefixResolver<TParent>;
  region?: OrderCustomerAddressToRegionResolver<TParent>;
  store_pickup_code?: OrderCustomerAddressToStore_pickup_codeResolver<TParent>;
  street?: OrderCustomerAddressToStreetResolver<TParent>;
  telephone?: OrderCustomerAddressToTelephoneResolver<TParent>;
}

export interface OrderCustomerAddressToApartment_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToCompanyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToCountry_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToCustomer_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToDistrictResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToFirstnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToHouse_numberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToIs_b2bResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToLastnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToMiddlenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToOrganizationaddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToOrganizationbikResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToOrganizationbinResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToOrganizationiicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToOrganizationnameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToPost_office_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToPostomat_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToPrefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToStore_pickup_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderCustomerAddressToTelephoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderListTypeResolver<TParent = any> {
  items?: OrderListToItemsResolver<TParent>;
}

export interface OrderListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPayflowLinkTokenTypeResolver<TParent = any> {
  mode?: PayflowLinkTokenToModeResolver<TParent>;
  paypal_url?: PayflowLinkTokenToPaypal_urlResolver<TParent>;
  secure_token?: PayflowLinkTokenToSecure_tokenResolver<TParent>;
  secure_token_id?: PayflowLinkTokenToSecure_token_idResolver<TParent>;
}

export interface PayflowLinkTokenToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowLinkTokenToPaypal_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowLinkTokenToSecure_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowLinkTokenToSecure_token_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentMethodTypeResolver<TParent = any> {
  code?: PaymentMethodToCodeResolver<TParent>;
  title?: PaymentMethodToTitleResolver<TParent>;
}

export interface PaymentMethodToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentMethodToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStoresTypeResolver<TParent = any> {
  stores?: StoresToStoresResolver<TParent>;
}

export interface StoresToStoresResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStoreTypeResolver<TParent = any> {
  city?: StoreToCityResolver<TParent>;
  country?: StoreToCountryResolver<TParent>;
  description?: StoreToDescriptionResolver<TParent>;
  name?: StoreToNameResolver<TParent>;
  phone?: StoreToPhoneResolver<TParent>;
  pickup_location_code?: StoreToPickup_location_codeResolver<TParent>;
  postcode?: StoreToPostcodeResolver<TParent>;
  region?: StoreToRegionResolver<TParent>;
  street?: StoreToStreetResolver<TParent>;
}

export interface StoreToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToPickup_location_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StoreToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIsEmailAvailableOutputTypeResolver<TParent = any> {
  is_email_available?: IsEmailAvailableOutputToIs_email_availableResolver<TParent>;
}

export interface IsEmailAvailableOutputToIs_email_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPickupLocationsTypeResolver<TParent = any> {
  items?: PickupLocationsToItemsResolver<TParent>;
  page_info?: PickupLocationsToPage_infoResolver<TParent>;
  total_count?: PickupLocationsToTotal_countResolver<TParent>;
}

export interface PickupLocationsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationsToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationsToTotal_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPickupLocationTypeResolver<TParent = any> {
  city?: PickupLocationToCityResolver<TParent>;
  contact_name?: PickupLocationToContact_nameResolver<TParent>;
  country_id?: PickupLocationToCountry_idResolver<TParent>;
  description?: PickupLocationToDescriptionResolver<TParent>;
  email?: PickupLocationToEmailResolver<TParent>;
  fax?: PickupLocationToFaxResolver<TParent>;
  latitude?: PickupLocationToLatitudeResolver<TParent>;
  longitude?: PickupLocationToLongitudeResolver<TParent>;
  name?: PickupLocationToNameResolver<TParent>;
  phone?: PickupLocationToPhoneResolver<TParent>;
  pickup_location_code?: PickupLocationToPickup_location_codeResolver<TParent>;
  postcode?: PickupLocationToPostcodeResolver<TParent>;
  region?: PickupLocationToRegionResolver<TParent>;
  region_id?: PickupLocationToRegion_idResolver<TParent>;
  street?: PickupLocationToStreetResolver<TParent>;
}

export interface PickupLocationToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToContact_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToCountry_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToFaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToPickup_location_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToPostcodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToRegion_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PickupLocationToStreetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductReviewRatingsMetadataTypeResolver<TParent = any> {
  items?: ProductReviewRatingsMetadataToItemsResolver<TParent>;
}

export interface ProductReviewRatingsMetadataToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductReviewRatingMetadataTypeResolver<TParent = any> {
  id?: ProductReviewRatingMetadataToIdResolver<TParent>;
  name?: ProductReviewRatingMetadataToNameResolver<TParent>;
  values?: ProductReviewRatingMetadataToValuesResolver<TParent>;
}

export interface ProductReviewRatingMetadataToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewRatingMetadataToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewRatingMetadataToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductReviewRatingValueMetadataTypeResolver<TParent = any> {
  value?: ProductReviewRatingValueMetadataToValueResolver<TParent>;
  value_id?: ProductReviewRatingValueMetadataToValue_idResolver<TParent>;
}

export interface ProductReviewRatingValueMetadataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductReviewRatingValueMetadataToValue_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductsTypeResolver<TParent = any> {
  aggregations?: ProductsToAggregationsResolver<TParent>;
  filters?: ProductsToFiltersResolver<TParent>;
  items?: ProductsToItemsResolver<TParent>;
  page_info?: ProductsToPage_infoResolver<TParent>;
  sort_fields?: ProductsToSort_fieldsResolver<TParent>;
  total_count?: ProductsToTotal_countResolver<TParent>;
}

export interface ProductsToAggregationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductsToFiltersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductsToPage_infoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductsToSort_fieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductsToTotal_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAggregationTypeResolver<TParent = any> {
  attribute_code?: AggregationToAttribute_codeResolver<TParent>;
  count?: AggregationToCountResolver<TParent>;
  has_swatch?: AggregationToHas_swatchResolver<TParent>;
  is_boolean?: AggregationToIs_booleanResolver<TParent>;
  label?: AggregationToLabelResolver<TParent>;
  options?: AggregationToOptionsResolver<TParent>;
  position?: AggregationToPositionResolver<TParent>;
}

export interface AggregationToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToHas_swatchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToIs_booleanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAggregationOptionTypeResolver<TParent = any> {
  count?: AggregationOptionToCountResolver<TParent>;
  label?: AggregationOptionToLabelResolver<TParent>;
  swatch_data?: AggregationOptionToSwatch_dataResolver<TParent>;
  value?: AggregationOptionToValueResolver<TParent>;
}

export interface AggregationOptionToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationOptionToSwatch_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AggregationOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAggregationOptionInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'AggregationOption' | Promise<'AggregationOption'>;
}
export interface GQLSwatchDataTypeResolver<TParent = any> {
  type?: SwatchDataToTypeResolver<TParent>;
  value?: SwatchDataToValueResolver<TParent>;
}

export interface SwatchDataToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SwatchDataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLayerFilterTypeResolver<TParent = any> {
  filter_items?: LayerFilterToFilter_itemsResolver<TParent>;
  filter_items_count?: LayerFilterToFilter_items_countResolver<TParent>;
  name?: LayerFilterToNameResolver<TParent>;
  request_var?: LayerFilterToRequest_varResolver<TParent>;
}

export interface LayerFilterToFilter_itemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LayerFilterToFilter_items_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LayerFilterToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LayerFilterToRequest_varResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLayerFilterItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'LayerFilterItem' | 'SwatchLayerFilterItem' | Promise<'LayerFilterItem' | 'SwatchLayerFilterItem'>;
}
export interface GQLSortFieldsTypeResolver<TParent = any> {
  default?: SortFieldsToDefaultResolver<TParent>;
  options?: SortFieldsToOptionsResolver<TParent>;
}

export interface SortFieldsToDefaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SortFieldsToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSortFieldTypeResolver<TParent = any> {
  label?: SortFieldToLabelResolver<TParent>;
  value?: SortFieldToValueResolver<TParent>;
}

export interface SortFieldToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SortFieldToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistOutputTypeResolver<TParent = any> {
  creators_name?: WishlistOutputToCreators_nameResolver<TParent>;
  id?: WishlistOutputToIdResolver<TParent>;
  items?: WishlistOutputToItemsResolver<TParent>;
  items_count?: WishlistOutputToItems_countResolver<TParent>;
  name?: WishlistOutputToNameResolver<TParent>;
  sharing_code?: WishlistOutputToSharing_codeResolver<TParent>;
  updated_at?: WishlistOutputToUpdated_atResolver<TParent>;
}

export interface WishlistOutputToCreators_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToSharing_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistOutputToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMenuTypeResolver<TParent = any> {
  css_class?: MenuToCss_classResolver<TParent>;
  is_active?: MenuToIs_activeResolver<TParent>;
  items?: MenuToItemsResolver<TParent>;
  menu_id?: MenuToMenu_idResolver<TParent>;
  title?: MenuToTitleResolver<TParent>;
}

export interface MenuToCss_classResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuToMenu_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MenuToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemTypeResolver<TParent = any> {
  category_id?: ItemToCategory_idResolver<TParent>;
  cms_page_identifier?: ItemToCms_page_identifierResolver<TParent>;
  icon?: ItemToIconResolver<TParent>;
  is_active?: ItemToIs_activeResolver<TParent>;
  is_promo?: ItemToIs_promoResolver<TParent>;
  item_class?: ItemToItem_classResolver<TParent>;
  item_id?: ItemToItem_idResolver<TParent>;
  parent_id?: ItemToParent_idResolver<TParent>;
  position?: ItemToPositionResolver<TParent>;
  promo_image?: ItemToPromo_imageResolver<TParent>;
  title?: ItemToTitleResolver<TParent>;
  url?: ItemToUrlResolver<TParent>;
  url_type?: ItemToUrl_typeResolver<TParent>;
}

export interface ItemToCategory_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToCms_page_identifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToIconResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToIs_promoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToItem_classResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToItem_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToParent_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToPromo_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemToUrl_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSliderTypeResolver<TParent = any> {
  animation_speed?: SliderToAnimation_speedResolver<TParent>;
  is_active?: SliderToIs_activeResolver<TParent>;
  lazy_load?: SliderToLazy_loadResolver<TParent>;
  position?: SliderToPositionResolver<TParent>;
  show_menu?: SliderToShow_menuResolver<TParent>;
  show_navigation?: SliderToShow_navigationResolver<TParent>;
  slide_speed?: SliderToSlide_speedResolver<TParent>;
  slider_id?: SliderToSlider_idResolver<TParent>;
  slides?: SliderToSlidesResolver<TParent>;
  slides_to_display?: SliderToSlides_to_displayResolver<TParent>;
  slides_to_display_mobile?: SliderToSlides_to_display_mobileResolver<TParent>;
  slides_to_display_tablet?: SliderToSlides_to_display_tabletResolver<TParent>;
  slides_to_scroll?: SliderToSlides_to_scrollResolver<TParent>;
  slides_to_scroll_mobile?: SliderToSlides_to_scroll_mobileResolver<TParent>;
  slides_to_scroll_tablet?: SliderToSlides_to_scroll_tabletResolver<TParent>;
  title?: SliderToTitleResolver<TParent>;
}

export interface SliderToAnimation_speedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToLazy_loadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToShow_menuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToShow_navigationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlide_speedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlider_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlidesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_displayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_display_mobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_display_tabletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_scrollResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_scroll_mobileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToSlides_to_scroll_tabletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SliderToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSlideTypeResolver<TParent = any> {
  desktop_image?: SlideToDesktop_imageResolver<TParent>;
  desktop_image_2?: SlideToDesktop_image_2Resolver<TParent>;
  desktop_image_3?: SlideToDesktop_image_3Resolver<TParent>;
  display_title?: SlideToDisplay_titleResolver<TParent>;
  display_title_2?: SlideToDisplay_title_2Resolver<TParent>;
  display_title_3?: SlideToDisplay_title_3Resolver<TParent>;
  embed_code?: SlideToEmbed_codeResolver<TParent>;
  embed_code_2?: SlideToEmbed_code_2Resolver<TParent>;
  embed_code_3?: SlideToEmbed_code_3Resolver<TParent>;
  end_time?: SlideToEnd_timeResolver<TParent>;
  is_active?: SlideToIs_activeResolver<TParent>;
  maps?: SlideToMapsResolver<TParent>;
  mobile_image?: SlideToMobile_imageResolver<TParent>;
  mobile_image_2?: SlideToMobile_image_2Resolver<TParent>;
  mobile_image_3?: SlideToMobile_image_3Resolver<TParent>;
  position?: SlideToPositionResolver<TParent>;
  slide_id?: SlideToSlide_idResolver<TParent>;
  slide_link?: SlideToSlide_linkResolver<TParent>;
  slide_link_2?: SlideToSlide_link_2Resolver<TParent>;
  slide_link_3?: SlideToSlide_link_3Resolver<TParent>;
  slide_link_text?: SlideToSlide_link_textResolver<TParent>;
  slide_text?: SlideToSlide_textResolver<TParent>;
  slide_text_2?: SlideToSlide_text_2Resolver<TParent>;
  slide_text_3?: SlideToSlide_text_3Resolver<TParent>;
  slide_text_position?: SlideToSlide_text_positionResolver<TParent>;
  slide_text_position_2?: SlideToSlide_text_position_2Resolver<TParent>;
  slide_text_position_3?: SlideToSlide_text_position_3Resolver<TParent>;
  slide_width_class?: SlideToSlide_width_classResolver<TParent>;
  start_time?: SlideToStart_timeResolver<TParent>;
  title?: SlideToTitleResolver<TParent>;
}

export interface SlideToDesktop_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToDesktop_image_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToDesktop_image_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToDisplay_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToDisplay_title_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToDisplay_title_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToEmbed_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToEmbed_code_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToEmbed_code_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToEnd_timeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToMapsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToMobile_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToMobile_image_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToMobile_image_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_linkResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_link_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_link_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_link_textResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_textResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_text_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_text_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_text_positionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_text_position_2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_text_position_3Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToSlide_width_classResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToStart_timeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SlideToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMapTypeResolver<TParent = any> {
  coordinates?: MapToCoordinatesResolver<TParent>;
  is_active?: MapToIs_activeResolver<TParent>;
  map_id?: MapToMap_idResolver<TParent>;
  product_id?: MapToProduct_idResolver<TParent>;
  title?: MapToTitleResolver<TParent>;
}

export interface MapToCoordinatesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MapToIs_activeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MapToMap_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MapToProduct_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MapToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTrackingDataTypeResolver<TParent = any> {
  page_tracking_enabled?: TrackingDataToPage_tracking_enabledResolver<TParent>;
  region_prefix?: TrackingDataToRegion_prefixResolver<TParent>;
  roi_tracking_enabled?: TrackingDataToRoi_tracking_enabledResolver<TParent>;
  wbt_profile_id?: TrackingDataToWbt_profile_idResolver<TParent>;
}

export interface TrackingDataToPage_tracking_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackingDataToRegion_prefixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackingDataToRoi_tracking_enabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackingDataToWbt_profile_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEntityUrlTypeResolver<TParent = any> {
  canonical_url?: EntityUrlToCanonical_urlResolver<TParent>;
  entity_uid?: EntityUrlToEntity_uidResolver<TParent>;
  id?: EntityUrlToIdResolver<TParent>;
  redirectCode?: EntityUrlToRedirectCodeResolver<TParent>;
  relative_url?: EntityUrlToRelative_urlResolver<TParent>;
  sku?: EntityUrlToSkuResolver<TParent>;
  type?: EntityUrlToTypeResolver<TParent>;
}

export interface EntityUrlToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToEntity_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToRedirectCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EntityUrlToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  addBundleProductsToCart?: MutationToAddBundleProductsToCartResolver<TParent>;
  addConfigurableProductsToCart?: MutationToAddConfigurableProductsToCartResolver<TParent>;
  addDownloadableProductsToCart?: MutationToAddDownloadableProductsToCartResolver<TParent>;
  addProductsToCart?: MutationToAddProductsToCartResolver<TParent>;
  addProductsToCompareList?: MutationToAddProductsToCompareListResolver<TParent>;
  addProductsToWishlist?: MutationToAddProductsToWishlistResolver<TParent>;
  addSimpleProductsToCart?: MutationToAddSimpleProductsToCartResolver<TParent>;
  addVirtualProductsToCart?: MutationToAddVirtualProductsToCartResolver<TParent>;
  addWishlistItemsToCart?: MutationToAddWishlistItemsToCartResolver<TParent>;
  applyCoupon?: MutationToApplyCouponResolver<TParent>;
  applyCouponToCart?: MutationToApplyCouponToCartResolver<TParent>;
  assignCompareListToCustomer?: MutationToAssignCompareListToCustomerResolver<TParent>;
  changeCustomerPassword?: MutationToChangeCustomerPasswordResolver<TParent>;
  confirmCustomerEmail?: MutationToConfirmCustomerEmailResolver<TParent>;
  contactForm?: MutationToContactFormResolver<TParent>;
  createBraintreeClientToken?: MutationToCreateBraintreeClientTokenResolver<TParent>;
  createCompareList?: MutationToCreateCompareListResolver<TParent>;
  createCustomer?: MutationToCreateCustomerResolver<TParent>;
  createCustomerAddress?: MutationToCreateCustomerAddressResolver<TParent>;
  createCustomerV2?: MutationToCreateCustomerV2Resolver<TParent>;
  createEmptyCart?: MutationToCreateEmptyCartResolver<TParent>;
  createKlarnaPaymentsSession?: MutationToCreateKlarnaPaymentsSessionResolver<TParent>;
  createKlarnaToken?: MutationToCreateKlarnaTokenResolver<TParent>;
  createPayflowProToken?: MutationToCreatePayflowProTokenResolver<TParent>;
  createPaypalExpressToken?: MutationToCreatePaypalExpressTokenResolver<TParent>;
  createProductReview?: MutationToCreateProductReviewResolver<TParent>;
  deleteCompareList?: MutationToDeleteCompareListResolver<TParent>;
  deleteCustomerAddress?: MutationToDeleteCustomerAddressResolver<TParent>;
  deletePaymentToken?: MutationToDeletePaymentTokenResolver<TParent>;
  estimateShippingCosts?: MutationToEstimateShippingCostsResolver<TParent>;
  forgotPassword?: MutationToForgotPasswordResolver<TParent>;
  generateCustomerToken?: MutationToGenerateCustomerTokenResolver<TParent>;
  generateCustomerTokenAsAdmin?: MutationToGenerateCustomerTokenAsAdminResolver<TParent>;
  handlePayflowProResponse?: MutationToHandlePayflowProResponseResolver<TParent>;
  linkOrder?: MutationToLinkOrderResolver<TParent>;
  mergeCarts?: MutationToMergeCartsResolver<TParent>;
  placeOrder?: MutationToPlaceOrderResolver<TParent>;
  productAlertSubscribe?: MutationToProductAlertSubscribeResolver<TParent>;
  removeCartItem?: MutationToRemoveCartItemResolver<TParent>;
  removeCoupon?: MutationToRemoveCouponResolver<TParent>;
  removeCouponFromCart?: MutationToRemoveCouponFromCartResolver<TParent>;
  removeItemFromCart?: MutationToRemoveItemFromCartResolver<TParent>;
  removeProductsFromCompareList?: MutationToRemoveProductsFromCompareListResolver<TParent>;
  removeProductsFromWishlist?: MutationToRemoveProductsFromWishlistResolver<TParent>;
  reorderItems?: MutationToReorderItemsResolver<TParent>;
  requestPasswordResetEmail?: MutationToRequestPasswordResetEmailResolver<TParent>;
  resendConfirmationEmail?: MutationToResendConfirmationEmailResolver<TParent>;
  resetPassword?: MutationToResetPasswordResolver<TParent>;
  revokeCustomerToken?: MutationToRevokeCustomerTokenResolver<TParent>;
  s_clearWishlist?: MutationToS_clearWishlistResolver<TParent>;
  s_createPaypalExpressToken?: MutationToS_createPaypalExpressTokenResolver<TParent>;
  s_moveWishlistToCart?: MutationToS_moveWishlistToCartResolver<TParent>;
  s_placeOrder?: MutationToS_placeOrderResolver<TParent>;
  s_removeProductFromWishlist?: MutationToS_removeProductFromWishlistResolver<TParent>;
  s_resetPassword?: MutationToS_resetPasswordResolver<TParent>;
  s_saveWishlistItem?: MutationToS_saveWishlistItemResolver<TParent>;
  s_setBillingAddressOnCart?: MutationToS_setBillingAddressOnCartResolver<TParent>;
  s_setPaymentMethodOnCart?: MutationToS_setPaymentMethodOnCartResolver<TParent>;
  s_shareWishlist?: MutationToS_shareWishlistResolver<TParent>;
  saveAddressInformation?: MutationToSaveAddressInformationResolver<TParent>;
  saveCartItem?: MutationToSaveCartItemResolver<TParent>;
  saveSelectedCurrency?: MutationToSaveSelectedCurrencyResolver<TParent>;
  sendEmailToFriend?: MutationToSendEmailToFriendResolver<TParent>;
  setBillingAddressOnCart?: MutationToSetBillingAddressOnCartResolver<TParent>;
  setGuestEmailOnCart?: MutationToSetGuestEmailOnCartResolver<TParent>;
  setPaymentMethodAndPlaceOrder?: MutationToSetPaymentMethodAndPlaceOrderResolver<TParent>;
  setPaymentMethodOnCart?: MutationToSetPaymentMethodOnCartResolver<TParent>;
  setShippingAddressesOnCart?: MutationToSetShippingAddressesOnCartResolver<TParent>;
  setShippingMethodsOnCart?: MutationToSetShippingMethodsOnCartResolver<TParent>;
  subscribeEmailToNewsletter?: MutationToSubscribeEmailToNewsletterResolver<TParent>;
  updateCartItems?: MutationToUpdateCartItemsResolver<TParent>;
  updateChatProfile?: MutationToUpdateChatProfileResolver<TParent>;
  updateCustomer?: MutationToUpdateCustomerResolver<TParent>;
  updateCustomerAddress?: MutationToUpdateCustomerAddressResolver<TParent>;
  updateCustomerEmail?: MutationToUpdateCustomerEmailResolver<TParent>;
  updateCustomerV2?: MutationToUpdateCustomerV2Resolver<TParent>;
  updateProductsInWishlist?: MutationToUpdateProductsInWishlistResolver<TParent>;
  updateQuoteEmail?: MutationToUpdateQuoteEmailResolver<TParent>;
}

export interface MutationToAddBundleProductsToCartArgs {
  input?: GQLAddBundleProductsToCartInput;
}
export interface MutationToAddBundleProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddBundleProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddConfigurableProductsToCartArgs {
  input?: GQLAddConfigurableProductsToCartInput;
}
export interface MutationToAddConfigurableProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddConfigurableProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddDownloadableProductsToCartArgs {
  input?: GQLAddDownloadableProductsToCartInput;
}
export interface MutationToAddDownloadableProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddDownloadableProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProductsToCartArgs {
  cartId: string;
  cartItems: Array<GQLCartItemInput>;
}
export interface MutationToAddProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProductsToCompareListArgs {
  input?: GQLAddProductsToCompareListInput;
}
export interface MutationToAddProductsToCompareListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProductsToCompareListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddProductsToWishlistArgs {
  wishlistId: string;
  wishlistItems: Array<GQLWishlistItemInput>;
}
export interface MutationToAddProductsToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddProductsToWishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddSimpleProductsToCartArgs {
  input?: GQLAddSimpleProductsToCartInput;
}
export interface MutationToAddSimpleProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddSimpleProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddVirtualProductsToCartArgs {
  input?: GQLAddVirtualProductsToCartInput;
}
export interface MutationToAddVirtualProductsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddVirtualProductsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAddWishlistItemsToCartArgs {
  wishlistId: string;
  wishlistItemIds?: Array<string>;
}
export interface MutationToAddWishlistItemsToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddWishlistItemsToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplyCouponArgs {
  guestCartId?: string;
  coupon_code: string;
}
export interface MutationToApplyCouponResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplyCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplyCouponToCartArgs {
  input?: GQLApplyCouponToCartInput;
}
export interface MutationToApplyCouponToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplyCouponToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAssignCompareListToCustomerArgs {
  uid: string;
}
export interface MutationToAssignCompareListToCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAssignCompareListToCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToChangeCustomerPasswordArgs {
  currentPassword: string;
  newPassword: string;
}
export interface MutationToChangeCustomerPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToChangeCustomerPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToConfirmCustomerEmailArgs {
  key: string;
  email: string;
  password: string;
}
export interface MutationToConfirmCustomerEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToConfirmCustomerEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToContactFormArgs {
  contact: GQLContactForm;
}
export interface MutationToContactFormResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToContactFormArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBraintreeClientTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCompareListArgs {
  input?: GQLCreateCompareListInput;
}
export interface MutationToCreateCompareListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCompareListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCustomerArgs {
  input: GQLCustomerInput;
}
export interface MutationToCreateCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCustomerAddressArgs {
  input: GQLCustomerAddressInput;
}
export interface MutationToCreateCustomerAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCustomerAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCustomerV2Args {
  input: GQLCustomerCreateInput;
}
export interface MutationToCreateCustomerV2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCustomerV2Args, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateEmptyCartArgs {
  input?: GQLcreateEmptyCartInput;
}
export interface MutationToCreateEmptyCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateEmptyCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateKlarnaPaymentsSessionArgs {
  input?: GQLcreateKlarnaPaymentsSessionInput;
}
export interface MutationToCreateKlarnaPaymentsSessionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateKlarnaPaymentsSessionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateKlarnaTokenArgs {
  input: GQLKlarnaTokenInput;
}
export interface MutationToCreateKlarnaTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateKlarnaTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePayflowProTokenArgs {
  input: GQLPayflowProTokenInput;
}
export interface MutationToCreatePayflowProTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePayflowProTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreatePaypalExpressTokenArgs {
  input: GQLPaypalExpressTokenInput;
}
export interface MutationToCreatePaypalExpressTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePaypalExpressTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateProductReviewArgs {
  input: GQLCreateProductReviewInput;
}
export interface MutationToCreateProductReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateProductReviewArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteCompareListArgs {
  uid: string;
}
export interface MutationToDeleteCompareListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteCompareListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteCustomerAddressArgs {
  id: number;
}
export interface MutationToDeleteCustomerAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteCustomerAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePaymentTokenArgs {
  public_hash: string;
}
export interface MutationToDeletePaymentTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePaymentTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEstimateShippingCostsArgs {
  address: GQLEstimateShippingCostsAddress;
  guestCartId?: string;
}
export interface MutationToEstimateShippingCostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEstimateShippingCostsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToForgotPasswordArgs {
  email: string;
}
export interface MutationToForgotPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToForgotPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToGenerateCustomerTokenArgs {
  email: string;
  password: string;
}
export interface MutationToGenerateCustomerTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToGenerateCustomerTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToGenerateCustomerTokenAsAdminArgs {
  input: GQLGenerateCustomerTokenAsAdminInput;
}
export interface MutationToGenerateCustomerTokenAsAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToGenerateCustomerTokenAsAdminArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToHandlePayflowProResponseArgs {
  input: GQLPayflowProResponseInput;
}
export interface MutationToHandlePayflowProResponseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToHandlePayflowProResponseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLinkOrderArgs {
  customer_email: string;
}
export interface MutationToLinkOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLinkOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToMergeCartsArgs {
  source_cart_id: string;
  destination_cart_id?: string;
}
export interface MutationToMergeCartsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToMergeCartsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPlaceOrderArgs {
  input?: GQLPlaceOrderInput;
}
export interface MutationToPlaceOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPlaceOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToProductAlertSubscribeArgs {
  productId: string;
  type: string;
}
export interface MutationToProductAlertSubscribeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToProductAlertSubscribeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCartItemArgs {
  guestCartId?: string;
  item_id: number;
}
export interface MutationToRemoveCartItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCartItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCouponArgs {
  guestCartId?: string;
}
export interface MutationToRemoveCouponResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCouponArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveCouponFromCartArgs {
  input?: GQLRemoveCouponFromCartInput;
}
export interface MutationToRemoveCouponFromCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveCouponFromCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveItemFromCartArgs {
  input?: GQLRemoveItemFromCartInput;
}
export interface MutationToRemoveItemFromCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveItemFromCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveProductsFromCompareListArgs {
  input?: GQLRemoveProductsFromCompareListInput;
}
export interface MutationToRemoveProductsFromCompareListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveProductsFromCompareListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRemoveProductsFromWishlistArgs {
  wishlistId: string;
  wishlistItemsIds: Array<string>;
}
export interface MutationToRemoveProductsFromWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRemoveProductsFromWishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToReorderItemsArgs {
  orderNumber: string;
}
export interface MutationToReorderItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToReorderItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRequestPasswordResetEmailArgs {
  email: string;
}
export interface MutationToRequestPasswordResetEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRequestPasswordResetEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResendConfirmationEmailArgs {
  email: string;
}
export interface MutationToResendConfirmationEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResendConfirmationEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToResetPasswordArgs {
  email: string;
  resetPasswordToken: string;
  newPassword: string;
}
export interface MutationToResetPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToResetPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRevokeCustomerTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_clearWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_createPaypalExpressTokenArgs {
  input: GQLS_PaypalExpressTokenInput;
}
export interface MutationToS_createPaypalExpressTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_createPaypalExpressTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_moveWishlistToCartArgs {
  guestCartId?: string;
  sharingCode?: string;
}
export interface MutationToS_moveWishlistToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_moveWishlistToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_placeOrderArgs {
  guestCartId?: string;
}
export interface MutationToS_placeOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_placeOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_removeProductFromWishlistArgs {
  itemId: string;
}
export interface MutationToS_removeProductFromWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_removeProductFromWishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_resetPasswordArgs {
  password: string;
  token: string;
  password_confirmation: string;
}
export interface MutationToS_resetPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_resetPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_saveWishlistItemArgs {
  wishlistItem: GQLWishlistItemInput;
}
export interface MutationToS_saveWishlistItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_saveWishlistItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_setBillingAddressOnCartArgs {
  input?: GQLS_SetBillingAddressOnCartInput;
}
export interface MutationToS_setBillingAddressOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_setBillingAddressOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_setPaymentMethodOnCartArgs {
  input: GQLS_SetPaymentMethodOnCartInput;
}
export interface MutationToS_setPaymentMethodOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_setPaymentMethodOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToS_shareWishlistArgs {
  input: GQLShareWishlistInput;
}
export interface MutationToS_shareWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToS_shareWishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSaveAddressInformationArgs {
  addressInformation: GQLSaveAddressInformation;
  guestCartId?: string;
}
export interface MutationToSaveAddressInformationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSaveAddressInformationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSaveCartItemArgs {
  cartItem: GQLCartItemInput;
  guestCartId?: string;
}
export interface MutationToSaveCartItemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSaveCartItemArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSaveSelectedCurrencyArgs {
  currency?: string;
}
export interface MutationToSaveSelectedCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSaveSelectedCurrencyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendEmailToFriendArgs {
  input?: GQLSendEmailToFriendInput;
}
export interface MutationToSendEmailToFriendResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendEmailToFriendArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetBillingAddressOnCartArgs {
  input?: GQLSetBillingAddressOnCartInput;
}
export interface MutationToSetBillingAddressOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetBillingAddressOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetGuestEmailOnCartArgs {
  input?: GQLSetGuestEmailOnCartInput;
}
export interface MutationToSetGuestEmailOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetGuestEmailOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetPaymentMethodAndPlaceOrderArgs {
  input?: GQLSetPaymentMethodAndPlaceOrderInput;
}
export interface MutationToSetPaymentMethodAndPlaceOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetPaymentMethodAndPlaceOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetPaymentMethodOnCartArgs {
  input?: GQLSetPaymentMethodOnCartInput;
}
export interface MutationToSetPaymentMethodOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetPaymentMethodOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetShippingAddressesOnCartArgs {
  input?: GQLSetShippingAddressesOnCartInput;
}
export interface MutationToSetShippingAddressesOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetShippingAddressesOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSetShippingMethodsOnCartArgs {
  input?: GQLSetShippingMethodsOnCartInput;
}
export interface MutationToSetShippingMethodsOnCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSetShippingMethodsOnCartArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSubscribeEmailToNewsletterArgs {
  email: string;
}
export interface MutationToSubscribeEmailToNewsletterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSubscribeEmailToNewsletterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCartItemsArgs {
  input?: GQLUpdateCartItemsInput;
}
export interface MutationToUpdateCartItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCartItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateChatProfileArgs {
  profileId: string;
  email?: string;
  firstname?: string;
  lastname?: string;
}
export interface MutationToUpdateChatProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateChatProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCustomerArgs {
  input: GQLCustomerInput;
}
export interface MutationToUpdateCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCustomerAddressArgs {
  id: number;
  input?: GQLCustomerAddressInput;
}
export interface MutationToUpdateCustomerAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCustomerAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCustomerEmailArgs {
  email: string;
  password: string;
}
export interface MutationToUpdateCustomerEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCustomerEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCustomerV2Args {
  input: GQLCustomerUpdateInput;
}
export interface MutationToUpdateCustomerV2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCustomerV2Args, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateProductsInWishlistArgs {
  wishlistId: string;
  wishlistItems: Array<GQLWishlistItemUpdateInput>;
}
export interface MutationToUpdateProductsInWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateProductsInWishlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateQuoteEmailArgs {
  email: string;
  cartId: string;
}
export interface MutationToUpdateQuoteEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateQuoteEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddBundleProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddBundleProductsToCartOutputToCartResolver<TParent>;
}

export interface AddBundleProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddConfigurableProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddConfigurableProductsToCartOutputToCartResolver<TParent>;
}

export interface AddConfigurableProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddDownloadableProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddDownloadableProductsToCartOutputToCartResolver<TParent>;
}

export interface AddDownloadableProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddProductsToCartOutputToCartResolver<TParent>;
  user_errors?: AddProductsToCartOutputToUser_errorsResolver<TParent>;
}

export interface AddProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProductsToCartOutputToUser_errorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCartUserInputErrorTypeResolver<TParent = any> {
  code?: CartUserInputErrorToCodeResolver<TParent>;
  message?: CartUserInputErrorToMessageResolver<TParent>;
}

export interface CartUserInputErrorToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CartUserInputErrorToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddProductsToWishlistOutputTypeResolver<TParent = any> {
  user_errors?: AddProductsToWishlistOutputToUser_errorsResolver<TParent>;
  wishlist?: AddProductsToWishlistOutputToWishlistResolver<TParent>;
}

export interface AddProductsToWishlistOutputToUser_errorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddProductsToWishlistOutputToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishListUserInputErrorTypeResolver<TParent = any> {
  code?: WishListUserInputErrorToCodeResolver<TParent>;
  message?: WishListUserInputErrorToMessageResolver<TParent>;
}

export interface WishListUserInputErrorToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishListUserInputErrorToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddSimpleProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddSimpleProductsToCartOutputToCartResolver<TParent>;
}

export interface AddSimpleProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddVirtualProductsToCartOutputTypeResolver<TParent = any> {
  cart?: AddVirtualProductsToCartOutputToCartResolver<TParent>;
}

export interface AddVirtualProductsToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddWishlistItemsToCartOutputTypeResolver<TParent = any> {
  add_wishlist_items_to_cart_user_errors?: AddWishlistItemsToCartOutputToAdd_wishlist_items_to_cart_user_errorsResolver<TParent>;
  status?: AddWishlistItemsToCartOutputToStatusResolver<TParent>;
  wishlist?: AddWishlistItemsToCartOutputToWishlistResolver<TParent>;
}

export interface AddWishlistItemsToCartOutputToAdd_wishlist_items_to_cart_user_errorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddWishlistItemsToCartOutputToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddWishlistItemsToCartOutputToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWishlistCartUserInputErrorTypeResolver<TParent = any> {
  code?: WishlistCartUserInputErrorToCodeResolver<TParent>;
  message?: WishlistCartUserInputErrorToMessageResolver<TParent>;
  wishlistId?: WishlistCartUserInputErrorToWishlistIdResolver<TParent>;
  wishlistItemId?: WishlistCartUserInputErrorToWishlistItemIdResolver<TParent>;
}

export interface WishlistCartUserInputErrorToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistCartUserInputErrorToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistCartUserInputErrorToWishlistIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WishlistCartUserInputErrorToWishlistItemIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApplyCouponToCartOutputTypeResolver<TParent = any> {
  cart?: ApplyCouponToCartOutputToCartResolver<TParent>;
}

export interface ApplyCouponToCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssignCompareListToCustomerOutputTypeResolver<TParent = any> {
  compare_list?: AssignCompareListToCustomerOutputToCompare_listResolver<TParent>;
  result?: AssignCompareListToCustomerOutputToResultResolver<TParent>;
}

export interface AssignCompareListToCustomerOutputToCompare_listResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssignCompareListToCustomerOutputToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateCustomerTypeTypeResolver<TParent = any> {
  customer?: CreateCustomerTypeToCustomerResolver<TParent>;
  status?: CreateCustomerTypeToStatusResolver<TParent>;
  token?: CreateCustomerTypeToTokenResolver<TParent>;
}

export interface CreateCustomerTypeToCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateCustomerTypeToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreateCustomerTypeToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactFormResponseTypeResolver<TParent = any> {
  message?: ContactFormResponseToMessageResolver<TParent>;
}

export interface ContactFormResponseToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerOutputTypeResolver<TParent = any> {
  customer?: CustomerOutputToCustomerResolver<TParent>;
}

export interface CustomerOutputToCustomerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLcreateKlarnaPaymentsSessionOutputTypeResolver<TParent = any> {
  client_token?: createKlarnaPaymentsSessionOutputToClient_tokenResolver<TParent>;
  payment_method_categories?: createKlarnaPaymentsSessionOutputToPayment_method_categoriesResolver<TParent>;
}

export interface createKlarnaPaymentsSessionOutputToClient_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface createKlarnaPaymentsSessionOutputToPayment_method_categoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCategoriesTypeResolver<TParent = any> {
  asset_urls?: CategoriesToAsset_urlsResolver<TParent>;
  identifier?: CategoriesToIdentifierResolver<TParent>;
  name?: CategoriesToNameResolver<TParent>;
}

export interface CategoriesToAsset_urlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoriesToIdentifierResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CategoriesToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAssetsTypeResolver<TParent = any> {
  descriptive?: AssetsToDescriptiveResolver<TParent>;
  standard?: AssetsToStandardResolver<TParent>;
}

export interface AssetsToDescriptiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AssetsToStandardResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreatePayflowProTokenOutputTypeResolver<TParent = any> {
  response_message?: CreatePayflowProTokenOutputToResponse_messageResolver<TParent>;
  result?: CreatePayflowProTokenOutputToResultResolver<TParent>;
  result_code?: CreatePayflowProTokenOutputToResult_codeResolver<TParent>;
  secure_token?: CreatePayflowProTokenOutputToSecure_tokenResolver<TParent>;
  secure_token_id?: CreatePayflowProTokenOutputToSecure_token_idResolver<TParent>;
}

export interface CreatePayflowProTokenOutputToResponse_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatePayflowProTokenOutputToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatePayflowProTokenOutputToResult_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatePayflowProTokenOutputToSecure_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreatePayflowProTokenOutputToSecure_token_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaypalExpressTokenOutputTypeResolver<TParent = any> {
  paypal_urls?: PaypalExpressTokenOutputToPaypal_urlsResolver<TParent>;
  token?: PaypalExpressTokenOutputToTokenResolver<TParent>;
}

export interface PaypalExpressTokenOutputToPaypal_urlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaypalExpressTokenOutputToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaypalExpressUrlListTypeResolver<TParent = any> {
  edit?: PaypalExpressUrlListToEditResolver<TParent>;
  start?: PaypalExpressUrlListToStartResolver<TParent>;
}

export interface PaypalExpressUrlListToEditResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaypalExpressUrlListToStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreateProductReviewOutputTypeResolver<TParent = any> {
  review?: CreateProductReviewOutputToReviewResolver<TParent>;
}

export interface CreateProductReviewOutputToReviewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeleteCompareListOutputTypeResolver<TParent = any> {
  result?: DeleteCompareListOutputToResultResolver<TParent>;
}

export interface DeleteCompareListOutputToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeletePaymentTokenOutputTypeResolver<TParent = any> {
  customerPaymentTokens?: DeletePaymentTokenOutputToCustomerPaymentTokensResolver<TParent>;
  result?: DeletePaymentTokenOutputToResultResolver<TParent>;
}

export interface DeletePaymentTokenOutputToCustomerPaymentTokensResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeletePaymentTokenOutputToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShippingMethodTypeResolver<TParent = any> {
  amount?: ShippingMethodToAmountResolver<TParent>;
  available?: ShippingMethodToAvailableResolver<TParent>;
  base_amount?: ShippingMethodToBase_amountResolver<TParent>;
  carrier_code?: ShippingMethodToCarrier_codeResolver<TParent>;
  carrier_title?: ShippingMethodToCarrier_titleResolver<TParent>;
  error_message?: ShippingMethodToError_messageResolver<TParent>;
  method_code?: ShippingMethodToMethod_codeResolver<TParent>;
  method_title?: ShippingMethodToMethod_titleResolver<TParent>;
  price_excl_tax?: ShippingMethodToPrice_excl_taxResolver<TParent>;
  price_incl_tax?: ShippingMethodToPrice_incl_taxResolver<TParent>;
}

export interface ShippingMethodToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToBase_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToCarrier_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToCarrier_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToError_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToMethod_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToMethod_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToPrice_excl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShippingMethodToPrice_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerActionConfirmationTypeTypeResolver<TParent = any> {
  status?: CustomerActionConfirmationTypeToStatusResolver<TParent>;
}

export interface CustomerActionConfirmationTypeToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomerTokenTypeResolver<TParent = any> {
  token?: CustomerTokenToTokenResolver<TParent>;
}

export interface CustomerTokenToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGenerateCustomerTokenAsAdminOutputTypeResolver<TParent = any> {
  customer_token?: GenerateCustomerTokenAsAdminOutputToCustomer_tokenResolver<TParent>;
}

export interface GenerateCustomerTokenAsAdminOutputToCustomer_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPayflowProResponseOutputTypeResolver<TParent = any> {
  cart?: PayflowProResponseOutputToCartResolver<TParent>;
}

export interface PayflowProResponseOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPlaceOrderOutputTypeResolver<TParent = any> {
  order?: PlaceOrderOutputToOrderResolver<TParent>;
}

export interface PlaceOrderOutputToOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveCouponFromCartOutputTypeResolver<TParent = any> {
  cart?: RemoveCouponFromCartOutputToCartResolver<TParent>;
}

export interface RemoveCouponFromCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveItemFromCartOutputTypeResolver<TParent = any> {
  cart?: RemoveItemFromCartOutputToCartResolver<TParent>;
}

export interface RemoveItemFromCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRemoveProductsFromWishlistOutputTypeResolver<TParent = any> {
  user_errors?: RemoveProductsFromWishlistOutputToUser_errorsResolver<TParent>;
  wishlist?: RemoveProductsFromWishlistOutputToWishlistResolver<TParent>;
}

export interface RemoveProductsFromWishlistOutputToUser_errorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RemoveProductsFromWishlistOutputToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLReorderItemsOutputTypeResolver<TParent = any> {
  cart?: ReorderItemsOutputToCartResolver<TParent>;
  userInputErrors?: ReorderItemsOutputToUserInputErrorsResolver<TParent>;
}

export interface ReorderItemsOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReorderItemsOutputToUserInputErrorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCheckoutUserInputErrorTypeResolver<TParent = any> {
  code?: CheckoutUserInputErrorToCodeResolver<TParent>;
  message?: CheckoutUserInputErrorToMessageResolver<TParent>;
  path?: CheckoutUserInputErrorToPathResolver<TParent>;
}

export interface CheckoutUserInputErrorToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutUserInputErrorToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CheckoutUserInputErrorToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRevokeCustomerTokenOutputTypeResolver<TParent = any> {
  result?: RevokeCustomerTokenOutputToResultResolver<TParent>;
}

export interface RevokeCustomerTokenOutputToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaypalExpressTokenTypeResolver<TParent = any> {
  paypal_urls?: PaypalExpressTokenToPaypal_urlsResolver<TParent>;
  token?: PaypalExpressTokenToTokenResolver<TParent>;
}

export interface PaypalExpressTokenToPaypal_urlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaypalExpressTokenToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLResetPasswordTypeTypeResolver<TParent = any> {
  status?: ResetPasswordTypeToStatusResolver<TParent>;
  token?: ResetPasswordTypeToTokenResolver<TParent>;
}

export interface ResetPasswordTypeToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ResetPasswordTypeToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetBillingAddressOnCartOutputTypeResolver<TParent = any> {
  cart?: SetBillingAddressOnCartOutputToCartResolver<TParent>;
}

export interface SetBillingAddressOnCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetPaymentMethodOnCartOutputTypeResolver<TParent = any> {
  cart?: SetPaymentMethodOnCartOutputToCartResolver<TParent>;
}

export interface SetPaymentMethodOnCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentDetailsTypeResolver<TParent = any> {
  payment_methods?: PaymentDetailsToPayment_methodsResolver<TParent>;
  totals?: PaymentDetailsToTotalsResolver<TParent>;
}

export interface PaymentDetailsToPayment_methodsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentDetailsToTotalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaymentTotalsTypeResolver<TParent = any> {
  applied_rule_ids?: PaymentTotalsToApplied_rule_idsResolver<TParent>;
  base_currency_code?: PaymentTotalsToBase_currency_codeResolver<TParent>;
  base_discount_amount?: PaymentTotalsToBase_discount_amountResolver<TParent>;
  base_grand_total?: PaymentTotalsToBase_grand_totalResolver<TParent>;
  base_shipping_amount?: PaymentTotalsToBase_shipping_amountResolver<TParent>;
  base_shipping_discount_amount?: PaymentTotalsToBase_shipping_discount_amountResolver<TParent>;
  base_shipping_incl_tax?: PaymentTotalsToBase_shipping_incl_taxResolver<TParent>;
  base_shipping_tax_amount?: PaymentTotalsToBase_shipping_tax_amountResolver<TParent>;
  base_subtotal?: PaymentTotalsToBase_subtotalResolver<TParent>;
  base_subtotal_with_discount?: PaymentTotalsToBase_subtotal_with_discountResolver<TParent>;
  base_tax_amount?: PaymentTotalsToBase_tax_amountResolver<TParent>;
  coupon_code?: PaymentTotalsToCoupon_codeResolver<TParent>;
  customer_is_guest?: PaymentTotalsToCustomer_is_guestResolver<TParent>;
  customer_tax_class_id?: PaymentTotalsToCustomer_tax_class_idResolver<TParent>;
  discount_amount?: PaymentTotalsToDiscount_amountResolver<TParent>;
  grand_total?: PaymentTotalsToGrand_totalResolver<TParent>;
  is_in_store_pickup_available?: PaymentTotalsToIs_in_store_pickup_availableResolver<TParent>;
  items?: PaymentTotalsToItemsResolver<TParent>;
  items_count?: PaymentTotalsToItems_countResolver<TParent>;
  items_qty?: PaymentTotalsToItems_qtyResolver<TParent>;
  quote_currency_code?: PaymentTotalsToQuote_currency_codeResolver<TParent>;
  shipping_amount?: PaymentTotalsToShipping_amountResolver<TParent>;
  shipping_discount_amount?: PaymentTotalsToShipping_discount_amountResolver<TParent>;
  shipping_incl_tax?: PaymentTotalsToShipping_incl_taxResolver<TParent>;
  shipping_method?: PaymentTotalsToShipping_methodResolver<TParent>;
  shipping_tax_amount?: PaymentTotalsToShipping_tax_amountResolver<TParent>;
  store_id?: PaymentTotalsToStore_idResolver<TParent>;
  subtotal?: PaymentTotalsToSubtotalResolver<TParent>;
  subtotal_incl_tax?: PaymentTotalsToSubtotal_incl_taxResolver<TParent>;
  subtotal_with_discount?: PaymentTotalsToSubtotal_with_discountResolver<TParent>;
  tax_amount?: PaymentTotalsToTax_amountResolver<TParent>;
  weee_tax_applied_amount?: PaymentTotalsToWeee_tax_applied_amountResolver<TParent>;
}

export interface PaymentTotalsToApplied_rule_idsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_grand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_shipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_shipping_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_shipping_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_shipping_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_subtotal_with_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToBase_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToCoupon_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToCustomer_is_guestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToCustomer_tax_class_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToDiscount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToGrand_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToIs_in_store_pickup_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToItems_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToQuote_currency_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToShipping_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToShipping_discount_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToShipping_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToShipping_methodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToShipping_tax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToStore_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToSubtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToSubtotal_incl_taxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToSubtotal_with_discountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToTax_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaymentTotalsToWeee_tax_applied_amountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSendEmailToFriendOutputTypeResolver<TParent = any> {
  recipients?: SendEmailToFriendOutputToRecipientsResolver<TParent>;
  sender?: SendEmailToFriendOutputToSenderResolver<TParent>;
}

export interface SendEmailToFriendOutputToRecipientsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SendEmailToFriendOutputToSenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSendEmailToFriendRecipientTypeResolver<TParent = any> {
  email?: SendEmailToFriendRecipientToEmailResolver<TParent>;
  name?: SendEmailToFriendRecipientToNameResolver<TParent>;
}

export interface SendEmailToFriendRecipientToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SendEmailToFriendRecipientToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSendEmailToFriendSenderTypeResolver<TParent = any> {
  email?: SendEmailToFriendSenderToEmailResolver<TParent>;
  message?: SendEmailToFriendSenderToMessageResolver<TParent>;
  name?: SendEmailToFriendSenderToNameResolver<TParent>;
}

export interface SendEmailToFriendSenderToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SendEmailToFriendSenderToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SendEmailToFriendSenderToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetGuestEmailOnCartOutputTypeResolver<TParent = any> {
  cart?: SetGuestEmailOnCartOutputToCartResolver<TParent>;
}

export interface SetGuestEmailOnCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetShippingAddressesOnCartOutputTypeResolver<TParent = any> {
  cart?: SetShippingAddressesOnCartOutputToCartResolver<TParent>;
}

export interface SetShippingAddressesOnCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSetShippingMethodsOnCartOutputTypeResolver<TParent = any> {
  cart?: SetShippingMethodsOnCartOutputToCartResolver<TParent>;
}

export interface SetShippingMethodsOnCartOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscribeEmailToNewsletterOutputTypeResolver<TParent = any> {
  status?: SubscribeEmailToNewsletterOutputToStatusResolver<TParent>;
}

export interface SubscribeEmailToNewsletterOutputToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateCartItemsOutputTypeResolver<TParent = any> {
  cart?: UpdateCartItemsOutputToCartResolver<TParent>;
}

export interface UpdateCartItemsOutputToCartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUpdateProductsInWishlistOutputTypeResolver<TParent = any> {
  user_errors?: UpdateProductsInWishlistOutputToUser_errorsResolver<TParent>;
  wishlist?: UpdateProductsInWishlistOutputToWishlistResolver<TParent>;
}

export interface UpdateProductsInWishlistOutputToUser_errorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UpdateProductsInWishlistOutputToWishlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAvailabilityResponseTypeTypeResolver<TParent = any> {
  isAvailable?: AvailabilityResponseTypeToIsAvailableResolver<TParent>;
}

export interface AvailabilityResponseTypeToIsAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleCartItemTypeResolver<TParent = any> {
  bundle_options?: BundleCartItemToBundle_optionsResolver<TParent>;
  customizable_options?: BundleCartItemToCustomizable_optionsResolver<TParent>;
  gift_message?: BundleCartItemToGift_messageResolver<TParent>;
  id?: BundleCartItemToIdResolver<TParent>;
  prices?: BundleCartItemToPricesResolver<TParent>;
  product?: BundleCartItemToProductResolver<TParent>;
  quantity?: BundleCartItemToQuantityResolver<TParent>;
  uid?: BundleCartItemToUidResolver<TParent>;
}

export interface BundleCartItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCartItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleCreditMemoItemTypeResolver<TParent = any> {
  bundle_options?: BundleCreditMemoItemToBundle_optionsResolver<TParent>;
  discounts?: BundleCreditMemoItemToDiscountsResolver<TParent>;
  id?: BundleCreditMemoItemToIdResolver<TParent>;
  order_item?: BundleCreditMemoItemToOrder_itemResolver<TParent>;
  product_name?: BundleCreditMemoItemToProduct_nameResolver<TParent>;
  product_sale_price?: BundleCreditMemoItemToProduct_sale_priceResolver<TParent>;
  product_sku?: BundleCreditMemoItemToProduct_skuResolver<TParent>;
  quantity_refunded?: BundleCreditMemoItemToQuantity_refundedResolver<TParent>;
  row_subtotal?: BundleCreditMemoItemToRow_subtotalResolver<TParent>;
}

export interface BundleCreditMemoItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleCreditMemoItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemSelectedBundleOptionTypeResolver<TParent = any> {
  id?: ItemSelectedBundleOptionToIdResolver<TParent>;
  label?: ItemSelectedBundleOptionToLabelResolver<TParent>;
  uid?: ItemSelectedBundleOptionToUidResolver<TParent>;
  values?: ItemSelectedBundleOptionToValuesResolver<TParent>;
}

export interface ItemSelectedBundleOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLItemSelectedBundleOptionValueTypeResolver<TParent = any> {
  id?: ItemSelectedBundleOptionValueToIdResolver<TParent>;
  price?: ItemSelectedBundleOptionValueToPriceResolver<TParent>;
  product_name?: ItemSelectedBundleOptionValueToProduct_nameResolver<TParent>;
  product_sku?: ItemSelectedBundleOptionValueToProduct_skuResolver<TParent>;
  quantity?: ItemSelectedBundleOptionValueToQuantityResolver<TParent>;
  uid?: ItemSelectedBundleOptionValueToUidResolver<TParent>;
}

export interface ItemSelectedBundleOptionValueToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionValueToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionValueToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionValueToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ItemSelectedBundleOptionValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleInvoiceItemTypeResolver<TParent = any> {
  bundle_options?: BundleInvoiceItemToBundle_optionsResolver<TParent>;
  discounts?: BundleInvoiceItemToDiscountsResolver<TParent>;
  id?: BundleInvoiceItemToIdResolver<TParent>;
  order_item?: BundleInvoiceItemToOrder_itemResolver<TParent>;
  product_name?: BundleInvoiceItemToProduct_nameResolver<TParent>;
  product_sale_price?: BundleInvoiceItemToProduct_sale_priceResolver<TParent>;
  product_sku?: BundleInvoiceItemToProduct_skuResolver<TParent>;
  quantity_invoiced?: BundleInvoiceItemToQuantity_invoicedResolver<TParent>;
  row_subtotal?: BundleInvoiceItemToRow_subtotalResolver<TParent>;
}

export interface BundleInvoiceItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleInvoiceItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleItemTypeResolver<TParent = any> {
  option_id?: BundleItemToOption_idResolver<TParent>;
  options?: BundleItemToOptionsResolver<TParent>;
  position?: BundleItemToPositionResolver<TParent>;
  required?: BundleItemToRequiredResolver<TParent>;
  sku?: BundleItemToSkuResolver<TParent>;
  title?: BundleItemToTitleResolver<TParent>;
  type?: BundleItemToTypeResolver<TParent>;
  uid?: BundleItemToUidResolver<TParent>;
}

export interface BundleItemToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleItemOptionTypeResolver<TParent = any> {
  can_change_quantity?: BundleItemOptionToCan_change_quantityResolver<TParent>;
  id?: BundleItemOptionToIdResolver<TParent>;
  is_default?: BundleItemOptionToIs_defaultResolver<TParent>;
  label?: BundleItemOptionToLabelResolver<TParent>;
  position?: BundleItemOptionToPositionResolver<TParent>;
  price?: BundleItemOptionToPriceResolver<TParent>;
  price_type?: BundleItemOptionToPrice_typeResolver<TParent>;
  product?: BundleItemOptionToProductResolver<TParent>;
  qty?: BundleItemOptionToQtyResolver<TParent>;
  quantity?: BundleItemOptionToQuantityResolver<TParent>;
  uid?: BundleItemOptionToUidResolver<TParent>;
}

export interface BundleItemOptionToCan_change_quantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToIs_defaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleItemOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleOptionsTypeResolver<TParent = any> {
  items?: BundleOptionsToItemsResolver<TParent>;
  type?: BundleOptionsToTypeResolver<TParent>;
}

export interface BundleOptionsToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOptionsToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleOrderItemTypeResolver<TParent = any> {
  bundle_options?: BundleOrderItemToBundle_optionsResolver<TParent>;
  discounts?: BundleOrderItemToDiscountsResolver<TParent>;
  entered_options?: BundleOrderItemToEntered_optionsResolver<TParent>;
  id?: BundleOrderItemToIdResolver<TParent>;
  product_name?: BundleOrderItemToProduct_nameResolver<TParent>;
  product_sale_price?: BundleOrderItemToProduct_sale_priceResolver<TParent>;
  product_sku?: BundleOrderItemToProduct_skuResolver<TParent>;
  product_type?: BundleOrderItemToProduct_typeResolver<TParent>;
  product_url_key?: BundleOrderItemToProduct_url_keyResolver<TParent>;
  quantity_canceled?: BundleOrderItemToQuantity_canceledResolver<TParent>;
  quantity_invoiced?: BundleOrderItemToQuantity_invoicedResolver<TParent>;
  quantity_ordered?: BundleOrderItemToQuantity_orderedResolver<TParent>;
  quantity_refunded?: BundleOrderItemToQuantity_refundedResolver<TParent>;
  quantity_returned?: BundleOrderItemToQuantity_returnedResolver<TParent>;
  quantity_shipped?: BundleOrderItemToQuantity_shippedResolver<TParent>;
  row_subtotal?: BundleOrderItemToRow_subtotalResolver<TParent>;
  selected_options?: BundleOrderItemToSelected_optionsResolver<TParent>;
  status?: BundleOrderItemToStatusResolver<TParent>;
}

export interface BundleOrderItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToEntered_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToProduct_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToProduct_url_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_canceledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_orderedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_returnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToQuantity_shippedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToSelected_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleOrderItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleProductTypeResolver<TParent = any> {
  New_attribute_size?: BundleProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: BundleProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: BundleProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: BundleProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: BundleProductToAttribute_set_idResolver<TParent>;
  brand?: BundleProductToBrandResolver<TParent>;
  bundle_options?: BundleProductToBundle_optionsResolver<TParent>;
  canonical_url?: BundleProductToCanonical_urlResolver<TParent>;
  categories?: BundleProductToCategoriesResolver<TParent>;
  clothing_colour?: BundleProductToClothing_colourResolver<TParent>;
  clothing_gender?: BundleProductToClothing_genderResolver<TParent>;
  clothing_size?: BundleProductToClothing_sizeResolver<TParent>;
  clothing_type?: BundleProductToClothing_typeResolver<TParent>;
  color?: BundleProductToColorResolver<TParent>;
  color_elena?: BundleProductToColor_elenaResolver<TParent>;
  colors_with_images?: BundleProductToColors_with_imagesResolver<TParent>;
  country_of_manufacture?: BundleProductToCountry_of_manufactureResolver<TParent>;
  created_at?: BundleProductToCreated_atResolver<TParent>;
  crosssell_products?: BundleProductToCrosssell_productsResolver<TParent>;
  description?: BundleProductToDescriptionResolver<TParent>;
  dynamic_price?: BundleProductToDynamic_priceResolver<TParent>;
  dynamic_sku?: BundleProductToDynamic_skuResolver<TParent>;
  dynamic_weight?: BundleProductToDynamic_weightResolver<TParent>;
  fit?: BundleProductToFitResolver<TParent>;
  gift_message_available?: BundleProductToGift_message_availableResolver<TParent>;
  id?: BundleProductToIdResolver<TParent>;
  image?: BundleProductToImageResolver<TParent>;
  images_type_map?: BundleProductToImages_type_mapResolver<TParent>;
  items?: BundleProductToItemsResolver<TParent>;
  license_key?: BundleProductToLicense_keyResolver<TParent>;
  manufacturer?: BundleProductToManufacturerResolver<TParent>;
  material?: BundleProductToMaterialResolver<TParent>;
  media_gallery?: BundleProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: BundleProductToMedia_gallery_entriesResolver<TParent>;
  memory?: BundleProductToMemoryResolver<TParent>;
  meta_description?: BundleProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: BundleProductToMeta_keywordResolver<TParent>;
  meta_title?: BundleProductToMeta_titleResolver<TParent>;
  multiple_attribute?: BundleProductToMultiple_attributeResolver<TParent>;
  name?: BundleProductToNameResolver<TParent>;
  new_from_date?: BundleProductToNew_from_dateResolver<TParent>;
  new_to_date?: BundleProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: BundleProductToOnly_x_left_in_stockResolver<TParent>;
  options?: BundleProductToOptionsResolver<TParent>;
  options_container?: BundleProductToOptions_containerResolver<TParent>;
  original_price?: BundleProductToOriginal_priceResolver<TParent>;
  price?: BundleProductToPriceResolver<TParent>;
  price_range?: BundleProductToPrice_rangeResolver<TParent>;
  price_tiers?: BundleProductToPrice_tiersResolver<TParent>;
  price_view?: BundleProductToPrice_viewResolver<TParent>;
  product_links?: BundleProductToProduct_linksResolver<TParent>;
  qty?: BundleProductToQtyResolver<TParent>;
  quantity?: BundleProductToQuantityResolver<TParent>;
  ranking?: BundleProductToRankingResolver<TParent>;
  rating_summary?: BundleProductToRating_summaryResolver<TParent>;
  redirect_code?: BundleProductToRedirect_codeResolver<TParent>;
  related_products?: BundleProductToRelated_productsResolver<TParent>;
  relative_url?: BundleProductToRelative_urlResolver<TParent>;
  review_count?: BundleProductToReview_countResolver<TParent>;
  reviews?: BundleProductToReviewsResolver<TParent>;
  row_total?: BundleProductToRow_totalResolver<TParent>;
  s_attributes?: BundleProductToS_attributesResolver<TParent>;
  salable_qty?: BundleProductToSalable_qtyResolver<TParent>;
  ship_bundle_items?: BundleProductToShip_bundle_itemsResolver<TParent>;
  shoes_size?: BundleProductToShoes_sizeResolver<TParent>;
  short_description?: BundleProductToShort_descriptionResolver<TParent>;
  size?: BundleProductToSizeResolver<TParent>;
  sku?: BundleProductToSkuResolver<TParent>;
  small_image?: BundleProductToSmall_imageResolver<TParent>;
  special_from_date?: BundleProductToSpecial_from_dateResolver<TParent>;
  special_price?: BundleProductToSpecial_priceResolver<TParent>;
  special_to_date?: BundleProductToSpecial_to_dateResolver<TParent>;
  stock_item?: BundleProductToStock_itemResolver<TParent>;
  stock_status?: BundleProductToStock_statusResolver<TParent>;
  swatch_image?: BundleProductToSwatch_imageResolver<TParent>;
  test?: BundleProductToTestResolver<TParent>;
  texture?: BundleProductToTextureResolver<TParent>;
  thumbnail?: BundleProductToThumbnailResolver<TParent>;
  tier_price?: BundleProductToTier_priceResolver<TParent>;
  tier_prices?: BundleProductToTier_pricesResolver<TParent>;
  type?: BundleProductToTypeResolver<TParent>;
  type_id?: BundleProductToType_idResolver<TParent>;
  uid?: BundleProductToUidResolver<TParent>;
  updated_at?: BundleProductToUpdated_atResolver<TParent>;
  upsell_products?: BundleProductToUpsell_productsResolver<TParent>;
  url?: BundleProductToUrlResolver<TParent>;
  url_key?: BundleProductToUrl_keyResolver<TParent>;
  url_path?: BundleProductToUrl_pathResolver<TParent>;
  url_rewrites?: BundleProductToUrl_rewritesResolver<TParent>;
  url_suffix?: BundleProductToUrl_suffixResolver<TParent>;
  valuesss?: BundleProductToValuesssResolver<TParent>;
  websites?: BundleProductToWebsitesResolver<TParent>;
  weight?: BundleProductToWeightResolver<TParent>;
  yes_no?: BundleProductToYes_noResolver<TParent>;
}

export interface BundleProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToDynamic_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToDynamic_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToDynamic_weightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToPrice_viewResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface BundleProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BundleProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToShip_bundle_itemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToWeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhysicalProductInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'GroupedProduct' | Promise<'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'GroupedProduct'>;
}
export interface GQLCustomizableProductInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'VirtualProduct' | Promise<'BundleProduct' | 'ConfigurableProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'VirtualProduct'>;
}
export interface GQLCustomizableOptionInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CustomizableAreaOption' | 'CustomizableCheckboxOption' | 'CustomizableDateOption' | 'CustomizableDropDownOption' | 'CustomizableFieldOption' | 'CustomizableFileOption' | 'CustomizableMultipleOption' | 'CustomizableRadioOption' | Promise<'CustomizableAreaOption' | 'CustomizableCheckboxOption' | 'CustomizableDateOption' | 'CustomizableDropDownOption' | 'CustomizableFieldOption' | 'CustomizableFileOption' | 'CustomizableMultipleOption' | 'CustomizableRadioOption'>;
}
export interface GQLBundleShipmentItemTypeResolver<TParent = any> {
  bundle_options?: BundleShipmentItemToBundle_optionsResolver<TParent>;
  id?: BundleShipmentItemToIdResolver<TParent>;
  order_item?: BundleShipmentItemToOrder_itemResolver<TParent>;
  product_name?: BundleShipmentItemToProduct_nameResolver<TParent>;
  product_sale_price?: BundleShipmentItemToProduct_sale_priceResolver<TParent>;
  product_sku?: BundleShipmentItemToProduct_skuResolver<TParent>;
  quantity_shipped?: BundleShipmentItemToQuantity_shippedResolver<TParent>;
}

export interface BundleShipmentItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleShipmentItemToQuantity_shippedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBundleWishlistItemTypeResolver<TParent = any> {
  added_at?: BundleWishlistItemToAdded_atResolver<TParent>;
  bundle_options?: BundleWishlistItemToBundle_optionsResolver<TParent>;
  customizable_options?: BundleWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: BundleWishlistItemToDescriptionResolver<TParent>;
  id?: BundleWishlistItemToIdResolver<TParent>;
  product?: BundleWishlistItemToProductResolver<TParent>;
  quantity?: BundleWishlistItemToQuantityResolver<TParent>;
}

export interface BundleWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToBundle_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BundleWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLColorSwatchDataTypeResolver<TParent = any> {
  value?: ColorSwatchDataToValueResolver<TParent>;
}

export interface ColorSwatchDataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSwatchDataInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ColorSwatchData' | 'ImageSwatchData' | 'TextSwatchData' | Promise<'ColorSwatchData' | 'ImageSwatchData' | 'TextSwatchData'>;
}
export interface GQLConfigurableAttributeOptionTypeResolver<TParent = any> {
  code?: ConfigurableAttributeOptionToCodeResolver<TParent>;
  label?: ConfigurableAttributeOptionToLabelResolver<TParent>;
  uid?: ConfigurableAttributeOptionToUidResolver<TParent>;
  value_index?: ConfigurableAttributeOptionToValue_indexResolver<TParent>;
}

export interface ConfigurableAttributeOptionToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableAttributeOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableAttributeOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableAttributeOptionToValue_indexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableCartItemTypeResolver<TParent = any> {
  configurable_options?: ConfigurableCartItemToConfigurable_optionsResolver<TParent>;
  configured_variant?: ConfigurableCartItemToConfigured_variantResolver<TParent>;
  customizable_options?: ConfigurableCartItemToCustomizable_optionsResolver<TParent>;
  gift_message?: ConfigurableCartItemToGift_messageResolver<TParent>;
  id?: ConfigurableCartItemToIdResolver<TParent>;
  prices?: ConfigurableCartItemToPricesResolver<TParent>;
  product?: ConfigurableCartItemToProductResolver<TParent>;
  quantity?: ConfigurableCartItemToQuantityResolver<TParent>;
  uid?: ConfigurableCartItemToUidResolver<TParent>;
}

export interface ConfigurableCartItemToConfigurable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToConfigured_variantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableCartItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSelectedConfigurableOptionTypeResolver<TParent = any> {
  configurable_product_option_uid?: SelectedConfigurableOptionToConfigurable_product_option_uidResolver<TParent>;
  configurable_product_option_value_uid?: SelectedConfigurableOptionToConfigurable_product_option_value_uidResolver<TParent>;
  id?: SelectedConfigurableOptionToIdResolver<TParent>;
  option_label?: SelectedConfigurableOptionToOption_labelResolver<TParent>;
  value_id?: SelectedConfigurableOptionToValue_idResolver<TParent>;
  value_label?: SelectedConfigurableOptionToValue_labelResolver<TParent>;
}

export interface SelectedConfigurableOptionToConfigurable_product_option_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedConfigurableOptionToConfigurable_product_option_value_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedConfigurableOptionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedConfigurableOptionToOption_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedConfigurableOptionToValue_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SelectedConfigurableOptionToValue_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableOptionAvailableForSelectionTypeResolver<TParent = any> {
  attribute_code?: ConfigurableOptionAvailableForSelectionToAttribute_codeResolver<TParent>;
  option_value_uids?: ConfigurableOptionAvailableForSelectionToOption_value_uidsResolver<TParent>;
}

export interface ConfigurableOptionAvailableForSelectionToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableOptionAvailableForSelectionToOption_value_uidsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductTypeResolver<TParent = any> {
  New_attribute_size?: ConfigurableProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: ConfigurableProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: ConfigurableProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: ConfigurableProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: ConfigurableProductToAttribute_set_idResolver<TParent>;
  brand?: ConfigurableProductToBrandResolver<TParent>;
  canonical_url?: ConfigurableProductToCanonical_urlResolver<TParent>;
  categories?: ConfigurableProductToCategoriesResolver<TParent>;
  clothing_colour?: ConfigurableProductToClothing_colourResolver<TParent>;
  clothing_gender?: ConfigurableProductToClothing_genderResolver<TParent>;
  clothing_size?: ConfigurableProductToClothing_sizeResolver<TParent>;
  clothing_type?: ConfigurableProductToClothing_typeResolver<TParent>;
  color?: ConfigurableProductToColorResolver<TParent>;
  color_elena?: ConfigurableProductToColor_elenaResolver<TParent>;
  colors_with_images?: ConfigurableProductToColors_with_imagesResolver<TParent>;
  configurable_options?: ConfigurableProductToConfigurable_optionsResolver<TParent>;
  configurable_product_options_selection?: ConfigurableProductToConfigurable_product_options_selectionResolver<TParent>;
  country_of_manufacture?: ConfigurableProductToCountry_of_manufactureResolver<TParent>;
  created_at?: ConfigurableProductToCreated_atResolver<TParent>;
  crosssell_products?: ConfigurableProductToCrosssell_productsResolver<TParent>;
  description?: ConfigurableProductToDescriptionResolver<TParent>;
  fit?: ConfigurableProductToFitResolver<TParent>;
  gift_message_available?: ConfigurableProductToGift_message_availableResolver<TParent>;
  id?: ConfigurableProductToIdResolver<TParent>;
  image?: ConfigurableProductToImageResolver<TParent>;
  images_type_map?: ConfigurableProductToImages_type_mapResolver<TParent>;
  license_key?: ConfigurableProductToLicense_keyResolver<TParent>;
  manufacturer?: ConfigurableProductToManufacturerResolver<TParent>;
  material?: ConfigurableProductToMaterialResolver<TParent>;
  media_gallery?: ConfigurableProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: ConfigurableProductToMedia_gallery_entriesResolver<TParent>;
  memory?: ConfigurableProductToMemoryResolver<TParent>;
  meta_description?: ConfigurableProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: ConfigurableProductToMeta_keywordResolver<TParent>;
  meta_title?: ConfigurableProductToMeta_titleResolver<TParent>;
  multiple_attribute?: ConfigurableProductToMultiple_attributeResolver<TParent>;
  name?: ConfigurableProductToNameResolver<TParent>;
  new_from_date?: ConfigurableProductToNew_from_dateResolver<TParent>;
  new_to_date?: ConfigurableProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: ConfigurableProductToOnly_x_left_in_stockResolver<TParent>;
  options?: ConfigurableProductToOptionsResolver<TParent>;
  options_container?: ConfigurableProductToOptions_containerResolver<TParent>;
  original_price?: ConfigurableProductToOriginal_priceResolver<TParent>;
  price?: ConfigurableProductToPriceResolver<TParent>;
  price_range?: ConfigurableProductToPrice_rangeResolver<TParent>;
  price_tiers?: ConfigurableProductToPrice_tiersResolver<TParent>;
  product_links?: ConfigurableProductToProduct_linksResolver<TParent>;
  qty?: ConfigurableProductToQtyResolver<TParent>;
  quantity?: ConfigurableProductToQuantityResolver<TParent>;
  ranking?: ConfigurableProductToRankingResolver<TParent>;
  rating_summary?: ConfigurableProductToRating_summaryResolver<TParent>;
  redirect_code?: ConfigurableProductToRedirect_codeResolver<TParent>;
  related_products?: ConfigurableProductToRelated_productsResolver<TParent>;
  relative_url?: ConfigurableProductToRelative_urlResolver<TParent>;
  review_count?: ConfigurableProductToReview_countResolver<TParent>;
  reviews?: ConfigurableProductToReviewsResolver<TParent>;
  row_total?: ConfigurableProductToRow_totalResolver<TParent>;
  s_attributes?: ConfigurableProductToS_attributesResolver<TParent>;
  salable_qty?: ConfigurableProductToSalable_qtyResolver<TParent>;
  shoes_size?: ConfigurableProductToShoes_sizeResolver<TParent>;
  short_description?: ConfigurableProductToShort_descriptionResolver<TParent>;
  size?: ConfigurableProductToSizeResolver<TParent>;
  sku?: ConfigurableProductToSkuResolver<TParent>;
  small_image?: ConfigurableProductToSmall_imageResolver<TParent>;
  special_from_date?: ConfigurableProductToSpecial_from_dateResolver<TParent>;
  special_price?: ConfigurableProductToSpecial_priceResolver<TParent>;
  special_to_date?: ConfigurableProductToSpecial_to_dateResolver<TParent>;
  stock_item?: ConfigurableProductToStock_itemResolver<TParent>;
  stock_status?: ConfigurableProductToStock_statusResolver<TParent>;
  swatch_image?: ConfigurableProductToSwatch_imageResolver<TParent>;
  test?: ConfigurableProductToTestResolver<TParent>;
  texture?: ConfigurableProductToTextureResolver<TParent>;
  thumbnail?: ConfigurableProductToThumbnailResolver<TParent>;
  tier_price?: ConfigurableProductToTier_priceResolver<TParent>;
  tier_prices?: ConfigurableProductToTier_pricesResolver<TParent>;
  type?: ConfigurableProductToTypeResolver<TParent>;
  type_id?: ConfigurableProductToType_idResolver<TParent>;
  uid?: ConfigurableProductToUidResolver<TParent>;
  updated_at?: ConfigurableProductToUpdated_atResolver<TParent>;
  upsell_products?: ConfigurableProductToUpsell_productsResolver<TParent>;
  url?: ConfigurableProductToUrlResolver<TParent>;
  url_key?: ConfigurableProductToUrl_keyResolver<TParent>;
  url_path?: ConfigurableProductToUrl_pathResolver<TParent>;
  url_rewrites?: ConfigurableProductToUrl_rewritesResolver<TParent>;
  url_suffix?: ConfigurableProductToUrl_suffixResolver<TParent>;
  valuesss?: ConfigurableProductToValuesssResolver<TParent>;
  variants?: ConfigurableProductToVariantsResolver<TParent>;
  variants_plp?: ConfigurableProductToVariants_plpResolver<TParent>;
  websites?: ConfigurableProductToWebsitesResolver<TParent>;
  weight?: ConfigurableProductToWeightResolver<TParent>;
  yes_no?: ConfigurableProductToYes_noResolver<TParent>;
}

export interface ConfigurableProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToConfigurable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToConfigurable_product_options_selectionArgs {
  configurableOptionValueUids?: Array<string>;
}
export interface ConfigurableProductToConfigurable_product_options_selectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ConfigurableProductToConfigurable_product_options_selectionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface ConfigurableProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ConfigurableProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToVariantsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToVariants_plpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToWeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionsTypeResolver<TParent = any> {
  attribute_code?: ConfigurableProductOptionsToAttribute_codeResolver<TParent>;
  attribute_id?: ConfigurableProductOptionsToAttribute_idResolver<TParent>;
  attribute_id_v2?: ConfigurableProductOptionsToAttribute_id_v2Resolver<TParent>;
  attribute_uid?: ConfigurableProductOptionsToAttribute_uidResolver<TParent>;
  id?: ConfigurableProductOptionsToIdResolver<TParent>;
  label?: ConfigurableProductOptionsToLabelResolver<TParent>;
  position?: ConfigurableProductOptionsToPositionResolver<TParent>;
  product_id?: ConfigurableProductOptionsToProduct_idResolver<TParent>;
  uid?: ConfigurableProductOptionsToUidResolver<TParent>;
  use_default?: ConfigurableProductOptionsToUse_defaultResolver<TParent>;
  values?: ConfigurableProductOptionsToValuesResolver<TParent>;
}

export interface ConfigurableProductOptionsToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToAttribute_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToAttribute_id_v2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToAttribute_uidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToProduct_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToUse_defaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionsValuesTypeResolver<TParent = any> {
  default_label?: ConfigurableProductOptionsValuesToDefault_labelResolver<TParent>;
  label?: ConfigurableProductOptionsValuesToLabelResolver<TParent>;
  store_label?: ConfigurableProductOptionsValuesToStore_labelResolver<TParent>;
  swatch_data?: ConfigurableProductOptionsValuesToSwatch_dataResolver<TParent>;
  uid?: ConfigurableProductOptionsValuesToUidResolver<TParent>;
  use_default_value?: ConfigurableProductOptionsValuesToUse_default_valueResolver<TParent>;
  value_index?: ConfigurableProductOptionsValuesToValue_indexResolver<TParent>;
}

export interface ConfigurableProductOptionsValuesToDefault_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToStore_labelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToSwatch_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToUse_default_valueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsValuesToValue_indexResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionsSelectionTypeResolver<TParent = any> {
  configurable_options?: ConfigurableProductOptionsSelectionToConfigurable_optionsResolver<TParent>;
  media_gallery?: ConfigurableProductOptionsSelectionToMedia_galleryResolver<TParent>;
  options_available_for_selection?: ConfigurableProductOptionsSelectionToOptions_available_for_selectionResolver<TParent>;
  variant?: ConfigurableProductOptionsSelectionToVariantResolver<TParent>;
}

export interface ConfigurableProductOptionsSelectionToConfigurable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsSelectionToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsSelectionToOptions_available_for_selectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionsSelectionToVariantResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionTypeResolver<TParent = any> {
  attribute_code?: ConfigurableProductOptionToAttribute_codeResolver<TParent>;
  label?: ConfigurableProductOptionToLabelResolver<TParent>;
  uid?: ConfigurableProductOptionToUidResolver<TParent>;
  values?: ConfigurableProductOptionToValuesResolver<TParent>;
}

export interface ConfigurableProductOptionToAttribute_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionToValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableProductOptionValueTypeResolver<TParent = any> {
  is_available?: ConfigurableProductOptionValueToIs_availableResolver<TParent>;
  is_use_default?: ConfigurableProductOptionValueToIs_use_defaultResolver<TParent>;
  label?: ConfigurableProductOptionValueToLabelResolver<TParent>;
  swatch?: ConfigurableProductOptionValueToSwatchResolver<TParent>;
  uid?: ConfigurableProductOptionValueToUidResolver<TParent>;
}

export interface ConfigurableProductOptionValueToIs_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToIs_use_defaultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToSwatchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableProductOptionValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSimpleProductTypeResolver<TParent = any> {
  New_attribute_size?: SimpleProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: SimpleProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: SimpleProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: SimpleProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: SimpleProductToAttribute_set_idResolver<TParent>;
  brand?: SimpleProductToBrandResolver<TParent>;
  canonical_url?: SimpleProductToCanonical_urlResolver<TParent>;
  categories?: SimpleProductToCategoriesResolver<TParent>;
  clothing_colour?: SimpleProductToClothing_colourResolver<TParent>;
  clothing_gender?: SimpleProductToClothing_genderResolver<TParent>;
  clothing_size?: SimpleProductToClothing_sizeResolver<TParent>;
  clothing_type?: SimpleProductToClothing_typeResolver<TParent>;
  color?: SimpleProductToColorResolver<TParent>;
  color_elena?: SimpleProductToColor_elenaResolver<TParent>;
  colors_with_images?: SimpleProductToColors_with_imagesResolver<TParent>;
  country_of_manufacture?: SimpleProductToCountry_of_manufactureResolver<TParent>;
  created_at?: SimpleProductToCreated_atResolver<TParent>;
  crosssell_products?: SimpleProductToCrosssell_productsResolver<TParent>;
  description?: SimpleProductToDescriptionResolver<TParent>;
  fit?: SimpleProductToFitResolver<TParent>;
  gift_message_available?: SimpleProductToGift_message_availableResolver<TParent>;
  id?: SimpleProductToIdResolver<TParent>;
  image?: SimpleProductToImageResolver<TParent>;
  images_type_map?: SimpleProductToImages_type_mapResolver<TParent>;
  license_key?: SimpleProductToLicense_keyResolver<TParent>;
  manufacturer?: SimpleProductToManufacturerResolver<TParent>;
  material?: SimpleProductToMaterialResolver<TParent>;
  media_gallery?: SimpleProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: SimpleProductToMedia_gallery_entriesResolver<TParent>;
  memory?: SimpleProductToMemoryResolver<TParent>;
  meta_description?: SimpleProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: SimpleProductToMeta_keywordResolver<TParent>;
  meta_title?: SimpleProductToMeta_titleResolver<TParent>;
  multiple_attribute?: SimpleProductToMultiple_attributeResolver<TParent>;
  name?: SimpleProductToNameResolver<TParent>;
  new_from_date?: SimpleProductToNew_from_dateResolver<TParent>;
  new_to_date?: SimpleProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: SimpleProductToOnly_x_left_in_stockResolver<TParent>;
  options?: SimpleProductToOptionsResolver<TParent>;
  options_container?: SimpleProductToOptions_containerResolver<TParent>;
  original_price?: SimpleProductToOriginal_priceResolver<TParent>;
  price?: SimpleProductToPriceResolver<TParent>;
  price_range?: SimpleProductToPrice_rangeResolver<TParent>;
  price_tiers?: SimpleProductToPrice_tiersResolver<TParent>;
  product_links?: SimpleProductToProduct_linksResolver<TParent>;
  qty?: SimpleProductToQtyResolver<TParent>;
  quantity?: SimpleProductToQuantityResolver<TParent>;
  ranking?: SimpleProductToRankingResolver<TParent>;
  rating_summary?: SimpleProductToRating_summaryResolver<TParent>;
  redirect_code?: SimpleProductToRedirect_codeResolver<TParent>;
  related_products?: SimpleProductToRelated_productsResolver<TParent>;
  relative_url?: SimpleProductToRelative_urlResolver<TParent>;
  review_count?: SimpleProductToReview_countResolver<TParent>;
  reviews?: SimpleProductToReviewsResolver<TParent>;
  row_total?: SimpleProductToRow_totalResolver<TParent>;
  s_attributes?: SimpleProductToS_attributesResolver<TParent>;
  salable_qty?: SimpleProductToSalable_qtyResolver<TParent>;
  shoes_size?: SimpleProductToShoes_sizeResolver<TParent>;
  short_description?: SimpleProductToShort_descriptionResolver<TParent>;
  size?: SimpleProductToSizeResolver<TParent>;
  sku?: SimpleProductToSkuResolver<TParent>;
  small_image?: SimpleProductToSmall_imageResolver<TParent>;
  special_from_date?: SimpleProductToSpecial_from_dateResolver<TParent>;
  special_price?: SimpleProductToSpecial_priceResolver<TParent>;
  special_to_date?: SimpleProductToSpecial_to_dateResolver<TParent>;
  stock_item?: SimpleProductToStock_itemResolver<TParent>;
  stock_status?: SimpleProductToStock_statusResolver<TParent>;
  swatch_image?: SimpleProductToSwatch_imageResolver<TParent>;
  test?: SimpleProductToTestResolver<TParent>;
  texture?: SimpleProductToTextureResolver<TParent>;
  thumbnail?: SimpleProductToThumbnailResolver<TParent>;
  tier_price?: SimpleProductToTier_priceResolver<TParent>;
  tier_prices?: SimpleProductToTier_pricesResolver<TParent>;
  type?: SimpleProductToTypeResolver<TParent>;
  type_id?: SimpleProductToType_idResolver<TParent>;
  uid?: SimpleProductToUidResolver<TParent>;
  updated_at?: SimpleProductToUpdated_atResolver<TParent>;
  upsell_products?: SimpleProductToUpsell_productsResolver<TParent>;
  url?: SimpleProductToUrlResolver<TParent>;
  url_key?: SimpleProductToUrl_keyResolver<TParent>;
  url_path?: SimpleProductToUrl_pathResolver<TParent>;
  url_rewrites?: SimpleProductToUrl_rewritesResolver<TParent>;
  url_suffix?: SimpleProductToUrl_suffixResolver<TParent>;
  valuesss?: SimpleProductToValuesssResolver<TParent>;
  websites?: SimpleProductToWebsitesResolver<TParent>;
  weight?: SimpleProductToWeightResolver<TParent>;
  yes_no?: SimpleProductToYes_noResolver<TParent>;
}

export interface SimpleProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface SimpleProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SimpleProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToWeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableVariantTypeResolver<TParent = any> {
  attributes?: ConfigurableVariantToAttributesResolver<TParent>;
  product?: ConfigurableVariantToProductResolver<TParent>;
}

export interface ConfigurableVariantToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableVariantToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLConfigurableWishlistItemTypeResolver<TParent = any> {
  added_at?: ConfigurableWishlistItemToAdded_atResolver<TParent>;
  child_sku?: ConfigurableWishlistItemToChild_skuResolver<TParent>;
  configurable_options?: ConfigurableWishlistItemToConfigurable_optionsResolver<TParent>;
  customizable_options?: ConfigurableWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: ConfigurableWishlistItemToDescriptionResolver<TParent>;
  id?: ConfigurableWishlistItemToIdResolver<TParent>;
  product?: ConfigurableWishlistItemToProductResolver<TParent>;
  quantity?: ConfigurableWishlistItemToQuantityResolver<TParent>;
}

export interface ConfigurableWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToChild_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToConfigurable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ConfigurableWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCreditMemoItemTypeResolver<TParent = any> {
  discounts?: CreditMemoItemToDiscountsResolver<TParent>;
  id?: CreditMemoItemToIdResolver<TParent>;
  order_item?: CreditMemoItemToOrder_itemResolver<TParent>;
  product_name?: CreditMemoItemToProduct_nameResolver<TParent>;
  product_sale_price?: CreditMemoItemToProduct_sale_priceResolver<TParent>;
  product_sku?: CreditMemoItemToProduct_skuResolver<TParent>;
  quantity_refunded?: CreditMemoItemToQuantity_refundedResolver<TParent>;
  row_subtotal?: CreditMemoItemToRow_subtotalResolver<TParent>;
}

export interface CreditMemoItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CreditMemoItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableAreaOptionTypeResolver<TParent = any> {
  option_id?: CustomizableAreaOptionToOption_idResolver<TParent>;
  product_sku?: CustomizableAreaOptionToProduct_skuResolver<TParent>;
  required?: CustomizableAreaOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableAreaOptionToSort_orderResolver<TParent>;
  title?: CustomizableAreaOptionToTitleResolver<TParent>;
  type?: CustomizableAreaOptionToTypeResolver<TParent>;
  uid?: CustomizableAreaOptionToUidResolver<TParent>;
  value?: CustomizableAreaOptionToValueResolver<TParent>;
}

export interface CustomizableAreaOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableAreaValueTypeResolver<TParent = any> {
  currency?: CustomizableAreaValueToCurrencyResolver<TParent>;
  max_characters?: CustomizableAreaValueToMax_charactersResolver<TParent>;
  price?: CustomizableAreaValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableAreaValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableAreaValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableAreaValueToPrice_typeResolver<TParent>;
  sku?: CustomizableAreaValueToSkuResolver<TParent>;
  uid?: CustomizableAreaValueToUidResolver<TParent>;
}

export interface CustomizableAreaValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToMax_charactersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableAreaValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableCheckboxOptionTypeResolver<TParent = any> {
  option_id?: CustomizableCheckboxOptionToOption_idResolver<TParent>;
  required?: CustomizableCheckboxOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableCheckboxOptionToSort_orderResolver<TParent>;
  title?: CustomizableCheckboxOptionToTitleResolver<TParent>;
  type?: CustomizableCheckboxOptionToTypeResolver<TParent>;
  uid?: CustomizableCheckboxOptionToUidResolver<TParent>;
  value?: CustomizableCheckboxOptionToValueResolver<TParent>;
}

export interface CustomizableCheckboxOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableCheckboxValueTypeResolver<TParent = any> {
  currency?: CustomizableCheckboxValueToCurrencyResolver<TParent>;
  option_type_id?: CustomizableCheckboxValueToOption_type_idResolver<TParent>;
  price?: CustomizableCheckboxValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableCheckboxValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableCheckboxValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableCheckboxValueToPrice_typeResolver<TParent>;
  sku?: CustomizableCheckboxValueToSkuResolver<TParent>;
  sort_order?: CustomizableCheckboxValueToSort_orderResolver<TParent>;
  title?: CustomizableCheckboxValueToTitleResolver<TParent>;
  uid?: CustomizableCheckboxValueToUidResolver<TParent>;
}

export interface CustomizableCheckboxValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToOption_type_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableCheckboxValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableDateOptionTypeResolver<TParent = any> {
  option_id?: CustomizableDateOptionToOption_idResolver<TParent>;
  product_sku?: CustomizableDateOptionToProduct_skuResolver<TParent>;
  required?: CustomizableDateOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableDateOptionToSort_orderResolver<TParent>;
  title?: CustomizableDateOptionToTitleResolver<TParent>;
  type?: CustomizableDateOptionToTypeResolver<TParent>;
  uid?: CustomizableDateOptionToUidResolver<TParent>;
  value?: CustomizableDateOptionToValueResolver<TParent>;
}

export interface CustomizableDateOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableDateValueTypeResolver<TParent = any> {
  currency?: CustomizableDateValueToCurrencyResolver<TParent>;
  price?: CustomizableDateValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableDateValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableDateValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableDateValueToPrice_typeResolver<TParent>;
  sku?: CustomizableDateValueToSkuResolver<TParent>;
  type?: CustomizableDateValueToTypeResolver<TParent>;
  uid?: CustomizableDateValueToUidResolver<TParent>;
}

export interface CustomizableDateValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDateValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableDropDownOptionTypeResolver<TParent = any> {
  option_id?: CustomizableDropDownOptionToOption_idResolver<TParent>;
  required?: CustomizableDropDownOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableDropDownOptionToSort_orderResolver<TParent>;
  title?: CustomizableDropDownOptionToTitleResolver<TParent>;
  type?: CustomizableDropDownOptionToTypeResolver<TParent>;
  uid?: CustomizableDropDownOptionToUidResolver<TParent>;
  value?: CustomizableDropDownOptionToValueResolver<TParent>;
}

export interface CustomizableDropDownOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableDropDownValueTypeResolver<TParent = any> {
  currency?: CustomizableDropDownValueToCurrencyResolver<TParent>;
  option_type_id?: CustomizableDropDownValueToOption_type_idResolver<TParent>;
  price?: CustomizableDropDownValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableDropDownValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableDropDownValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableDropDownValueToPrice_typeResolver<TParent>;
  sku?: CustomizableDropDownValueToSkuResolver<TParent>;
  sort_order?: CustomizableDropDownValueToSort_orderResolver<TParent>;
  title?: CustomizableDropDownValueToTitleResolver<TParent>;
  uid?: CustomizableDropDownValueToUidResolver<TParent>;
}

export interface CustomizableDropDownValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToOption_type_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableDropDownValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableFieldOptionTypeResolver<TParent = any> {
  option_id?: CustomizableFieldOptionToOption_idResolver<TParent>;
  product_sku?: CustomizableFieldOptionToProduct_skuResolver<TParent>;
  required?: CustomizableFieldOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableFieldOptionToSort_orderResolver<TParent>;
  title?: CustomizableFieldOptionToTitleResolver<TParent>;
  type?: CustomizableFieldOptionToTypeResolver<TParent>;
  uid?: CustomizableFieldOptionToUidResolver<TParent>;
  value?: CustomizableFieldOptionToValueResolver<TParent>;
}

export interface CustomizableFieldOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableFieldValueTypeResolver<TParent = any> {
  currency?: CustomizableFieldValueToCurrencyResolver<TParent>;
  file_extension?: CustomizableFieldValueToFile_extensionResolver<TParent>;
  max_characters?: CustomizableFieldValueToMax_charactersResolver<TParent>;
  price?: CustomizableFieldValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableFieldValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableFieldValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableFieldValueToPrice_typeResolver<TParent>;
  sku?: CustomizableFieldValueToSkuResolver<TParent>;
  uid?: CustomizableFieldValueToUidResolver<TParent>;
}

export interface CustomizableFieldValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToFile_extensionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToMax_charactersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFieldValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableFileOptionTypeResolver<TParent = any> {
  option_id?: CustomizableFileOptionToOption_idResolver<TParent>;
  product_sku?: CustomizableFileOptionToProduct_skuResolver<TParent>;
  required?: CustomizableFileOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableFileOptionToSort_orderResolver<TParent>;
  title?: CustomizableFileOptionToTitleResolver<TParent>;
  type?: CustomizableFileOptionToTypeResolver<TParent>;
  uid?: CustomizableFileOptionToUidResolver<TParent>;
  value?: CustomizableFileOptionToValueResolver<TParent>;
}

export interface CustomizableFileOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableFileValueTypeResolver<TParent = any> {
  currency?: CustomizableFileValueToCurrencyResolver<TParent>;
  file_extension?: CustomizableFileValueToFile_extensionResolver<TParent>;
  image_size_x?: CustomizableFileValueToImage_size_xResolver<TParent>;
  image_size_y?: CustomizableFileValueToImage_size_yResolver<TParent>;
  price?: CustomizableFileValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableFileValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableFileValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableFileValueToPrice_typeResolver<TParent>;
  sku?: CustomizableFileValueToSkuResolver<TParent>;
  uid?: CustomizableFileValueToUidResolver<TParent>;
}

export interface CustomizableFileValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToFile_extensionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToImage_size_xResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToImage_size_yResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableFileValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableMultipleOptionTypeResolver<TParent = any> {
  option_id?: CustomizableMultipleOptionToOption_idResolver<TParent>;
  required?: CustomizableMultipleOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableMultipleOptionToSort_orderResolver<TParent>;
  title?: CustomizableMultipleOptionToTitleResolver<TParent>;
  type?: CustomizableMultipleOptionToTypeResolver<TParent>;
  uid?: CustomizableMultipleOptionToUidResolver<TParent>;
  value?: CustomizableMultipleOptionToValueResolver<TParent>;
}

export interface CustomizableMultipleOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableMultipleValueTypeResolver<TParent = any> {
  currency?: CustomizableMultipleValueToCurrencyResolver<TParent>;
  option_type_id?: CustomizableMultipleValueToOption_type_idResolver<TParent>;
  price?: CustomizableMultipleValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableMultipleValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableMultipleValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableMultipleValueToPrice_typeResolver<TParent>;
  sku?: CustomizableMultipleValueToSkuResolver<TParent>;
  sort_order?: CustomizableMultipleValueToSort_orderResolver<TParent>;
  title?: CustomizableMultipleValueToTitleResolver<TParent>;
  uid?: CustomizableMultipleValueToUidResolver<TParent>;
}

export interface CustomizableMultipleValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToOption_type_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableMultipleValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableRadioOptionTypeResolver<TParent = any> {
  option_id?: CustomizableRadioOptionToOption_idResolver<TParent>;
  required?: CustomizableRadioOptionToRequiredResolver<TParent>;
  sort_order?: CustomizableRadioOptionToSort_orderResolver<TParent>;
  title?: CustomizableRadioOptionToTitleResolver<TParent>;
  type?: CustomizableRadioOptionToTypeResolver<TParent>;
  uid?: CustomizableRadioOptionToUidResolver<TParent>;
  value?: CustomizableRadioOptionToValueResolver<TParent>;
}

export interface CustomizableRadioOptionToOption_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioOptionToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomizableRadioValueTypeResolver<TParent = any> {
  currency?: CustomizableRadioValueToCurrencyResolver<TParent>;
  option_type_id?: CustomizableRadioValueToOption_type_idResolver<TParent>;
  price?: CustomizableRadioValueToPriceResolver<TParent>;
  priceExclTax?: CustomizableRadioValueToPriceExclTaxResolver<TParent>;
  priceInclTax?: CustomizableRadioValueToPriceInclTaxResolver<TParent>;
  price_type?: CustomizableRadioValueToPrice_typeResolver<TParent>;
  sku?: CustomizableRadioValueToSkuResolver<TParent>;
  sort_order?: CustomizableRadioValueToSort_orderResolver<TParent>;
  title?: CustomizableRadioValueToTitleResolver<TParent>;
  uid?: CustomizableRadioValueToUidResolver<TParent>;
}

export interface CustomizableRadioValueToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToOption_type_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToPriceExclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToPriceInclTaxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToPrice_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomizableRadioValueToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableCartItemTypeResolver<TParent = any> {
  customizable_options?: DownloadableCartItemToCustomizable_optionsResolver<TParent>;
  id?: DownloadableCartItemToIdResolver<TParent>;
  links?: DownloadableCartItemToLinksResolver<TParent>;
  prices?: DownloadableCartItemToPricesResolver<TParent>;
  product?: DownloadableCartItemToProductResolver<TParent>;
  quantity?: DownloadableCartItemToQuantityResolver<TParent>;
  samples?: DownloadableCartItemToSamplesResolver<TParent>;
  uid?: DownloadableCartItemToUidResolver<TParent>;
}

export interface DownloadableCartItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToLinksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToSamplesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCartItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableProductLinksTypeResolver<TParent = any> {
  id?: DownloadableProductLinksToIdResolver<TParent>;
  is_shareable?: DownloadableProductLinksToIs_shareableResolver<TParent>;
  link_type?: DownloadableProductLinksToLink_typeResolver<TParent>;
  number_of_downloads?: DownloadableProductLinksToNumber_of_downloadsResolver<TParent>;
  price?: DownloadableProductLinksToPriceResolver<TParent>;
  sample_file?: DownloadableProductLinksToSample_fileResolver<TParent>;
  sample_type?: DownloadableProductLinksToSample_typeResolver<TParent>;
  sample_url?: DownloadableProductLinksToSample_urlResolver<TParent>;
  sort_order?: DownloadableProductLinksToSort_orderResolver<TParent>;
  title?: DownloadableProductLinksToTitleResolver<TParent>;
  uid?: DownloadableProductLinksToUidResolver<TParent>;
}

export interface DownloadableProductLinksToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToIs_shareableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToLink_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToNumber_of_downloadsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToSample_fileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToSample_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToSample_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductLinksToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableProductSamplesTypeResolver<TParent = any> {
  id?: DownloadableProductSamplesToIdResolver<TParent>;
  sample_file?: DownloadableProductSamplesToSample_fileResolver<TParent>;
  sample_type?: DownloadableProductSamplesToSample_typeResolver<TParent>;
  sample_url?: DownloadableProductSamplesToSample_urlResolver<TParent>;
  sort_order?: DownloadableProductSamplesToSort_orderResolver<TParent>;
  title?: DownloadableProductSamplesToTitleResolver<TParent>;
}

export interface DownloadableProductSamplesToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductSamplesToSample_fileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductSamplesToSample_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductSamplesToSample_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductSamplesToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductSamplesToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableCreditMemoItemTypeResolver<TParent = any> {
  discounts?: DownloadableCreditMemoItemToDiscountsResolver<TParent>;
  downloadable_links?: DownloadableCreditMemoItemToDownloadable_linksResolver<TParent>;
  id?: DownloadableCreditMemoItemToIdResolver<TParent>;
  order_item?: DownloadableCreditMemoItemToOrder_itemResolver<TParent>;
  product_name?: DownloadableCreditMemoItemToProduct_nameResolver<TParent>;
  product_sale_price?: DownloadableCreditMemoItemToProduct_sale_priceResolver<TParent>;
  product_sku?: DownloadableCreditMemoItemToProduct_skuResolver<TParent>;
  quantity_refunded?: DownloadableCreditMemoItemToQuantity_refundedResolver<TParent>;
  row_subtotal?: DownloadableCreditMemoItemToRow_subtotalResolver<TParent>;
}

export interface DownloadableCreditMemoItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToDownloadable_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableCreditMemoItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableItemsLinksTypeResolver<TParent = any> {
  sort_order?: DownloadableItemsLinksToSort_orderResolver<TParent>;
  title?: DownloadableItemsLinksToTitleResolver<TParent>;
  uid?: DownloadableItemsLinksToUidResolver<TParent>;
}

export interface DownloadableItemsLinksToSort_orderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableItemsLinksToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableItemsLinksToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableInvoiceItemTypeResolver<TParent = any> {
  discounts?: DownloadableInvoiceItemToDiscountsResolver<TParent>;
  downloadable_links?: DownloadableInvoiceItemToDownloadable_linksResolver<TParent>;
  id?: DownloadableInvoiceItemToIdResolver<TParent>;
  order_item?: DownloadableInvoiceItemToOrder_itemResolver<TParent>;
  product_name?: DownloadableInvoiceItemToProduct_nameResolver<TParent>;
  product_sale_price?: DownloadableInvoiceItemToProduct_sale_priceResolver<TParent>;
  product_sku?: DownloadableInvoiceItemToProduct_skuResolver<TParent>;
  quantity_invoiced?: DownloadableInvoiceItemToQuantity_invoicedResolver<TParent>;
  row_subtotal?: DownloadableInvoiceItemToRow_subtotalResolver<TParent>;
}

export interface DownloadableInvoiceItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToDownloadable_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableInvoiceItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableOrderItemTypeResolver<TParent = any> {
  discounts?: DownloadableOrderItemToDiscountsResolver<TParent>;
  downloadable_links?: DownloadableOrderItemToDownloadable_linksResolver<TParent>;
  entered_options?: DownloadableOrderItemToEntered_optionsResolver<TParent>;
  id?: DownloadableOrderItemToIdResolver<TParent>;
  product_name?: DownloadableOrderItemToProduct_nameResolver<TParent>;
  product_sale_price?: DownloadableOrderItemToProduct_sale_priceResolver<TParent>;
  product_sku?: DownloadableOrderItemToProduct_skuResolver<TParent>;
  product_type?: DownloadableOrderItemToProduct_typeResolver<TParent>;
  product_url_key?: DownloadableOrderItemToProduct_url_keyResolver<TParent>;
  quantity_canceled?: DownloadableOrderItemToQuantity_canceledResolver<TParent>;
  quantity_invoiced?: DownloadableOrderItemToQuantity_invoicedResolver<TParent>;
  quantity_ordered?: DownloadableOrderItemToQuantity_orderedResolver<TParent>;
  quantity_refunded?: DownloadableOrderItemToQuantity_refundedResolver<TParent>;
  quantity_returned?: DownloadableOrderItemToQuantity_returnedResolver<TParent>;
  quantity_shipped?: DownloadableOrderItemToQuantity_shippedResolver<TParent>;
  row_subtotal?: DownloadableOrderItemToRow_subtotalResolver<TParent>;
  selected_options?: DownloadableOrderItemToSelected_optionsResolver<TParent>;
  status?: DownloadableOrderItemToStatusResolver<TParent>;
}

export interface DownloadableOrderItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToDownloadable_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToEntered_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToProduct_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToProduct_url_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_canceledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_orderedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_returnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToQuantity_shippedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToSelected_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableOrderItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableProductTypeResolver<TParent = any> {
  New_attribute_size?: DownloadableProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: DownloadableProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: DownloadableProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: DownloadableProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: DownloadableProductToAttribute_set_idResolver<TParent>;
  brand?: DownloadableProductToBrandResolver<TParent>;
  canonical_url?: DownloadableProductToCanonical_urlResolver<TParent>;
  categories?: DownloadableProductToCategoriesResolver<TParent>;
  clothing_colour?: DownloadableProductToClothing_colourResolver<TParent>;
  clothing_gender?: DownloadableProductToClothing_genderResolver<TParent>;
  clothing_size?: DownloadableProductToClothing_sizeResolver<TParent>;
  clothing_type?: DownloadableProductToClothing_typeResolver<TParent>;
  color?: DownloadableProductToColorResolver<TParent>;
  color_elena?: DownloadableProductToColor_elenaResolver<TParent>;
  colors_with_images?: DownloadableProductToColors_with_imagesResolver<TParent>;
  country_of_manufacture?: DownloadableProductToCountry_of_manufactureResolver<TParent>;
  created_at?: DownloadableProductToCreated_atResolver<TParent>;
  crosssell_products?: DownloadableProductToCrosssell_productsResolver<TParent>;
  description?: DownloadableProductToDescriptionResolver<TParent>;
  downloadable_product_links?: DownloadableProductToDownloadable_product_linksResolver<TParent>;
  downloadable_product_samples?: DownloadableProductToDownloadable_product_samplesResolver<TParent>;
  fit?: DownloadableProductToFitResolver<TParent>;
  gift_message_available?: DownloadableProductToGift_message_availableResolver<TParent>;
  id?: DownloadableProductToIdResolver<TParent>;
  image?: DownloadableProductToImageResolver<TParent>;
  images_type_map?: DownloadableProductToImages_type_mapResolver<TParent>;
  license_key?: DownloadableProductToLicense_keyResolver<TParent>;
  links_purchased_separately?: DownloadableProductToLinks_purchased_separatelyResolver<TParent>;
  links_title?: DownloadableProductToLinks_titleResolver<TParent>;
  manufacturer?: DownloadableProductToManufacturerResolver<TParent>;
  material?: DownloadableProductToMaterialResolver<TParent>;
  media_gallery?: DownloadableProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: DownloadableProductToMedia_gallery_entriesResolver<TParent>;
  memory?: DownloadableProductToMemoryResolver<TParent>;
  meta_description?: DownloadableProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: DownloadableProductToMeta_keywordResolver<TParent>;
  meta_title?: DownloadableProductToMeta_titleResolver<TParent>;
  multiple_attribute?: DownloadableProductToMultiple_attributeResolver<TParent>;
  name?: DownloadableProductToNameResolver<TParent>;
  new_from_date?: DownloadableProductToNew_from_dateResolver<TParent>;
  new_to_date?: DownloadableProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: DownloadableProductToOnly_x_left_in_stockResolver<TParent>;
  options?: DownloadableProductToOptionsResolver<TParent>;
  options_container?: DownloadableProductToOptions_containerResolver<TParent>;
  original_price?: DownloadableProductToOriginal_priceResolver<TParent>;
  price?: DownloadableProductToPriceResolver<TParent>;
  price_range?: DownloadableProductToPrice_rangeResolver<TParent>;
  price_tiers?: DownloadableProductToPrice_tiersResolver<TParent>;
  product_links?: DownloadableProductToProduct_linksResolver<TParent>;
  qty?: DownloadableProductToQtyResolver<TParent>;
  quantity?: DownloadableProductToQuantityResolver<TParent>;
  ranking?: DownloadableProductToRankingResolver<TParent>;
  rating_summary?: DownloadableProductToRating_summaryResolver<TParent>;
  redirect_code?: DownloadableProductToRedirect_codeResolver<TParent>;
  related_products?: DownloadableProductToRelated_productsResolver<TParent>;
  relative_url?: DownloadableProductToRelative_urlResolver<TParent>;
  review_count?: DownloadableProductToReview_countResolver<TParent>;
  reviews?: DownloadableProductToReviewsResolver<TParent>;
  row_total?: DownloadableProductToRow_totalResolver<TParent>;
  s_attributes?: DownloadableProductToS_attributesResolver<TParent>;
  salable_qty?: DownloadableProductToSalable_qtyResolver<TParent>;
  samples_title?: DownloadableProductToSamples_titleResolver<TParent>;
  shoes_size?: DownloadableProductToShoes_sizeResolver<TParent>;
  short_description?: DownloadableProductToShort_descriptionResolver<TParent>;
  size?: DownloadableProductToSizeResolver<TParent>;
  sku?: DownloadableProductToSkuResolver<TParent>;
  small_image?: DownloadableProductToSmall_imageResolver<TParent>;
  special_from_date?: DownloadableProductToSpecial_from_dateResolver<TParent>;
  special_price?: DownloadableProductToSpecial_priceResolver<TParent>;
  special_to_date?: DownloadableProductToSpecial_to_dateResolver<TParent>;
  stock_item?: DownloadableProductToStock_itemResolver<TParent>;
  stock_status?: DownloadableProductToStock_statusResolver<TParent>;
  swatch_image?: DownloadableProductToSwatch_imageResolver<TParent>;
  test?: DownloadableProductToTestResolver<TParent>;
  texture?: DownloadableProductToTextureResolver<TParent>;
  thumbnail?: DownloadableProductToThumbnailResolver<TParent>;
  tier_price?: DownloadableProductToTier_priceResolver<TParent>;
  tier_prices?: DownloadableProductToTier_pricesResolver<TParent>;
  type?: DownloadableProductToTypeResolver<TParent>;
  type_id?: DownloadableProductToType_idResolver<TParent>;
  uid?: DownloadableProductToUidResolver<TParent>;
  updated_at?: DownloadableProductToUpdated_atResolver<TParent>;
  upsell_products?: DownloadableProductToUpsell_productsResolver<TParent>;
  url?: DownloadableProductToUrlResolver<TParent>;
  url_key?: DownloadableProductToUrl_keyResolver<TParent>;
  url_path?: DownloadableProductToUrl_pathResolver<TParent>;
  url_rewrites?: DownloadableProductToUrl_rewritesResolver<TParent>;
  url_suffix?: DownloadableProductToUrl_suffixResolver<TParent>;
  valuesss?: DownloadableProductToValuesssResolver<TParent>;
  websites?: DownloadableProductToWebsitesResolver<TParent>;
  yes_no?: DownloadableProductToYes_noResolver<TParent>;
}

export interface DownloadableProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToDownloadable_product_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToDownloadable_product_samplesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToLinks_purchased_separatelyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToLinks_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface DownloadableProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: DownloadableProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSamples_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDownloadableWishlistItemTypeResolver<TParent = any> {
  added_at?: DownloadableWishlistItemToAdded_atResolver<TParent>;
  customizable_options?: DownloadableWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: DownloadableWishlistItemToDescriptionResolver<TParent>;
  id?: DownloadableWishlistItemToIdResolver<TParent>;
  links_v2?: DownloadableWishlistItemToLinks_v2Resolver<TParent>;
  product?: DownloadableWishlistItemToProductResolver<TParent>;
  quantity?: DownloadableWishlistItemToQuantityResolver<TParent>;
  samples?: DownloadableWishlistItemToSamplesResolver<TParent>;
}

export interface DownloadableWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToLinks_v2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DownloadableWishlistItemToSamplesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLExtensionAttributesTypeResolver<TParent = any> {
  tax_grandtotal_details?: ExtensionAttributesToTax_grandtotal_detailsResolver<TParent>;
}

export interface ExtensionAttributesToTax_grandtotal_detailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTaxGrandTotalDetailsTypeResolver<TParent = any> {
  amount?: TaxGrandTotalDetailsToAmountResolver<TParent>;
  group_id?: TaxGrandTotalDetailsToGroup_idResolver<TParent>;
}

export interface TaxGrandTotalDetailsToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TaxGrandTotalDetailsToGroup_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGroupedProductTypeResolver<TParent = any> {
  New_attribute_size?: GroupedProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: GroupedProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: GroupedProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: GroupedProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: GroupedProductToAttribute_set_idResolver<TParent>;
  brand?: GroupedProductToBrandResolver<TParent>;
  canonical_url?: GroupedProductToCanonical_urlResolver<TParent>;
  categories?: GroupedProductToCategoriesResolver<TParent>;
  clothing_colour?: GroupedProductToClothing_colourResolver<TParent>;
  clothing_gender?: GroupedProductToClothing_genderResolver<TParent>;
  clothing_size?: GroupedProductToClothing_sizeResolver<TParent>;
  clothing_type?: GroupedProductToClothing_typeResolver<TParent>;
  color?: GroupedProductToColorResolver<TParent>;
  color_elena?: GroupedProductToColor_elenaResolver<TParent>;
  colors_with_images?: GroupedProductToColors_with_imagesResolver<TParent>;
  country_of_manufacture?: GroupedProductToCountry_of_manufactureResolver<TParent>;
  created_at?: GroupedProductToCreated_atResolver<TParent>;
  crosssell_products?: GroupedProductToCrosssell_productsResolver<TParent>;
  description?: GroupedProductToDescriptionResolver<TParent>;
  fit?: GroupedProductToFitResolver<TParent>;
  gift_message_available?: GroupedProductToGift_message_availableResolver<TParent>;
  id?: GroupedProductToIdResolver<TParent>;
  image?: GroupedProductToImageResolver<TParent>;
  images_type_map?: GroupedProductToImages_type_mapResolver<TParent>;
  items?: GroupedProductToItemsResolver<TParent>;
  license_key?: GroupedProductToLicense_keyResolver<TParent>;
  manufacturer?: GroupedProductToManufacturerResolver<TParent>;
  material?: GroupedProductToMaterialResolver<TParent>;
  media_gallery?: GroupedProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: GroupedProductToMedia_gallery_entriesResolver<TParent>;
  memory?: GroupedProductToMemoryResolver<TParent>;
  meta_description?: GroupedProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: GroupedProductToMeta_keywordResolver<TParent>;
  meta_title?: GroupedProductToMeta_titleResolver<TParent>;
  multiple_attribute?: GroupedProductToMultiple_attributeResolver<TParent>;
  name?: GroupedProductToNameResolver<TParent>;
  new_from_date?: GroupedProductToNew_from_dateResolver<TParent>;
  new_to_date?: GroupedProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: GroupedProductToOnly_x_left_in_stockResolver<TParent>;
  options_container?: GroupedProductToOptions_containerResolver<TParent>;
  original_price?: GroupedProductToOriginal_priceResolver<TParent>;
  price?: GroupedProductToPriceResolver<TParent>;
  price_range?: GroupedProductToPrice_rangeResolver<TParent>;
  price_tiers?: GroupedProductToPrice_tiersResolver<TParent>;
  product_links?: GroupedProductToProduct_linksResolver<TParent>;
  qty?: GroupedProductToQtyResolver<TParent>;
  quantity?: GroupedProductToQuantityResolver<TParent>;
  ranking?: GroupedProductToRankingResolver<TParent>;
  rating_summary?: GroupedProductToRating_summaryResolver<TParent>;
  redirect_code?: GroupedProductToRedirect_codeResolver<TParent>;
  related_products?: GroupedProductToRelated_productsResolver<TParent>;
  relative_url?: GroupedProductToRelative_urlResolver<TParent>;
  review_count?: GroupedProductToReview_countResolver<TParent>;
  reviews?: GroupedProductToReviewsResolver<TParent>;
  row_total?: GroupedProductToRow_totalResolver<TParent>;
  s_attributes?: GroupedProductToS_attributesResolver<TParent>;
  salable_qty?: GroupedProductToSalable_qtyResolver<TParent>;
  shoes_size?: GroupedProductToShoes_sizeResolver<TParent>;
  short_description?: GroupedProductToShort_descriptionResolver<TParent>;
  size?: GroupedProductToSizeResolver<TParent>;
  sku?: GroupedProductToSkuResolver<TParent>;
  small_image?: GroupedProductToSmall_imageResolver<TParent>;
  special_from_date?: GroupedProductToSpecial_from_dateResolver<TParent>;
  special_price?: GroupedProductToSpecial_priceResolver<TParent>;
  special_to_date?: GroupedProductToSpecial_to_dateResolver<TParent>;
  stock_item?: GroupedProductToStock_itemResolver<TParent>;
  stock_status?: GroupedProductToStock_statusResolver<TParent>;
  swatch_image?: GroupedProductToSwatch_imageResolver<TParent>;
  test?: GroupedProductToTestResolver<TParent>;
  texture?: GroupedProductToTextureResolver<TParent>;
  thumbnail?: GroupedProductToThumbnailResolver<TParent>;
  tier_price?: GroupedProductToTier_priceResolver<TParent>;
  tier_prices?: GroupedProductToTier_pricesResolver<TParent>;
  type?: GroupedProductToTypeResolver<TParent>;
  type_id?: GroupedProductToType_idResolver<TParent>;
  uid?: GroupedProductToUidResolver<TParent>;
  updated_at?: GroupedProductToUpdated_atResolver<TParent>;
  upsell_products?: GroupedProductToUpsell_productsResolver<TParent>;
  url?: GroupedProductToUrlResolver<TParent>;
  url_key?: GroupedProductToUrl_keyResolver<TParent>;
  url_path?: GroupedProductToUrl_pathResolver<TParent>;
  url_rewrites?: GroupedProductToUrl_rewritesResolver<TParent>;
  url_suffix?: GroupedProductToUrl_suffixResolver<TParent>;
  valuesss?: GroupedProductToValuesssResolver<TParent>;
  websites?: GroupedProductToWebsitesResolver<TParent>;
  weight?: GroupedProductToWeightResolver<TParent>;
  yes_no?: GroupedProductToYes_noResolver<TParent>;
}

export interface GroupedProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface GroupedProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupedProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToWeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGroupedProductItemTypeResolver<TParent = any> {
  position?: GroupedProductItemToPositionResolver<TParent>;
  product?: GroupedProductItemToProductResolver<TParent>;
  qty?: GroupedProductItemToQtyResolver<TParent>;
}

export interface GroupedProductItemToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductItemToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGroupedProductWishlistItemTypeResolver<TParent = any> {
  added_at?: GroupedProductWishlistItemToAdded_atResolver<TParent>;
  customizable_options?: GroupedProductWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: GroupedProductWishlistItemToDescriptionResolver<TParent>;
  id?: GroupedProductWishlistItemToIdResolver<TParent>;
  product?: GroupedProductWishlistItemToProductResolver<TParent>;
  quantity?: GroupedProductWishlistItemToQuantityResolver<TParent>;
}

export interface GroupedProductWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupedProductWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImageSwatchDataTypeResolver<TParent = any> {
  thumbnail?: ImageSwatchDataToThumbnailResolver<TParent>;
  value?: ImageSwatchDataToValueResolver<TParent>;
}

export interface ImageSwatchDataToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageSwatchDataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInvoiceItemTypeResolver<TParent = any> {
  discounts?: InvoiceItemToDiscountsResolver<TParent>;
  id?: InvoiceItemToIdResolver<TParent>;
  order_item?: InvoiceItemToOrder_itemResolver<TParent>;
  product_name?: InvoiceItemToProduct_nameResolver<TParent>;
  product_sale_price?: InvoiceItemToProduct_sale_priceResolver<TParent>;
  product_sku?: InvoiceItemToProduct_skuResolver<TParent>;
  quantity_invoiced?: InvoiceItemToQuantity_invoicedResolver<TParent>;
  row_subtotal?: InvoiceItemToRow_subtotalResolver<TParent>;
}

export interface InvoiceItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvoiceItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLayerFilterItemTypeResolver<TParent = any> {
  items_count?: LayerFilterItemToItems_countResolver<TParent>;
  label?: LayerFilterItemToLabelResolver<TParent>;
  value_string?: LayerFilterItemToValue_stringResolver<TParent>;
}

export interface LayerFilterItemToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LayerFilterItemToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LayerFilterItemToValue_stringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrderItemTypeResolver<TParent = any> {
  discounts?: OrderItemToDiscountsResolver<TParent>;
  entered_options?: OrderItemToEntered_optionsResolver<TParent>;
  id?: OrderItemToIdResolver<TParent>;
  product_name?: OrderItemToProduct_nameResolver<TParent>;
  product_sale_price?: OrderItemToProduct_sale_priceResolver<TParent>;
  product_sku?: OrderItemToProduct_skuResolver<TParent>;
  product_type?: OrderItemToProduct_typeResolver<TParent>;
  product_url_key?: OrderItemToProduct_url_keyResolver<TParent>;
  quantity_canceled?: OrderItemToQuantity_canceledResolver<TParent>;
  quantity_invoiced?: OrderItemToQuantity_invoicedResolver<TParent>;
  quantity_ordered?: OrderItemToQuantity_orderedResolver<TParent>;
  quantity_refunded?: OrderItemToQuantity_refundedResolver<TParent>;
  quantity_returned?: OrderItemToQuantity_returnedResolver<TParent>;
  quantity_shipped?: OrderItemToQuantity_shippedResolver<TParent>;
  row_subtotal?: OrderItemToRow_subtotalResolver<TParent>;
  selected_options?: OrderItemToSelected_optionsResolver<TParent>;
  status?: OrderItemToStatusResolver<TParent>;
}

export interface OrderItemToDiscountsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToEntered_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProduct_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToProduct_url_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_canceledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_invoicedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_orderedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_refundedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_returnedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToQuantity_shippedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToRow_subtotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToSelected_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OrderItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPayflowProTokenTypeResolver<TParent = any> {
  response_message?: PayflowProTokenToResponse_messageResolver<TParent>;
  result?: PayflowProTokenToResultResolver<TParent>;
  result_code?: PayflowProTokenToResult_codeResolver<TParent>;
  secure_token?: PayflowProTokenToSecure_tokenResolver<TParent>;
  secure_token_id?: PayflowProTokenToSecure_token_idResolver<TParent>;
}

export interface PayflowProTokenToResponse_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowProTokenToResultResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowProTokenToResult_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowProTokenToSecure_tokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PayflowProTokenToSecure_token_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductImageTypeResolver<TParent = any> {
  disabled?: ProductImageToDisabledResolver<TParent>;
  label?: ProductImageToLabelResolver<TParent>;
  path?: ProductImageToPathResolver<TParent>;
  position?: ProductImageToPositionResolver<TParent>;
  url?: ProductImageToUrlResolver<TParent>;
}

export interface ProductImageToDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductImageToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductImageToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductImageToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductImageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductLinksTypeResolver<TParent = any> {
  link_type?: ProductLinksToLink_typeResolver<TParent>;
  linked_product_sku?: ProductLinksToLinked_product_skuResolver<TParent>;
  linked_product_type?: ProductLinksToLinked_product_typeResolver<TParent>;
  position?: ProductLinksToPositionResolver<TParent>;
  sku?: ProductLinksToSkuResolver<TParent>;
}

export interface ProductLinksToLink_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductLinksToLinked_product_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductLinksToLinked_product_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductLinksToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductLinksToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLProductVideoTypeResolver<TParent = any> {
  disabled?: ProductVideoToDisabledResolver<TParent>;
  label?: ProductVideoToLabelResolver<TParent>;
  position?: ProductVideoToPositionResolver<TParent>;
  url?: ProductVideoToUrlResolver<TParent>;
  video_content?: ProductVideoToVideo_contentResolver<TParent>;
}

export interface ProductVideoToDisabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductVideoToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductVideoToPositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductVideoToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ProductVideoToVideo_contentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSalesItemInterfaceTypeResolver<TParent = any> {
  gift_message?: SalesItemInterfaceToGift_messageResolver<TParent>;
}

export interface SalesItemInterfaceToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLShipmentItemTypeResolver<TParent = any> {
  id?: ShipmentItemToIdResolver<TParent>;
  order_item?: ShipmentItemToOrder_itemResolver<TParent>;
  product_name?: ShipmentItemToProduct_nameResolver<TParent>;
  product_sale_price?: ShipmentItemToProduct_sale_priceResolver<TParent>;
  product_sku?: ShipmentItemToProduct_skuResolver<TParent>;
  quantity_shipped?: ShipmentItemToQuantity_shippedResolver<TParent>;
}

export interface ShipmentItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentItemToOrder_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentItemToProduct_nameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentItemToProduct_sale_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentItemToProduct_skuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ShipmentItemToQuantity_shippedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSimpleCartItemTypeResolver<TParent = any> {
  customizable_options?: SimpleCartItemToCustomizable_optionsResolver<TParent>;
  gift_message?: SimpleCartItemToGift_messageResolver<TParent>;
  id?: SimpleCartItemToIdResolver<TParent>;
  prices?: SimpleCartItemToPricesResolver<TParent>;
  product?: SimpleCartItemToProductResolver<TParent>;
  quantity?: SimpleCartItemToQuantityResolver<TParent>;
  uid?: SimpleCartItemToUidResolver<TParent>;
}

export interface SimpleCartItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToGift_messageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleCartItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSimpleWishlistItemTypeResolver<TParent = any> {
  added_at?: SimpleWishlistItemToAdded_atResolver<TParent>;
  customizable_options?: SimpleWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: SimpleWishlistItemToDescriptionResolver<TParent>;
  id?: SimpleWishlistItemToIdResolver<TParent>;
  product?: SimpleWishlistItemToProductResolver<TParent>;
  quantity?: SimpleWishlistItemToQuantityResolver<TParent>;
}

export interface SimpleWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SimpleWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSwatchLayerFilterItemTypeResolver<TParent = any> {
  items_count?: SwatchLayerFilterItemToItems_countResolver<TParent>;
  label?: SwatchLayerFilterItemToLabelResolver<TParent>;
  swatch_data?: SwatchLayerFilterItemToSwatch_dataResolver<TParent>;
  value_string?: SwatchLayerFilterItemToValue_stringResolver<TParent>;
}

export interface SwatchLayerFilterItemToItems_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SwatchLayerFilterItemToLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SwatchLayerFilterItemToSwatch_dataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SwatchLayerFilterItemToValue_stringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSwatchLayerFilterItemInterfaceTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SwatchLayerFilterItem' | Promise<'SwatchLayerFilterItem'>;
}
export interface GQLTextSwatchDataTypeResolver<TParent = any> {
  value?: TextSwatchDataToValueResolver<TParent>;
}

export interface TextSwatchDataToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTotalsSegmentTypeResolver<TParent = any> {
  code?: TotalsSegmentToCodeResolver<TParent>;
  extension_attributes?: TotalsSegmentToExtension_attributesResolver<TParent>;
  title?: TotalsSegmentToTitleResolver<TParent>;
  value?: TotalsSegmentToValueResolver<TParent>;
}

export interface TotalsSegmentToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsSegmentToExtension_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsSegmentToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TotalsSegmentToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVirtualCartItemTypeResolver<TParent = any> {
  customizable_options?: VirtualCartItemToCustomizable_optionsResolver<TParent>;
  id?: VirtualCartItemToIdResolver<TParent>;
  prices?: VirtualCartItemToPricesResolver<TParent>;
  product?: VirtualCartItemToProductResolver<TParent>;
  quantity?: VirtualCartItemToQuantityResolver<TParent>;
  uid?: VirtualCartItemToUidResolver<TParent>;
}

export interface VirtualCartItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualCartItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualCartItemToPricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualCartItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualCartItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualCartItemToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVirtualProductTypeResolver<TParent = any> {
  New_attribute_size?: VirtualProductToNew_attribute_sizeResolver<TParent>;
  New_multiple_attribute?: VirtualProductToNew_multiple_attributeResolver<TParent>;
  Test_Ainars?: VirtualProductToTest_AinarsResolver<TParent>;
  attribute_allows_html?: VirtualProductToAttribute_allows_htmlResolver<TParent>;
  attribute_set_id?: VirtualProductToAttribute_set_idResolver<TParent>;
  brand?: VirtualProductToBrandResolver<TParent>;
  canonical_url?: VirtualProductToCanonical_urlResolver<TParent>;
  categories?: VirtualProductToCategoriesResolver<TParent>;
  clothing_colour?: VirtualProductToClothing_colourResolver<TParent>;
  clothing_gender?: VirtualProductToClothing_genderResolver<TParent>;
  clothing_size?: VirtualProductToClothing_sizeResolver<TParent>;
  clothing_type?: VirtualProductToClothing_typeResolver<TParent>;
  color?: VirtualProductToColorResolver<TParent>;
  color_elena?: VirtualProductToColor_elenaResolver<TParent>;
  colors_with_images?: VirtualProductToColors_with_imagesResolver<TParent>;
  country_of_manufacture?: VirtualProductToCountry_of_manufactureResolver<TParent>;
  created_at?: VirtualProductToCreated_atResolver<TParent>;
  crosssell_products?: VirtualProductToCrosssell_productsResolver<TParent>;
  description?: VirtualProductToDescriptionResolver<TParent>;
  fit?: VirtualProductToFitResolver<TParent>;
  gift_message_available?: VirtualProductToGift_message_availableResolver<TParent>;
  id?: VirtualProductToIdResolver<TParent>;
  image?: VirtualProductToImageResolver<TParent>;
  images_type_map?: VirtualProductToImages_type_mapResolver<TParent>;
  license_key?: VirtualProductToLicense_keyResolver<TParent>;
  manufacturer?: VirtualProductToManufacturerResolver<TParent>;
  material?: VirtualProductToMaterialResolver<TParent>;
  media_gallery?: VirtualProductToMedia_galleryResolver<TParent>;
  media_gallery_entries?: VirtualProductToMedia_gallery_entriesResolver<TParent>;
  memory?: VirtualProductToMemoryResolver<TParent>;
  meta_description?: VirtualProductToMeta_descriptionResolver<TParent>;
  meta_keyword?: VirtualProductToMeta_keywordResolver<TParent>;
  meta_title?: VirtualProductToMeta_titleResolver<TParent>;
  multiple_attribute?: VirtualProductToMultiple_attributeResolver<TParent>;
  name?: VirtualProductToNameResolver<TParent>;
  new_from_date?: VirtualProductToNew_from_dateResolver<TParent>;
  new_to_date?: VirtualProductToNew_to_dateResolver<TParent>;
  only_x_left_in_stock?: VirtualProductToOnly_x_left_in_stockResolver<TParent>;
  options?: VirtualProductToOptionsResolver<TParent>;
  options_container?: VirtualProductToOptions_containerResolver<TParent>;
  original_price?: VirtualProductToOriginal_priceResolver<TParent>;
  price?: VirtualProductToPriceResolver<TParent>;
  price_range?: VirtualProductToPrice_rangeResolver<TParent>;
  price_tiers?: VirtualProductToPrice_tiersResolver<TParent>;
  product_links?: VirtualProductToProduct_linksResolver<TParent>;
  qty?: VirtualProductToQtyResolver<TParent>;
  quantity?: VirtualProductToQuantityResolver<TParent>;
  ranking?: VirtualProductToRankingResolver<TParent>;
  rating_summary?: VirtualProductToRating_summaryResolver<TParent>;
  redirect_code?: VirtualProductToRedirect_codeResolver<TParent>;
  related_products?: VirtualProductToRelated_productsResolver<TParent>;
  relative_url?: VirtualProductToRelative_urlResolver<TParent>;
  review_count?: VirtualProductToReview_countResolver<TParent>;
  reviews?: VirtualProductToReviewsResolver<TParent>;
  row_total?: VirtualProductToRow_totalResolver<TParent>;
  s_attributes?: VirtualProductToS_attributesResolver<TParent>;
  salable_qty?: VirtualProductToSalable_qtyResolver<TParent>;
  shoes_size?: VirtualProductToShoes_sizeResolver<TParent>;
  short_description?: VirtualProductToShort_descriptionResolver<TParent>;
  size?: VirtualProductToSizeResolver<TParent>;
  sku?: VirtualProductToSkuResolver<TParent>;
  small_image?: VirtualProductToSmall_imageResolver<TParent>;
  special_from_date?: VirtualProductToSpecial_from_dateResolver<TParent>;
  special_price?: VirtualProductToSpecial_priceResolver<TParent>;
  special_to_date?: VirtualProductToSpecial_to_dateResolver<TParent>;
  stock_item?: VirtualProductToStock_itemResolver<TParent>;
  stock_status?: VirtualProductToStock_statusResolver<TParent>;
  swatch_image?: VirtualProductToSwatch_imageResolver<TParent>;
  test?: VirtualProductToTestResolver<TParent>;
  texture?: VirtualProductToTextureResolver<TParent>;
  thumbnail?: VirtualProductToThumbnailResolver<TParent>;
  tier_price?: VirtualProductToTier_priceResolver<TParent>;
  tier_prices?: VirtualProductToTier_pricesResolver<TParent>;
  type?: VirtualProductToTypeResolver<TParent>;
  type_id?: VirtualProductToType_idResolver<TParent>;
  uid?: VirtualProductToUidResolver<TParent>;
  updated_at?: VirtualProductToUpdated_atResolver<TParent>;
  upsell_products?: VirtualProductToUpsell_productsResolver<TParent>;
  url?: VirtualProductToUrlResolver<TParent>;
  url_key?: VirtualProductToUrl_keyResolver<TParent>;
  url_path?: VirtualProductToUrl_pathResolver<TParent>;
  url_rewrites?: VirtualProductToUrl_rewritesResolver<TParent>;
  url_suffix?: VirtualProductToUrl_suffixResolver<TParent>;
  valuesss?: VirtualProductToValuesssResolver<TParent>;
  websites?: VirtualProductToWebsitesResolver<TParent>;
  yes_no?: VirtualProductToYes_noResolver<TParent>;
}

export interface VirtualProductToNew_attribute_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToNew_multiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTest_AinarsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToAttribute_allows_htmlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToAttribute_set_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToCanonical_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToCategoriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToClothing_colourResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToClothing_genderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToClothing_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToClothing_typeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToColor_elenaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToColors_with_imagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToCountry_of_manufactureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToCreated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToCrosssell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToFitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToGift_message_availableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToImages_type_mapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToLicense_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToManufacturerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMaterialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMedia_galleryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMedia_gallery_entriesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMemoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMeta_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMeta_keywordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMeta_titleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToMultiple_attributeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToNew_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToNew_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToOnly_x_left_in_stockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToOptions_containerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToOriginal_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToPrice_rangeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToPrice_tiersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToProduct_linksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToQtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRankingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRating_summaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRedirect_codeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRelated_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRelative_urlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToReview_countResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToReviewsArgs {
  pageSize?: number;
  currentPage?: number;
}
export interface VirtualProductToReviewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: VirtualProductToReviewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToRow_totalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToS_attributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSalable_qtyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToShoes_sizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToShort_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSkuResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSmall_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSpecial_from_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSpecial_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSpecial_to_dateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToStock_itemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToStock_statusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToSwatch_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTestResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTextureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToThumbnailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTier_priceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTier_pricesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToType_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUpdated_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUpsell_productsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUrl_keyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUrl_pathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUrl_rewritesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToUrl_suffixResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToValuesssResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToWebsitesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualProductToYes_noResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLVirtualWishlistItemTypeResolver<TParent = any> {
  added_at?: VirtualWishlistItemToAdded_atResolver<TParent>;
  customizable_options?: VirtualWishlistItemToCustomizable_optionsResolver<TParent>;
  description?: VirtualWishlistItemToDescriptionResolver<TParent>;
  id?: VirtualWishlistItemToIdResolver<TParent>;
  product?: VirtualWishlistItemToProductResolver<TParent>;
  quantity?: VirtualWishlistItemToQuantityResolver<TParent>;
}

export interface VirtualWishlistItemToAdded_atResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualWishlistItemToCustomizable_optionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualWishlistItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualWishlistItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualWishlistItemToProductResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface VirtualWishlistItemToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
